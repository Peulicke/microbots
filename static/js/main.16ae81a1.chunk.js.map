{"version":3,"sources":["core/Vec3.ts","core/Mat3.ts","core/Bot.ts","core/utils.ts","core/conjugateGradientSparse.ts","core/World.ts","core/matrix.ts","core/Animation.ts","draw.ts","App.tsx","index.tsx"],"names":["newVec3","x","y","z","clone","a","add","b","sub","multiplyScalar","s","divideScalar","dot","length","Math","sqrt","normalize","newMat3","Vec3","apply","newBot","pos","weight","fixed","setPos","bot","setWeight","setFixed","average","result","Error","throwError","i","zeros","height","width","Array","map","numberArrayFromVec3Array","vec","e","k","addVecMultNum","c","v","matMultVec","A","j","ldiv","ADense","floor","abs","push","matToSparse","r","p","rsold","Ap","alpha","rsnew","newWorld","bots","setBots","world","power","setPower","friction","edgeStrength","d","exp","stiffness","Mat3","stiffnessDerivative","dim","epsilon","val","dPlus","dMinus","plus","minus","stiffnessPair","stiffnessPairDerivative","derivative","removeFixedFromVector","vector","removeFixedFromMatrix","mat","stiffnessMatrix","sx","sy","sz","acceleration","before","after","dt","v1","v2","forceMatrix","acc","displacement","f","row","sum","cg","element","l","numberArrayFromMat3Array","resolveCollisionStep","max","oneFixed","dist","n","resolveCollision","gradient","uBefore","u","uAfter","beforeBefore","afterAfter","res","ss","dku","p1","p2","p3","p4","p5","numerator","start","end","World","Bot","optimize","animation","vel","iter","g","displacements","min","subdivide","createAnimation","updateCylinder","from","to","radius","cylinder","orientation","Matrix4","lookAt","Vector3","Object3D","up","multiply","set","setRotationFromMatrix","scale","position","newCylinder","color","edgeGeometry","CylinderGeometry","Mesh","MeshPhongMaterial","rng","Prando","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","worldStart","pipe","_","flat","worldEnd","rand","next","Animation","botMeshes","geom","SphereGeometry","computeVertexNormals","faces","forEach","face","vertexColors","fill","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","geometry","newSphere","Color","groundEdgeMeshes","edgeMeshes","scene","Scene","AmbientLight","light","DirectionalLight","newScene","updateWorld","time","remove","strength","App","useWindowSize","windowWidth","windowHeight","classes","mount","useRef","useState","controls","setControls","camera","setCamera","renderer","setRenderer","frame","setFrame","setTime","animating","setAnimating","useEffect","mc","current","cam","PerspectiveCamera","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","t","window","setInterval","clearInterval","removeChild","update","render","pauseFrames","round","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","direction","className","Paper","List","ListItem","onClick","image","document","getElementsByTagName","toDataURL","createElement","href","replace","download","click","saveImage","ref","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.16ae81a1.chunk.js","sourcesContent":["export type Vec3 = [number, number, number];\n\nexport const newVec3 = (x: number, y: number, z: number): Vec3 => [x, y, z];\n\nexport const clone = (a: Vec3): Vec3 => [a[0], a[1], a[2]];\n\nexport const add = (a: Vec3, b: Vec3): Vec3 => [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n\nexport const sub = (a: Vec3, b: Vec3): Vec3 => [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n\nexport const multiplyScalar = (a: Vec3, s: number): Vec3 => [a[0] * s, a[1] * s, a[2] * s];\n\nexport const divideScalar = (a: Vec3, s: number): Vec3 => [a[0] / s, a[1] / s, a[2] / s];\n\nexport const dot = (a: Vec3, b: Vec3): number => a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\nexport const length = (a: Vec3): number => Math.sqrt(dot(a, a));\n\nexport const normalize = (a: Vec3): Vec3 => divideScalar(a, length(a));\n","import * as Vec3 from \"./Vec3\";\n\nexport type Mat3 = [Vec3.Vec3, Vec3.Vec3, Vec3.Vec3];\n\nexport const newMat3 = (x: Vec3.Vec3, y: Vec3.Vec3, z: Vec3.Vec3): Mat3 => [x, y, z];\n\nexport const clone = (a: Mat3): Mat3 => [Vec3.clone(a[0]), Vec3.clone(a[1]), Vec3.clone(a[2])];\n\nexport const add = (a: Mat3, b: Mat3): Mat3 => [Vec3.add(a[0], b[0]), Vec3.add(a[1], b[1]), Vec3.add(a[2], b[2])];\n\nexport const sub = (a: Mat3, b: Mat3): Mat3 => [Vec3.sub(a[0], b[0]), Vec3.sub(a[1], b[1]), Vec3.sub(a[2], b[2])];\n\nexport const multiplyScalar = (a: Mat3, s: number): Mat3 => [\n    Vec3.multiplyScalar(a[0], s),\n    Vec3.multiplyScalar(a[1], s),\n    Vec3.multiplyScalar(a[2], s)\n];\n\nexport const divideScalar = (a: Mat3, s: number): Mat3 => [\n    Vec3.divideScalar(a[0], s),\n    Vec3.divideScalar(a[1], s),\n    Vec3.divideScalar(a[2], s)\n];\n\nexport const apply = (a: Mat3, b: Vec3.Vec3): Vec3.Vec3 => [Vec3.dot(a[0], b), Vec3.dot(a[1], b), Vec3.dot(a[2], b)];\n","import * as Vec3 from \"./Vec3\";\n\nexport type Bot = {\n    pos: Vec3.Vec3;\n    weight: number;\n    fixed: boolean;\n};\n\nexport const newBot = (): Bot => ({\n    pos: Vec3.newVec3(0, 0, 0),\n    weight: 1,\n    fixed: false\n});\n\nexport const setPos = (pos: Vec3.Vec3) => (bot: Bot): Bot => {\n    bot.pos = pos;\n    return bot;\n};\n\nexport const setWeight = (weight: number) => (bot: Bot): Bot => {\n    bot.weight = weight;\n    return bot;\n};\n\nexport const setFixed = (fixed: boolean) => (bot: Bot): Bot => {\n    bot.fixed = fixed;\n    return bot;\n};\n\nexport const average = (a: Bot, b: Bot): Bot => {\n    const result = newBot();\n    result.pos = Vec3.divideScalar(Vec3.add(a.pos, b.pos), 2);\n    result.weight = (a.weight + b.weight) / 2;\n    result.fixed = a.fixed || b.fixed;\n    return result;\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\n\nconst throwError = () => {\n    throw new Error(\"Vectors need to be the same length\");\n};\n\nexport const dot = (a: number[], b: number[]): number => {\n    if (a.length !== b.length) throwError();\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) result += a[i] * b[i];\n    return result;\n};\n\nexport const outerProduct = (a: Vec3.Vec3, b: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.newMat3(\n        Vec3.newVec3(a[0] * b[0], a[0] * b[1], a[0] * b[2]),\n        Vec3.newVec3(a[1] * b[0], a[1] * b[1], a[1] * b[2]),\n        Vec3.newVec3(a[2] * b[0], a[2] * b[1], a[2] * b[2])\n    );\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n\nexport const numberArrayFromVec3Array = (vec: Vec3.Vec3[]): number[] => {\n    const result = [...Array(3 * vec.length)].map(() => 0);\n    vec.map((e, i) => {\n        for (let k = 0; k < 3; ++k) {\n            result[3 * i + k] = e[k];\n        }\n    });\n    return result;\n};\n\nexport const numberArrayToVec3Array = (vec: number[]): Vec3.Vec3[] =>\n    [...Array(vec.length / 3)].map((_, i) => Vec3.newVec3(vec[3 * i], vec[3 * i + 1], vec[3 * i + 2]));\n\nexport const numberArrayFromMat3Array = (mat: Mat3.Mat3[][]): number[][] => {\n    const result = zeros(3 * mat.length, 3 * mat[0]?.length || 0);\n    mat.map((row, i) =>\n        row.map((element, j) => {\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k][3 * j + l] = mat[i][j][k][l];\n                }\n            }\n        })\n    );\n    return result;\n};\n\nexport const numberArrayToMat3Array = (mat: number[][]): Mat3.Mat3[][] =>\n    zeros(mat.length / 3, (mat[0]?.length || 0) / 3).map((row, i) =>\n        row.map((element, j) => {\n            const res = Mat3.newMat3(Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0));\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    res[k][l] = mat[3 * i + k][3 * j + l];\n                }\n            }\n            return res;\n        })\n    );\n","type SparseMat = [number, number, number][];\n\nexport const matToSparse = (A: number[][]): SparseMat => {\n    const result: SparseMat = [];\n    for (let i = 0; i < A.length; ++i) {\n        for (let j = 0; j < A.length; ++j) {\n            if (Math.floor(i / 3) !== Math.floor(j / 3) && Math.abs(A[i][j]) < 1e-3) continue;\n            result.push([i, j, A[i][j]]);\n        }\n    }\n    return result;\n};\n\nconst clone = (a: number[]): number[] => a.map(v => v);\n\nconst dot = (a: number[], b: number[]): number => {\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) {\n        result += a[i] * b[i];\n    }\n    return result;\n};\n\nconst addVecMultNum = (a: number[], b: number[], c: number): number[] => a.map((v, i) => v + b[i] * c);\n\nconst matMultVec = (A: SparseMat, b: number[]): number[] => {\n    const result = b.map(() => 0);\n    for (let c = 0; c < A.length; ++c) {\n        const i = A[c][0];\n        const j = A[c][1];\n        const v = A[c][2];\n        result[i] += v * b[j];\n    }\n    return result;\n};\n\nexport const ldiv = (ADense: number[][], b: number[]): number[] => {\n    const A = matToSparse(ADense);\n    let x = b.map(() => 0);\n    let r = addVecMultNum(b, matMultVec(A, x), -1);\n    let p = clone(r);\n    let rsold = dot(r, r);\n    for (let i = 0; i < 10; ++i) {\n        const Ap = matMultVec(A, p);\n        const alpha = rsold / dot(p, Ap);\n        x = addVecMultNum(x, p, alpha);\n        r = addVecMultNum(r, Ap, -alpha);\n        const rsnew = dot(r, r);\n        p = addVecMultNum(r, p, rsnew / rsold);\n        rsold = rsnew;\n    }\n    return x;\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\nimport { dot, outerProduct, numberArrayFromVec3Array, numberArrayFromMat3Array } from \"./utils\";\nimport { ldiv } from \"./matrix\";\nimport * as Bot from \"./Bot\";\n\nexport type World = { bots: Bot.Bot[] };\n\nexport const newWorld = (): World => ({ bots: [] });\n\nexport const setBots = (bots: Bot.Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nlet power = 1;\nexport const setPower = (p: number): void => {\n    power = p;\n};\nconst friction = 0.1;\n\nexport const edgeStrength = (d: number): number => 2 / (1 + Math.exp(power * (d - 1)));\n\nexport const stiffness = (d: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.multiplyScalar(outerProduct(d, d), edgeStrength(Vec3.length(d)) / Vec3.dot(d, d));\n\nexport const stiffnessDerivative = (dim: number) => (d: Vec3.Vec3): Mat3.Mat3 => {\n    const epsilon = 0.00001;\n    const val = d[dim];\n    const dPlus = Vec3.clone(d);\n    dPlus[dim] = val + epsilon;\n    const dMinus = Vec3.clone(d);\n    dMinus[dim] = val - epsilon;\n    const plus = stiffness(dPlus);\n    const minus = stiffness(dMinus);\n    return Mat3.multiplyScalar(Mat3.sub(plus, minus), 1 / (2 * epsilon));\n};\n\nexport const stiffnessPair = (a: Bot.Bot, b: Bot.Bot): Mat3.Mat3 => {\n    const d = Vec3.sub(b.pos, a.pos);\n    return stiffness(d);\n};\n\nexport const stiffnessPairDerivative = (bot: Bot.Bot) => (dim: number) => (a: Bot.Bot, b: Bot.Bot): Mat3.Mat3 => {\n    if (a !== bot && b !== bot)\n        return Mat3.newMat3(Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0));\n    const derivative = stiffnessDerivative(dim)(Vec3.sub(b.pos, a.pos));\n    if (a === bot) return derivative;\n    return Mat3.multiplyScalar(derivative, -1);\n};\n\nexport const removeFixedFromVector = (world: World) => (vector: Vec3.Vec3[]): Vec3.Vec3[] =>\n    vector.map((v, i) => (world.bots[i].fixed ? Vec3.newVec3(0, 0, 0) : v));\n\nexport const removeFixedFromMatrix = (world: World) => (mat: Mat3.Mat3[][]): Mat3.Mat3[][] =>\n    mat.map((vector, i) =>\n        vector.map((v, j) =>\n            world.bots[i].fixed || world.bots[j].fixed\n                ? Mat3.newMat3(Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0))\n                : v\n        )\n    );\n\nexport const stiffnessMatrix = (world: World): Mat3.Mat3[][] => {\n    const result = world.bots.map(() =>\n        world.bots.map(() => Mat3.newMat3(Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0)))\n    );\n    for (let i = 0; i < world.bots.length; ++i) {\n        const sx = Mat3.multiplyScalar(stiffness(Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0)), friction);\n        const sy = stiffness(Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n        const sz = Mat3.multiplyScalar(stiffness(Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5)), friction);\n        result[i][i] = Mat3.add(result[i][i], sx);\n        result[i][i] = Mat3.add(result[i][i], sy);\n        result[i][i] = Mat3.add(result[i][i], sz);\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = 0; j < world.bots.length; ++j) {\n            if (i === j) continue;\n            const s = stiffnessPair(world.bots[i], world.bots[j]);\n            result[i][i] = Mat3.add(result[i][i], s);\n            result[i][j] = Mat3.sub(result[i][j], s);\n        }\n    }\n    return removeFixedFromMatrix(world)(result);\n};\n\nexport const acceleration = (before: World, after: World, dt: number) => (world: World): Vec3.Vec3[] =>\n    world.bots.map((bot, i) => {\n        const v1 = Vec3.divideScalar(Vec3.sub(world.bots[i].pos, before.bots[i].pos), dt);\n        const v2 = Vec3.divideScalar(Vec3.sub(after.bots[i].pos, world.bots[i].pos), dt);\n        return Vec3.divideScalar(Vec3.sub(v2, v1), dt);\n    });\n\nexport const forceMatrix = (before: World, after: World, dt: number) => (world: World): Vec3.Vec3[] => {\n    const acc = acceleration(before, after, dt)(world);\n    return removeFixedFromVector(world)(\n        world.bots.map((bot, i) => Vec3.multiplyScalar(Vec3.sub(Vec3.newVec3(0, -1, 0), acc[i]), bot.weight))\n    );\n};\n\nexport const displacement = (before: World, after: World, dt: number) => (world: World): number[] => {\n    const f = numberArrayFromVec3Array(forceMatrix(before, after, dt)(world));\n    const k = numberArrayFromMat3Array(stiffnessMatrix(world));\n    return ldiv(k, f);\n};\n\nexport const resolveCollisionStep = (world: World): World => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].fixed) continue;\n        world.bots[i].pos[1] = Math.max(world.bots[i].pos[1], 0.5);\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (world.bots[i].fixed && world.bots[j].fixed) continue;\n            const oneFixed = world.bots[i].fixed || world.bots[j].fixed;\n            const d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const dist = Vec3.length(d);\n            if (dist > 1) continue;\n            const n = Vec3.multiplyScalar(d, (1 - dist) / (oneFixed ? 1 : 2) / dist);\n            if (!world.bots[i].fixed) world.bots[i].pos = Vec3.sub(world.bots[i].pos, n);\n            if (!world.bots[j].fixed) world.bots[j].pos = Vec3.add(world.bots[j].pos, n);\n        }\n    }\n    return world;\n};\n\nexport const resolveCollision = (world: World): World => {\n    let result = world;\n    for (let i = 0; i < 10; ++i) result = resolveCollisionStep(result);\n    return result;\n};\n\nexport const gradient = (uBefore: number[], u: number[], uAfter: number[]) => (\n    beforeBefore: World,\n    before: World,\n    after: World,\n    afterAfter: World,\n    dt: number\n) => (world: World): Vec3.Vec3[] => {\n    const result = [...Array(world.bots.length)].map(() => Vec3.newVec3(0, 0, 0));\n    const res = [...Array(world.bots.length)].map(() =>\n        [0, 1, 2].map(() => [...Array(world.bots.length)].map(() => Vec3.newVec3(0, 0, 0)))\n    );\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const sx = Mat3.multiplyScalar(\n                stiffnessDerivative(dim)(Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0)),\n                friction\n            );\n            const sy = stiffnessDerivative(dim)(Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n            const sz = Mat3.multiplyScalar(\n                stiffnessDerivative(dim)(Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5)),\n                friction\n            );\n            const v = Vec3.newVec3(u[3 * i], u[3 * i + 1], u[3 * i + 2]);\n            res[i][dim][i] = Vec3.add(res[i][dim][i], Mat3.apply(Mat3.add(Mat3.add(sx, sy), sz), v));\n            for (let j = 0; j < world.bots.length; ++j) {\n                if (i >= j) continue;\n                const s = stiffnessPairDerivative(world.bots[i])(dim)(world.bots[i], world.bots[j]);\n                const ss = Mat3.apply(s, Vec3.sub(Vec3.newVec3(u[3 * j], u[3 * j + 1], u[3 * j + 2]), v));\n                res[i][dim][i] = Vec3.add(res[i][dim][i], ss);\n                res[i][dim][j] = Vec3.sub(res[i][dim][j], ss);\n                res[j][dim][j] = Vec3.add(res[j][dim][j], ss);\n                res[j][dim][i] = Vec3.sub(res[j][dim][i], ss);\n            }\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const dku = numberArrayFromVec3Array(removeFixedFromVector(world)(res[i][dim]));\n            result[i][dim] =\n                -dot(u, dku) + 2 * ((-uBefore[3 * i + dim] + 2 * u[3 * i + dim] - uAfter[3 * i + dim]) / dt ** 2);\n        }\n    }\n    const overlapPenalty = 1000;\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].pos[1] > 0.5) continue;\n        const l = world.bots[i].pos[1] + 0.5;\n        result[i][1] += 2 * overlapPenalty * (2 * (l - 2));\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            let d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const l = Vec3.length(d);\n            if (l > 1) continue;\n            d = Vec3.multiplyScalar(d, overlapPenalty * ((2 * (l - 2)) / l));\n            result[i] = Vec3.sub(result[i], d);\n            result[j] = Vec3.add(result[j], d);\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        const p1 = Vec3.multiplyScalar(beforeBefore.bots[i].pos, 2);\n        const p2 = Vec3.multiplyScalar(before.bots[i].pos, -8);\n        const p3 = Vec3.multiplyScalar(world.bots[i].pos, 12);\n        const p4 = Vec3.multiplyScalar(after.bots[i].pos, -8);\n        const p5 = Vec3.multiplyScalar(afterAfter.bots[i].pos, 2);\n        const numerator = Vec3.add(Vec3.add(Vec3.add(Vec3.add(p1, p2), p3), p4), p5);\n        result[i] = Vec3.add(result[i], Vec3.multiplyScalar(numerator, 100000 / dt ** 4));\n    }\n    return result;\n};\n","import * as cg from \"./conjugateGradientSparse\";\n\nexport const ldiv = (A: number[][], b: number[]): number[] => {\n    A = A.map(row => row.map(v => v));\n    b = b.map(v => v);\n    for (let i = 0; i < A.length; i += 3) {\n        let sum = 0;\n        for (let j = 0; j < 3; ++j) {\n            for (let k = 0; k < 3; ++k) {\n                sum += A[i + j][i + k] ** 2;\n            }\n        }\n        sum = Math.sqrt(3 / sum);\n        for (let j = 0; j < 3; ++j) {\n            for (let k = 0; k < A.length; ++k) {\n                A[i + j][k] *= sum;\n            }\n            b[i + j] *= sum;\n        }\n    }\n    return cg.ldiv(A, b);\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Bot from \"./Bot\";\nimport * as World from \"./World\";\n\nconst average = (start: World.World, end: World.World): World.World => {\n    const result = World.newWorld();\n    result.bots = start.bots.map((b, i) => Bot.average(b, end.bots[i]));\n    return result;\n};\n\nconst gradient = (animation: World.World[], dt: number): Vec3.Vec3[][] => {\n    const result = [...Array(animation.length)].map(() =>\n        [...Array(animation[0].bots.length)].map(() => Vec3.newVec3(0, 0, 0))\n    );\n    const displacements = [...Array(animation.length)].map(() => [...Array(3 * animation[0].bots.length)].map(() => 0));\n    for (let i = 0; i < animation.length; ++i) {\n        const before = animation[Math.max(i - 1, 0)];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        displacements[i] = World.displacement(before, after, dt)(animation[i]);\n    }\n    for (let i = 1; i < animation.length - 1; ++i) {\n        const beforeBefore = animation[Math.max(i - 2, 0)];\n        const before = animation[i - 1];\n        const after = animation[i + 1];\n        const afterAfter = animation[Math.min(i + 2, animation.length - 1)];\n        result[i] = World.gradient(displacements[i - 1], displacements[i], displacements[i + 1])(\n            beforeBefore,\n            before,\n            after,\n            afterAfter,\n            dt\n        )(animation[i]);\n    }\n    return result;\n};\n\nconst optimize = (animation: World.World[], dt: number): void => {\n    const n = 200;\n    const acc = 0.02;\n    const vel = animation.map(world => world.bots.map(() => Vec3.newVec3(0, 0, 0)));\n    for (let iter = 0; iter < n / animation.length; ++iter) {\n        const y = (iter * animation.length) / n;\n        const x = ((1 + y) * animation.length) / 10;\n        World.setPower(4 * (x / (1 + x)));\n        const g = gradient(animation, dt).map(world =>\n            world.map(v => Vec3.multiplyScalar(v, -acc / (1e-4 + Vec3.length(v))))\n        );\n        animation.map((world, i) =>\n            world.bots.map((bot, j) => {\n                if (bot.fixed) return;\n                vel[i][j] = Vec3.add(vel[i][j], g[i][j]);\n                vel[i][j] = Vec3.multiplyScalar(vel[i][j], 0.9);\n                bot.pos = Vec3.add(bot.pos, vel[i][j]);\n            })\n        );\n    }\n};\n\nconst subdivide = (animation: World.World[]): World.World[] => {\n    const result = [...Array(animation.length * 2 - 1)];\n    for (let i = 0; i < animation.length; ++i) result[2 * i] = animation[i];\n    for (let i = 1; i < result.length - 1; i += 2) result[i] = average(result[i - 1], result[i + 1]);\n    return result;\n};\n\nexport const createAnimation = (before: World.World, after: World.World, n: number): World.World[] => {\n    let result = [before, after];\n    let dt = 100;\n    for (let i = 0; i < n; ++i) {\n        dt /= 2;\n        result = subdivide(result);\n        optimize(result, dt);\n    }\n    return result;\n};\n","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D\n} from \"three\";\nimport * as Vec3 from \"./core/Vec3\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const newSphere = (pos: Vec3.Vec3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.position.set(...pos);\n    mesh.scale.set(0.5, 0.5, 0.5);\n    return mesh;\n};\n\nexport const updateCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number) => (cylinder: Mesh): Mesh => {\n    const orientation = new Matrix4();\n    orientation.lookAt(new Vector3(...from), new Vector3(...to), new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    cylinder.setRotationFromMatrix(orientation);\n    cylinder.scale.set(radius, Vec3.length(Vec3.sub(to, from)), radius);\n    const pos = Vec3.divideScalar(Vec3.add(from, to), 2);\n    cylinder.position.set(pos[0], pos[1], pos[2]);\n    return cylinder;\n};\n\nexport const newCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number, color: Color): Mesh => {\n    const edgeGeometry = new CylinderGeometry(1, 1, 1, 8, 1);\n    const cylinder = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    return updateCylinder(from, to, radius)(cylinder);\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { PerspectiveCamera, WebGLRenderer, Color } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { pipe } from \"ts-pipe-compose\";\nimport { Vec3, Bot, World, Animation } from \"./core\";\nimport { newScene, newSphere, newCylinder, updateCylinder } from \"./draw\";\nimport Prando from \"prando\";\nconst rng = new Prando(123);\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst height = 10;\nconst dist = 8;\n\nconst worldStart = pipe(\n    World.newWorld(),\n    World.setBots([\n        ...[...Array(height)]\n            .map((_, i) => [\n                Bot.setPos(Vec3.newVec3(-dist / 2, 0.5 + i, 0))(Bot.newBot()),\n                Bot.setPos(Vec3.newVec3(dist / 2, 0.5 + i, 0))(Bot.newBot())\n            ])\n            .flat(),\n        Bot.setPos(Vec3.newVec3(-dist / 2, 0.5 + height, 0))(Bot.newBot())\n    ])\n);\n\nconst worldEnd = pipe(\n    World.newWorld(),\n    World.setBots([\n        ...[...Array(height)]\n            .map((_, i) => [\n                Bot.setPos(Vec3.newVec3(-dist / 2, 0.5 + i, 0))(Bot.newBot()),\n                Bot.setPos(Vec3.newVec3(dist / 2, 0.5 + i, 0))(Bot.newBot())\n            ])\n            .flat(),\n        Bot.setPos(Vec3.newVec3(dist / 2, 0.5 + height, 0))(Bot.newBot())\n    ])\n);\n\nconst rand = () => Vec3.multiplyScalar(Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5), 0.0001);\nworldStart.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\nworldEnd.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n\nconst animation = Animation.createAnimation(worldStart, worldEnd, 8);\n\nconst botMeshes = animation[0].bots.map(bot => newSphere(bot.pos, bot.fixed ? new Color(0, 0, 1) : new Color(0, 1, 0)));\nconst groundEdgeMeshes = animation[0].bots.map(bot =>\n    newCylinder(bot.pos, Vec3.newVec3(bot.pos[0], 0, bot.pos[2]), 1, new Color(1, 0, 0))\n);\nconst edgeMeshes = animation[0].bots.map(a =>\n    animation[0].bots.map(b => newCylinder(a.pos, b.pos, 1, new Color(1, 0, 0)))\n);\nconst scene = newScene();\nbotMeshes.map(mesh => scene.add(mesh));\ngroundEdgeMeshes.map(mesh => scene.add(mesh));\nedgeMeshes.map((row, i) =>\n    row.map((mesh, j) => {\n        if (i >= j) return;\n        scene.add(mesh);\n    })\n);\n\nconst updateWorld = (time: number) => {\n    animation[time].bots.map((bot, i) => {\n        botMeshes[i].position.set(...bot.pos);\n    });\n    animation[time].bots.map((bot, i) => {\n        scene.remove(groundEdgeMeshes[i]);\n        const strength = World.edgeStrength(bot.pos[1] + 0.5);\n        if (strength < 0.01) return;\n        scene.add(groundEdgeMeshes[i]);\n        updateCylinder(\n            bot.pos,\n            Vec3.newVec3(bot.pos[0], 0, bot.pos[2]),\n            Math.sqrt(strength) * 0.3\n        )(groundEdgeMeshes[i]);\n    });\n    animation[time].bots.map((from, i) =>\n        animation[time].bots.map((to, j) => {\n            if (i >= j) return;\n            scene.remove(edgeMeshes[i][j]);\n            const strength = World.edgeStrength(Vec3.length(Vec3.sub(to.pos, from.pos)));\n            if (strength < 0.01) return;\n            scene.add(edgeMeshes[i][j]);\n            updateCylinder(from.pos, to.pos, Math.sqrt(strength) * 0.3)(edgeMeshes[i][j]);\n        })\n    );\n};\n\nconst saveImage = () => {\n    const canvas = document.getElementsByTagName(\"canvas\")[0];\n    const image = canvas.toDataURL(\"image/png\");\n    const a = document.createElement(\"a\");\n    a.href = image.replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n    a.download = \"image.png\";\n    a.click();\n};\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n    const [time, setTime] = useState(0);\n    const [animating, setAnimating] = useState(false);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && camera) renderer.render(scene, camera);\n    }, [controls, renderer, camera, frame]);\n\n    useEffect(() => {\n        const pauseFrac = 0.1;\n        const pauseFrames = Math.round(pauseFrac * animation.length);\n        let t = time % (2 * (animation.length + pauseFrames));\n        if (t < pauseFrames) {\n            updateWorld(0);\n            return;\n        }\n        t -= pauseFrames;\n        if (t < animation.length) {\n            updateWorld(t);\n            return;\n        }\n        t -= animation.length;\n        if (t < pauseFrames) {\n            updateWorld(animation.length - 1);\n            return;\n        }\n        t -= pauseFrames;\n        updateWorld(animation.length - 1 - t);\n    }, [time]);\n\n    useEffect(() => {\n        if (!animating) return;\n        const t = setInterval(() => setTime(time => time + 1), 10);\n        return () => clearInterval(t);\n    }, [animating]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Microbots</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <button onClick={() => setTime(time + 1)}>Time: {time}</button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <button onClick={() => setAnimating(!animating)}>\n                                            Animating: {animating ? \"true\" : \"false\"}\n                                        </button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <button onClick={() => saveImage()}>Save screenshot</button>\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}