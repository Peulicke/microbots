{"version":3,"sources":["core/Bot.ts","core/utils.ts","core/World.ts","core/matrix.ts","draw.ts","App.tsx","index.tsx"],"names":["newBot","pos","Vector3","weight","fixed","setPos","bot","setWeight","setFixed","throwError","Error","dot","a","b","length","result","i","addMatrix3","Matrix3","elements","map","e","subMatrix3","zeros","height","width","Array","numberArrayFromVector3Array","vec","k","getComponent","newWorld","bots","edges","setBots","world","initEdges","list","array","_","j","edgeStrength","d","Math","exp","stiffness","set","x","y","z","multiplyScalar","stiffnessDerivative","edgeStrengthFun","dim","epsilon","setComponent","plus","clone","add","minus","sub","stiffnessPair","edge","stiffnessPairDerivative","derivative","removeFixedFromVector","vector","v","removeFixedFromMatrix","mat","stiffnessMatrix","forEach","row","s","stiffnessMatrixDerivative","forceMatrix","displacement","A","f","element","l","numberArrayFromMatrix3Array","linear","compliance","u","objective","resolveCollisionStep","oneFixed","dist","n","resolveCollision","updateEdges","optimizeStepNumericalBotDim","stepSize","val","move","abs","sign","optimizeStepNumericalBot","fun","gradient","res","si","slice","applyMatrix3","sj","dku","optimizeStepNumerical","g","updateCylinder","from","to","radius","cylinder","direction","subVectors","orientation","Matrix4","lookAt","Object3D","up","multiply","setRotationFromMatrix","scale","position","divideScalar","toArray","rng","Prando","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","Bot","next","pipe","World","botMeshes","color","geom","SphereGeometry","computeVertexNormals","faces","face","vertexColors","fill","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","Mesh","MeshPhongMaterial","geometry","newSphere","Color","edgeMeshes","edgeGeometry","CylinderGeometry","newCylinder","scene","Scene","AmbientLight","light","DirectionalLight","newScene","App","useWindowSize","windowWidth","windowHeight","classes","mount","useRef","useState","controls","setControls","camera","setCamera","renderer","setRenderer","frame","setFrame","iterations","setIterations","useEffect","mc","current","cam","PerspectiveCamera","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","t","window","setInterval","clearInterval","removeChild","update","render","setTimeout","remove","sqrt","clearTimeout","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","className","Paper","List","ListItem","ref","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.010588f6.chunk.js","sourcesContent":["import { Vector3 } from \"three\";\n\nexport type Bot = {\n    pos: Vector3;\n    weight: number;\n    fixed: boolean;\n};\n\nexport const newBot = (): Bot => ({\n    pos: new Vector3(0, 0, 0),\n    weight: 1,\n    fixed: false\n});\n\nexport const setPos = (pos: Vector3) => (bot: Bot): Bot => {\n    bot.pos = pos;\n    return bot;\n};\n\nexport const setWeight = (weight: number) => (bot: Bot): Bot => {\n    bot.weight = weight;\n    return bot;\n};\n\nexport const setFixed = (fixed: boolean) => (bot: Bot): Bot => {\n    bot.fixed = fixed;\n    return bot;\n};\n","import { Vector3, Matrix3 } from \"three\";\n\nconst throwError = () => {\n    throw new Error(\"Vectors need to be the same length\");\n};\n\nexport const dot = (a: number[], b: number[]): number => {\n    if (a.length !== b.length) throwError();\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) result += a[i] * b[i];\n    return result;\n};\n\nexport const applyMatrix = (A: number[][], b: number[]): number[] => {\n    if (A[0].length !== b.length) throwError();\n    return [...Array(A.length)].map((_, i) => dot(A[i], b));\n};\n\nexport const outerProduct = (a: Vector3, b: Vector3): Matrix3 => {\n    if (a.length !== b.length) throwError();\n    return new Matrix3().set(\n        a.x * b.x,\n        a.x * b.y,\n        a.x * b.z,\n        a.y * b.x,\n        a.y * b.y,\n        a.y * b.z,\n        a.z * b.x,\n        a.z * b.y,\n        a.z * b.z\n    );\n};\n\nexport const addMatrix3 = (a: Matrix3, b: Matrix3): Matrix3 => {\n    const result = new Matrix3();\n    result.elements = a.elements.map((e, i) => e + b.elements[i]);\n    return result;\n};\n\nexport const subMatrix3 = (a: Matrix3, b: Matrix3): Matrix3 => {\n    const result = new Matrix3();\n    result.elements = a.elements.map((e, i) => e - b.elements[i]);\n    return result;\n};\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n\nexport const numberArrayFromVector3Array = (vec: Vector3[]): number[] => {\n    const result = [...Array(3 * vec.length)].map(() => 0);\n    vec.map((e, i) => {\n        for (let k = 0; k < 3; ++k) {\n            result[3 * i + k] = e.getComponent(k);\n        }\n    });\n    return result;\n};\n\nexport const numberArrayToVector3Array = (vec: number[]): Vector3[] =>\n    [...Array(vec.length / 3)]\n        .map(() => new Vector3())\n        .map((e, i) => {\n            for (let k = 0; k < 3; ++k) {\n                e.setComponent(k, vec[3 * i + k]);\n            }\n            return e;\n        });\n\nexport const numberArrayFromMatrix3Array = (mat: Matrix3[][]): number[][] => {\n    const result = zeros(3 * mat.length, 3 * mat[0]?.length || 0);\n    mat.map((row, i) =>\n        row.map((element, j) => {\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k][3 * j + l] = mat[i][j].elements[k + 3 * l];\n                }\n            }\n        })\n    );\n    return result;\n};\n\nexport const numberArrayToMatrix3Array = (mat: number[][]): Matrix3[][] =>\n    zeros(mat.length / 3, (mat[0]?.length || 0) / 3).map((row, i) =>\n        row.map((element, j) => {\n            const res = new Matrix3();\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    res.elements[k + 3 * l] = mat[3 * i + k][3 * j + l];\n                }\n            }\n            return res;\n        })\n    );\n","import { Vector3, Matrix3 } from \"three\";\nimport {\n    dot,\n    outerProduct,\n    addMatrix3,\n    subMatrix3,\n    numberArrayFromVector3Array,\n    numberArrayFromMatrix3Array\n} from \"./utils\";\nimport { ldiv } from \"./matrix\";\nimport { Bot } from \"./Bot\";\n\nexport type World = { bots: Bot[]; edges: number[][] };\n\nexport const newWorld = (): World => ({ bots: [], edges: [] });\n\nexport const setBots = (bots: Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nexport const initEdges = (world: World): World => {\n    const list = [...Array(world.bots.length)].map(() => 1);\n    const array = list.map((_, i) => list.map((_, j) => (i === j ? 0 : 1)));\n    world.edges = array;\n    return world;\n};\n\nconst slack = 1.5;\n\nconst edgeStrength = (d: number): number => 1 / (1 + Math.exp(4 * (d - slack)));\n\nexport const stiffness = (d: Vector3): Matrix3 => outerProduct(d, d).multiplyScalar(-1 / d.dot(d));\n\nexport const stiffnessDerivative = (edgeStrengthFun: (d: number) => number) => (dim: number) => (\n    d: Vector3\n): Matrix3 => {\n    const epsilon = 0.00001;\n    const e = new Vector3();\n    e.setComponent(dim, epsilon);\n    const plus = stiffness(d.clone().add(e)).multiplyScalar(edgeStrengthFun(d.clone().add(e).length()));\n    const minus = stiffness(d.clone().sub(e)).multiplyScalar(edgeStrengthFun(d.clone().sub(e).length()));\n    return subMatrix3(plus, minus).multiplyScalar(1 / (2 * epsilon));\n};\n\nexport const stiffnessPair = (a: Bot, b: Bot, edge: number): Matrix3 =>\n    stiffness(b.pos.clone().sub(a.pos)).multiplyScalar(edge);\n\nexport const stiffnessPairDerivative = (edgeStrengthFun: (d: number) => number) => (bot: Bot) => (dim: number) => (\n    a: Bot,\n    b: Bot\n): Matrix3 => {\n    if (a !== bot && b !== bot) return new Matrix3().set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n    const derivative = stiffnessDerivative(edgeStrengthFun)(dim)(b.pos.clone().sub(a.pos));\n    if (a === bot) return derivative.multiplyScalar(-1);\n    return derivative;\n};\n\nexport const removeFixedFromVector = (world: World) => (vector: Vector3[]): Vector3[] =>\n    vector.map((v, i) => (world.bots[i].fixed ? new Vector3(0, 0, 0) : v));\n\nexport const removeFixedFromMatrix = (world: World) => (mat: Matrix3[][]): Matrix3[][] =>\n    mat.map((vector, i) =>\n        vector.map((v, j) => (world.bots[i].fixed || world.bots[j].fixed ? new Matrix3().multiplyScalar(0) : v))\n    );\n\nexport const stiffnessMatrix = (world: World): Matrix3[][] => {\n    const result = world.edges.map(() => world.edges.map(() => new Matrix3().multiplyScalar(0)));\n    result.forEach((row, i) => {\n        row.forEach((edge, j) => {\n            if (i === j) return;\n            const s = stiffnessPair(world.bots[i], world.bots[j], world.edges[i][j]);\n            result[i][i] = subMatrix3(result[i][i], s);\n            result[i][j] = addMatrix3(result[i][j], s);\n        });\n    });\n    return removeFixedFromMatrix(world)(result);\n};\n\nexport const stiffnessMatrixDerivative = (edgeStrengthFun: (d: number) => number) => (i: number) => (dim: number) => (\n    world: World\n): Matrix3[][] => {\n    const result = world.edges.map(() => world.edges.map(() => new Matrix3().multiplyScalar(0)));\n    const bot = world.bots[i];\n    world.bots.forEach((b, j) => {\n        if (i === j) return;\n        const s = stiffnessPairDerivative(edgeStrengthFun)(bot)(dim)(world.bots[i], world.bots[j]);\n        result[i][i] = subMatrix3(result[i][i], s);\n        result[j][j] = subMatrix3(result[j][j], s);\n        result[i][j] = addMatrix3(result[i][j], s);\n        result[j][i] = addMatrix3(result[j][i], s);\n    });\n    return removeFixedFromMatrix(world)(result);\n};\n\nexport const forceMatrix = (world: World): Vector3[] =>\n    removeFixedFromVector(world)(world.bots.map(bot => new Vector3(0, -bot.weight, 0)));\n\nexport const displacement = (world: World): number[] => {\n    const f = numberArrayFromVector3Array(forceMatrix(world));\n    const k = numberArrayFromMatrix3Array(stiffnessMatrix(world));\n    return ldiv(k, f);\n};\n\nexport const compliance = (world: World): number => {\n    const f = numberArrayFromVector3Array(forceMatrix(world));\n    const u = displacement(world);\n    return dot(f, u);\n};\n\nexport const objective = (world: World): number => compliance(world);\n\nexport const resolveCollisionStep = (world: World): World => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (world.bots[i].fixed && world.bots[j].fixed) continue;\n            const oneFixed = world.bots[i].fixed || world.bots[j].fixed;\n            const d = world.bots[j].pos.clone().sub(world.bots[i].pos);\n            const dist = d.length();\n            if (dist > 1) continue;\n            const n = d.multiplyScalar((1 - dist) / (oneFixed ? 1 : 2) / dist);\n            if (!world.bots[i].fixed) world.bots[i].pos = world.bots[i].pos.clone().sub(n);\n            if (!world.bots[j].fixed) world.bots[j].pos = world.bots[j].pos.clone().add(n);\n        }\n    }\n    return world;\n};\n\nexport const resolveCollision = (world: World): World => {\n    let result = world;\n    for (let i = 0; i < 10; ++i) result = resolveCollisionStep(result);\n    return result;\n};\n\nconst updateEdges = (world: World) => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = 0; j < world.bots.length; ++j) {\n            if (i === j) continue;\n            const d = world.bots[j].pos.clone().sub(world.bots[i].pos).length();\n            world.edges[i][j] = edgeStrength(d);\n        }\n    }\n};\n\nexport const optimizeStepNumericalBotDim = (stepSize: number) => (world: World) => (bot: Bot) => (\n    dim: number\n): World => {\n    const epsilon = 0.001;\n    const val = bot.pos.getComponent(dim);\n    bot.pos.setComponent(dim, val + epsilon);\n    updateEdges(world);\n    const plus = compliance(world);\n    bot.pos.setComponent(dim, val - epsilon);\n    updateEdges(world);\n    const minus = compliance(world);\n    bot.pos.setComponent(dim, val);\n    let move = -(plus - minus) * stepSize;\n    const maxMove = 0.5;\n    if (Math.abs(move) > maxMove) move = maxMove * Math.sign(move);\n    bot.pos.setComponent(dim, val + move);\n    updateEdges(world);\n    return world;\n};\n\nexport const optimizeStepNumericalBot = (stepSize: number) => (world: World) => (bot: Bot): World => {\n    if (bot.fixed) return world;\n    const fun = optimizeStepNumericalBotDim(stepSize)(world)(bot);\n    [0, 1, 2].map(dim => fun(dim));\n    return world;\n};\n\nexport const gradient = (edgeStrengthFun: (d: number) => number) => (world: World): Vector3[] => {\n    const u = displacement(world);\n    const result = [...Array(world.bots.length)];\n    for (let i = 0; i < world.bots.length; ++i) {\n        result[i] = new Vector3();\n        for (let dim = 0; dim < 3; ++dim) {\n            const res = world.bots.map(() => new Vector3(0, 0, 0));\n            const bot = world.bots[i];\n            for (let j = 0; j < world.bots.length; ++j) {\n                if (i === j) continue;\n                const s = stiffnessPairDerivative(edgeStrengthFun)(bot)(dim)(world.bots[i], world.bots[j]);\n                const si = new Vector3(...u.slice(3 * i, 3 * (i + 1))).applyMatrix3(s);\n                const sj = new Vector3(...u.slice(3 * j, 3 * (j + 1))).applyMatrix3(s);\n                res[i].sub(si);\n                res[j].sub(sj);\n                res[i].add(sj);\n                res[j].add(si);\n            }\n            const dku = numberArrayFromVector3Array(removeFixedFromVector(world)(res));\n            result[i].setComponent(dim, -dot(u, dku));\n        }\n    }\n    return result;\n};\n\nexport const optimizeStepNumerical = (stepSize: number) => (world: World): World => {\n    updateEdges(world);\n    const g = gradient(edgeStrength)(world).map(v => v.multiplyScalar(-stepSize / (1 + v.length())));\n    world.bots.map((bot, i) => {\n        if (bot.fixed) return;\n        bot.pos.add(g[i]);\n    });\n    return resolveCollision(world);\n};\n","import * as linear from \"linear-solve\";\n\nexport const ldiv = (A: number[][], b: number[]): number[] => linear.solve(A, b);\n","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D\n} from \"three\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const newSphere = (pos: Vector3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.position.set(...(pos.toArray() as [number, number, number]));\n    mesh.scale.set(0.5, 0.5, 0.5);\n    return mesh;\n};\n\nexport const updateCylinder = (from: Vector3, to: Vector3, radius: number) => (cylinder: Mesh): Mesh => {\n    const direction = new Vector3().subVectors(to, from);\n    const orientation = new Matrix4();\n    orientation.lookAt(from, to, new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    cylinder.setRotationFromMatrix(orientation);\n    cylinder.scale.set(radius, direction.length(), radius);\n    cylinder.position.set(...from.clone().add(to).divideScalar(2).toArray());\n    return cylinder;\n};\n\nexport const newCylinder = (from: Vector3, to: Vector3, radius: number, color: Color): Mesh => {\n    const edgeGeometry = new CylinderGeometry(1, 1, 1, 8, 1);\n    const cylinder = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    return updateCylinder(from, to, radius)(cylinder);\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Vector3, PerspectiveCamera, WebGLRenderer, Color } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { pipe } from \"ts-pipe-compose\";\nimport Prando from \"prando\";\nconst rng = new Prando(123);\nimport { Bot, World } from \"./core\";\nimport { newScene, newSphere, newCylinder, updateCylinder } from \"./draw\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst randomBot = () => Bot.setPos(new Vector3(...[rng.next(), rng.next(), rng.next()].map(x => x * 10)))(Bot.newBot());\n\nconst bot1 = Bot.setFixed(true)(Bot.newBot());\nconst bot2 = Bot.setFixed(true)(Bot.setPos(new Vector3(3, 0, 0))(Bot.newBot()));\nconst bot3 = Bot.setFixed(true)(Bot.setPos(new Vector3(0, 0, 2))(Bot.newBot()));\nconst bots = [bot1, bot2, bot3, ...[...Array(97)].map(randomBot)];\nlet world = pipe(World.newWorld(), World.setBots(bots), World.initEdges);\n\nconst botMeshes = bots.map(bot => newSphere(bot.pos, bot.fixed ? new Color(0, 0, 1) : new Color(0, 1, 0)));\nconst edgeMeshes = bots.map(a => bots.map(b => newCylinder(a.pos, b.pos, 1, new Color(1, 0, 0))));\nconst scene = newScene();\nbotMeshes.map(mesh => scene.add(mesh));\nedgeMeshes.map((row, i) =>\n    row.map((mesh, j) => {\n        if (i >= j) return;\n        scene.add(mesh);\n    })\n);\n\nconst updateWorld = () => {\n    world = World.optimizeStepNumerical(0.5)(world);\n    world.bots.map((bot, i) => {\n        botMeshes[i].position.set(...bot.pos.toArray());\n    });\n    world.bots.map((from, i) =>\n        world.bots.map((to, j) => {\n            if (i >= j) return;\n            scene.remove(edgeMeshes[i][j]);\n            if (world.edges[i][j] < 0.01) return;\n            scene.add(edgeMeshes[i][j]);\n            updateCylinder(from.pos, to.pos, Math.sqrt(world.edges[i][j]) * 0.3)(edgeMeshes[i][j]);\n        })\n    );\n};\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n    const [iterations, setIterations] = useState(0);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && camera) renderer.render(scene, camera);\n    }, [controls, renderer, camera, frame]);\n\n    useEffect(() => {\n        if (iterations >= 50) return;\n        const t = setTimeout(() => {\n            updateWorld();\n            setIterations(iterations + 1);\n        }, 10);\n        return () => clearTimeout(t);\n    }, [iterations]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Microbots</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <b>iterations: </b>\n                                        {iterations}\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}