{"version":3,"sources":["core/Bot.ts","core/utils.ts","core/World.ts","App.tsx","draw.ts","index.tsx"],"names":["newBot","pos","Vector3","weight","fixed","setPos","bot","setWeight","setFixed","outerProduct","a","b","Matrix3","set","x","y","z","addMatrix3","result","elements","map","e","i","zeros","height","width","Array","numberArrayFromVector3Array","vec","length","k","getComponent","numberArrayFromMatrix3Array","mat","row","element","j","l","newWorld","bots","edges","setBots","world","initEdges","list","array","_","stiffness","d","multiplyScalar","dot","stiffnessDerivative","dim","setComponent","de","clone","transpose","stiffnessPair","edge","sub","stiffnessPairDerivative","derivative","removeFixedFromVector","vector","filter","removeFixedFromMatrix","assembleMatrix","fun","forEach","s","subMatrix3","stiffnessMatrix","stiffnessMatrixDerivativeBot","stiffnessMatrixDerivativeEdge","w","update","$set","forceMatrix","inverse","res","numberArrayToMatrix3Array","inv","matrix","toArray","compliance","f","ft","kInv","multiply","mult","complianceDerivative","func","dk","pipe","complianceDerivativeBot","complianceDerivativeEdge","distancePenalty","distancePenaltyDerivative","distancePenaltyPair","distancePenaltyPairDerivative","distancePenaltyTotal","sum","distancePenaltyTotalDerivativeBot","distancePenaltyTotalDerivativeEdge","objective","objectiveDerivativeBot","objectiveDerivativeEdge","optimizeStepBots","stepSize","newBots","move","moveDist","optimizeStepEdges","newEdges","Math","max","min","resolveCollisionStep","oneFixed","dist","n","add","resolveCollision","optimizeStep","qwe","optimizeStepNumericalBotDim","val","exp","plus","minus","abs","sign","optimizeStepNumericalBot","optimizeStepNumerical","console","log","optimize","rng","Prando","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","randomBot","Bot","next","World","App","useWindowSize","windowWidth","windowHeight","classes","mount","useRef","useState","controls","setControls","scene","setScene","camera","setCamera","renderer","setRenderer","frame","setFrame","iterations","setIterations","useEffect","mc","current","cam","PerspectiveCamera","position","lookAt","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","t","window","setInterval","clearInterval","removeChild","render","setTimeout","scn","color","Color","Matrix4","setPosition","scale","geom","SphereGeometry","applyMatrix4","computeVertexNormals","faces","face","vertexColors","fill","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","Mesh","MeshPhongMaterial","geometry","matrixAutoUpdate","updateMatrix","reduce","fn","Scene","AmbientLight","light","DirectionalLight","newScene","from","to","radius","direction","subVectors","orientation","Object3D","up","edgeGeometry","CylinderGeometry","addCylinder","sqrt","clearTimeout","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","className","Paper","List","ListItem","ref","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.564d5711.chunk.js","sourcesContent":["import { Vector3 } from \"three\";\n\nexport type Bot = {\n    pos: Vector3;\n    weight: number;\n    fixed: boolean;\n};\n\nexport const newBot = (): Bot => ({\n    pos: new Vector3(0, 0, 0),\n    weight: 1,\n    fixed: false\n});\n\nexport const setPos = (pos: Vector3) => (bot: Bot): Bot => {\n    bot.pos = pos;\n    return bot;\n};\n\nexport const setWeight = (weight: number) => (bot: Bot): Bot => {\n    bot.weight = weight;\n    return bot;\n};\n\nexport const setFixed = (fixed: boolean) => (bot: Bot): Bot => {\n    bot.fixed = fixed;\n    return bot;\n};\n","import { Vector3, Matrix3 } from \"three\";\n\nexport const outerProduct = (a: Vector3, b: Vector3): Matrix3 =>\n    new Matrix3().set(\n        a.x * b.x,\n        a.x * b.y,\n        a.x * b.z,\n        a.y * b.x,\n        a.y * b.y,\n        a.y * b.z,\n        a.z * b.x,\n        a.z * b.y,\n        a.z * b.z\n    );\n\nexport const addMatrix3 = (a: Matrix3, b: Matrix3): Matrix3 => {\n    const result = new Matrix3();\n    result.elements = a.elements.map((e, i) => e + b.elements[i]);\n    return result;\n};\n\nexport const subMatrix3 = (a: Matrix3, b: Matrix3): Matrix3 => {\n    const result = new Matrix3();\n    result.elements = a.elements.map((e, i) => e - b.elements[i]);\n    return result;\n};\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n\nexport const numberArrayFromVector3Array = (vec: Vector3[]): number[] => {\n    const result = [...Array(3 * vec.length)].map(() => 0);\n    vec.map((e, i) => {\n        for (let k = 0; k < 3; ++k) {\n            result[3 * i + k] = e.getComponent(k);\n        }\n    });\n    return result;\n};\n\nexport const numberArrayToVector3Array = (vec: number[]): Vector3[] =>\n    [...Array(vec.length / 3)]\n        .map(() => new Vector3())\n        .map((e, i) => {\n            for (let k = 0; k < 3; ++k) {\n                e.setComponent(k, vec[3 * i + k]);\n            }\n            return e;\n        });\n\nexport const numberArrayFromMatrix3Array = (mat: Matrix3[][]): number[][] => {\n    const result = zeros(3 * mat.length, 3 * mat[0]?.length || 0);\n    mat.map((row, i) =>\n        row.map((element, j) => {\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k][3 * j + l] = mat[i][j].elements[k + 3 * l];\n                }\n            }\n        })\n    );\n    return result;\n};\n\nexport const numberArrayToMatrix3Array = (mat: number[][]): Matrix3[][] =>\n    zeros(mat.length / 3, (mat[0]?.length || 0) / 3).map((row, i) =>\n        row.map((element, j) => {\n            const res = new Matrix3();\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    res.elements[k + 3 * l] = mat[3 * i + k][3 * j + l];\n                }\n            }\n            return res;\n        })\n    );\n","import update from \"immutability-helper\";\nimport { pipe } from \"ts-pipe-compose\";\nimport { matrix, Matrix, transpose, multiply, inv } from \"mathjs\";\nimport { Vector3, Matrix3 } from \"three\";\nimport {\n    outerProduct,\n    addMatrix3,\n    subMatrix3,\n    numberArrayFromVector3Array,\n    numberArrayFromMatrix3Array,\n    numberArrayToMatrix3Array\n} from \"./utils\";\nimport { Bot, setPos } from \"./Bot\";\n\nexport type World = { bots: Bot[]; edges: number[][] };\n\nexport const newWorld = (): World => ({ bots: [], edges: [] });\n\nexport const setBots = (bots: Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nexport const initEdges = (world: World): World => {\n    const list = [...Array(world.bots.length)].map(() => 1);\n    const array = list.map((_, i) => list.map((_, j) => (i === j ? 0 : 1)));\n    world.edges = array;\n    return world;\n};\n\nexport const stiffness = (d: Vector3): Matrix3 => outerProduct(d, d).multiplyScalar(-1 / d.dot(d));\n\nexport const stiffnessDerivative = (dim: number) => (d: Vector3): Matrix3 => {\n    const e = new Vector3(0, 0, 0).setComponent(dim, 1);\n    const de = outerProduct(e, d);\n    const k = stiffness(d);\n    return addMatrix3(addMatrix3(de, de.clone().transpose()), k.multiplyScalar(2 * d.getComponent(dim))).multiplyScalar(\n        -1 / d.dot(d)\n    );\n};\n\nexport const stiffnessPair = (a: Bot, b: Bot, edge: number): Matrix3 =>\n    stiffness(b.pos.clone().sub(a.pos)).multiplyScalar(edge);\n\nexport const stiffnessPairDerivative = (bot: Bot) => (dim: number) => (a: Bot, b: Bot, edge: number): Matrix3 => {\n    if (a !== bot && b !== bot) return new Matrix3().set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n    const derivative = stiffnessDerivative(dim)(b.pos.clone().sub(a.pos)).multiplyScalar(edge);\n    if (a === bot) return derivative.multiplyScalar(-1);\n    return derivative;\n};\n\nexport const removeFixedFromVector = (world: World) => (vector: Vector3[]): Vector3[] =>\n    vector.filter((_, i) => !world.bots[i].fixed);\n\nexport const removeFixedFromMatrix = (world: World) => (mat: Matrix3[][]): Matrix3[][] =>\n    mat.filter((_, i) => !world.bots[i].fixed).map(vector => vector.filter((_, j) => !world.bots[j].fixed));\n\nexport const assembleMatrix = (world: World, fun: (a: Bot, b: Bot, edge: number) => Matrix3): Matrix3[][] => {\n    const result = world.edges.map(() => world.edges.map(() => new Matrix3().multiplyScalar(0)));\n    result.forEach((row, i) => {\n        row.forEach((edge, j) => {\n            if (i === j) return;\n            const s = fun(world.bots[i], world.bots[j], world.edges[i][j]);\n            result[i][i] = subMatrix3(result[i][i], s);\n            result[i][j] = addMatrix3(result[i][j], s);\n        });\n    });\n    return removeFixedFromMatrix(world)(result);\n};\n\nexport const stiffnessMatrix = (world: World): Matrix3[][] => assembleMatrix(world, stiffnessPair);\n\nexport const stiffnessMatrixDerivativeBot = (bot: Bot) => (dim: number) => (world: World): Matrix3[][] =>\n    assembleMatrix(world, stiffnessPairDerivative(bot)(dim));\n\nexport const stiffnessMatrixDerivativeEdge = (i: number, j: number) => (world: World): Matrix3[][] => {\n    const list = [...Array(world.bots.length)].map(() => 0);\n    const edges = list.map(() => list);\n    edges[i][j] = edges[j][i] = 1;\n    const w = update(world, {\n        edges: { $set: edges }\n    });\n    return stiffnessMatrix(w);\n};\n\nexport const forceMatrix = (world: World): Vector3[] =>\n    removeFixedFromVector(world)(world.bots.map(bot => new Vector3(0, -bot.weight, 0)));\n\nexport const inverse = (mat: Matrix3[][]): Matrix3[][] =>\n    numberArrayToMatrix3Array(inv(matrix(numberArrayFromMatrix3Array(mat))).toArray() as number[][]);\n\nexport const compliance = (world: World): number => {\n    const f = matrix(numberArrayFromVector3Array(forceMatrix(world)));\n    const k = matrix(numberArrayFromMatrix3Array(stiffnessMatrix(world)));\n    const ft = transpose(f);\n    const kInv = inv(k);\n    return (multiply(multiply(ft, kInv), f) as unknown) as number;\n};\n\nconst mult = (b: Matrix) => (a: Matrix) => multiply(a, b);\n\nexport const complianceDerivative = (func: (world: World) => Matrix3[][]) => (world: World): number => {\n    const f = matrix(numberArrayFromVector3Array(forceMatrix(world)));\n    const dk = matrix(numberArrayFromMatrix3Array(func(world)));\n    const k = matrix(numberArrayFromMatrix3Array(stiffnessMatrix(world)));\n    const ft = transpose(f);\n    const kInv = inv(k);\n    return -((pipe(ft, mult(kInv), mult(dk), mult(kInv), mult(f)) as unknown) as number);\n};\n\nexport const complianceDerivativeBot = (bot: Bot) => (dim: number) => (world: World): number =>\n    complianceDerivative(stiffnessMatrixDerivativeBot(bot)(dim))(world);\n\nexport const complianceDerivativeEdge = (i: number, j: number) => (world: World): number =>\n    complianceDerivative(stiffnessMatrixDerivativeEdge(i, j))(world);\n\nexport const distancePenalty = (d: Vector3): number => (d.dot(d) - 1) ** 2;\n\nexport const distancePenaltyDerivative = (dim: number) => (d: Vector3): number =>\n    4 * ((d.dot(d) - 1) * d.getComponent(dim));\n\nexport const distancePenaltyPair = (a: Bot, b: Bot, edge: number): number =>\n    distancePenalty(b.pos.clone().sub(a.pos)) * edge;\n\nexport const distancePenaltyPairDerivative = (dim: number) => (a: Bot, b: Bot, edge: number): number =>\n    distancePenaltyDerivative(dim)(b.pos.clone().sub(a.pos)) * edge;\n\nexport const distancePenaltyTotal = (world: World): number => {\n    let sum = 0;\n    world.edges.forEach((row, i) => {\n        row.forEach((edge, j) => {\n            if (i >= j) return;\n            sum += distancePenaltyPair(world.bots[i], world.bots[j], edge);\n        });\n    });\n    return sum;\n};\n\nexport const distancePenaltyTotalDerivativeBot = (bot: Bot) => (dim: number) => (world: World): number => {\n    let sum = 0;\n    world.edges.forEach((row, i) => {\n        row.forEach((edge, j) => {\n            if (world.bots[j] !== bot) return;\n            sum += distancePenaltyPairDerivative(dim)(world.bots[i], world.bots[j], edge);\n        });\n    });\n    return sum;\n};\n\nexport const distancePenaltyTotalDerivativeEdge = (i: number, j: number) => (world: World): number =>\n    distancePenaltyPair(world.bots[i], world.bots[j], 1);\n\nexport const objective = (world: World): number => compliance(world) + distancePenaltyTotal(world);\n\nexport const objectiveDerivativeBot = (w: number) => (bot: Bot) => (dim: number) => (world: World): number =>\n    complianceDerivativeBot(bot)(dim)(world) * (1 - w) + distancePenaltyTotalDerivativeBot(bot)(dim)(world) * w;\n\nexport const objectiveDerivativeEdge = (w: number) => (i: number, j: number) => (world: World): number =>\n    complianceDerivativeEdge(i, j)(world) * (1 - w) + distancePenaltyTotalDerivativeEdge(i, j)(world) * w;\n\nexport const optimizeStepBots = (stepSize: number) => (w: number) => (world: World): World => {\n    const maxDist = 0.3;\n    const newBots = world.bots.map(bot => {\n        if (bot.fixed) return bot;\n        const d = new Vector3();\n        [0, 1, 2].map(dim => d.setComponent(dim, objectiveDerivativeBot(w)(bot)(dim)(world)));\n        let move = d.multiplyScalar(stepSize);\n        const moveDist = move.length();\n        if (moveDist > maxDist) move = move.multiplyScalar(maxDist / moveDist);\n        return setPos(bot.pos.clone().sub(move))(bot);\n    });\n    return setBots(newBots)(world);\n};\n\nexport const optimizeStepEdges = (stepSize: number) => (w: number) => (world: World): World => {\n    const newEdges = world.edges;\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = 0; j < world.bots.length; ++j) {\n            if (i === j) continue;\n            const d = objectiveDerivativeEdge(w)(i, j)(world);\n            newEdges[i][j] = world.edges[i][j] - d * stepSize;\n            newEdges[i][j] = Math.max(newEdges[i][j], 0.001);\n            newEdges[i][j] = Math.min(newEdges[i][j], 1);\n        }\n    }\n    return update(world, {\n        edges: { $set: newEdges }\n    });\n};\n\nexport const resolveCollisionStep = (world: World): World => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (world.bots[i].fixed && world.bots[j].fixed) continue;\n            const oneFixed = world.bots[i].fixed || world.bots[j].fixed;\n            const d = world.bots[j].pos.clone().sub(world.bots[i].pos);\n            const dist = d.length();\n            if (dist > 1) continue;\n            const n = d.multiplyScalar((1 - dist) / (oneFixed ? 1 : 2) / dist);\n            if (!world.bots[i].fixed) world.bots[i].pos = world.bots[i].pos.clone().sub(n);\n            if (!world.bots[j].fixed) world.bots[j].pos = world.bots[j].pos.clone().add(n);\n        }\n    }\n    return world;\n};\n\nexport const resolveCollision = (world: World): World => {\n    let result = world;\n    for (let i = 0; i < 10; ++i) result = resolveCollisionStep(result);\n    return result;\n};\n\nexport const optimizeStep = (stepSize: number) => (w: number) => (world: World): World => {\n    return pipe(world, optimizeStepBots(stepSize)(w), optimizeStepEdges(stepSize)(w), resolveCollision);\n};\n\nlet qwe = 5;\nexport const optimizeStepNumericalBotDim = (stepSize: number) => (world: World) => (bot: Bot) => (\n    dim: number\n): World => {\n    const epsilon = 0.001;\n    const val = bot.pos.getComponent(dim);\n    bot.pos.setComponent(dim, val + epsilon);\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = 0; j < world.bots.length; ++j) {\n            if (i === j) continue;\n            const d = world.bots[j].pos.clone().sub(world.bots[i].pos).length();\n            world.edges[i][j] = 1 / (1 + Math.exp(4 * (d - qwe))) + 0.001;\n        }\n    }\n    const plus = compliance(world);\n    bot.pos.setComponent(dim, val - epsilon);\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = 0; j < world.bots.length; ++j) {\n            if (i === j) continue;\n            const d = world.bots[j].pos.clone().sub(world.bots[i].pos).length();\n            world.edges[i][j] = 1 / (1 + Math.exp(4 * (d - qwe))) + 0.001;\n        }\n    }\n    const minus = compliance(world);\n    bot.pos.setComponent(dim, val);\n    let move = -(plus - minus) * stepSize;\n    const maxMove = 0.5;\n    if (Math.abs(move) > maxMove) move = maxMove * Math.sign(move);\n    bot.pos.setComponent(dim, val + move);\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = 0; j < world.bots.length; ++j) {\n            if (i === j) continue;\n            const d = world.bots[j].pos.clone().sub(world.bots[i].pos).length();\n            world.edges[i][j] = 1 / (1 + Math.exp(4 * (d - qwe))) + 0.001;\n        }\n    }\n    return world;\n};\n\nexport const optimizeStepNumericalBot = (stepSize: number) => (world: World) => (bot: Bot): World => {\n    if (bot.fixed) return world;\n    const fun = optimizeStepNumericalBotDim(stepSize)(world)(bot);\n    [0, 1, 2].map(dim => fun(dim));\n    return world;\n};\n\nexport const optimizeStepNumerical = (stepSize: number) => (world: World): World => {\n    qwe = 1 + (qwe - 1) * 0.99;\n    console.log(qwe);\n    const fun = optimizeStepNumericalBot(stepSize)(world);\n    world.bots.map(bot => fun(bot));\n    return resolveCollision(world);\n};\n\nexport const optimize = (world: World): World => {\n    let result = world;\n    for (let i = 0; i < 100; ++i) {\n        result = optimizeStep(0.01)(0.5)(result);\n        console.log(result.bots[3].pos.toArray());\n        console.log(result.edges);\n    }\n    return result;\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Vector3, PerspectiveCamera, WebGLRenderer, Scene, Color } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { pipe } from \"ts-pipe-compose\";\nimport Prando from \"prando\";\nconst rng = new Prando(123);\nimport { Bot, World } from \"./core\";\nimport { newScene, addSphere, addCylinder } from \"./draw\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst randomBot = () => Bot.setPos(new Vector3(...[rng.next(), rng.next(), rng.next()].map(x => x * 10)))(Bot.newBot());\n\nconst bot1 = Bot.setFixed(true)(Bot.newBot());\nconst bot2 = Bot.setFixed(true)(Bot.setPos(new Vector3(3, 0, 0))(Bot.newBot()));\nconst bot3 = Bot.setFixed(true)(Bot.setPos(new Vector3(0, 0, 2))(Bot.newBot()));\nconst bots = [\n    bot1,\n    bot2,\n    bot3,\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot()\n];\nlet world = pipe(World.newWorld(), World.setBots(bots), World.initEdges);\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [scene, setScene] = useState<Scene>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n    const [iterations, setIterations] = useState(0);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && scene && camera) renderer.render(scene, camera);\n    }, [controls, renderer, scene, camera, frame]);\n\n    useEffect(() => {\n        if (iterations >= 300) return;\n        const t = setTimeout(() => {\n            setIterations(iterations + 1);\n            if (iterations % 4 === 0) {\n                let scn = world.bots\n                    .map(bot => addSphere(bot.pos, bot.fixed ? new Color(0, 0, 1) : new Color(0, 1, 0)))\n                    .reduce((x, fn) => fn(x), newScene());\n                world.bots.map((from, i) =>\n                    world.bots.map((to, j) => {\n                        if (i >= j) return;\n                        scn = addCylinder(\n                            from.pos,\n                            to.pos,\n                            Math.sqrt(world.edges[i][j]) * 0.3,\n                            new Color(1, 0, 0)\n                        )(scn);\n                    })\n                );\n                setScene(scn);\n            }\n            world = World.optimizeStepNumerical(1)(world);\n        }, 10);\n        return () => clearTimeout(t);\n    }, [controls, renderer, scene, camera, iterations]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Microbots</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <b>iterations: </b>\n                                        {iterations}\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D\n} from \"three\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const addSphere = (pos: Vector3, color: Color) => (scene: Scene): Scene => {\n    const mat = new Matrix4().setPosition(pos).scale(new Vector3(0.5, 0.5, 0.5));\n    const geom = new SphereGeometry(1, 16, 16).applyMatrix4(mat);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.matrixAutoUpdate = false;\n    mesh.matrix = mat;\n    mesh.updateMatrix();\n    scene.add(mesh);\n    return scene;\n};\n\nexport const addCylinder = (from: Vector3, to: Vector3, radius: number, color: Color) => (scene: Scene): Scene => {\n    const direction = new Vector3().subVectors(to, from);\n    const orientation = new Matrix4();\n    orientation.lookAt(from, to, new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    const edgeGeometry = new CylinderGeometry(radius, radius, direction.length(), 8, 1);\n    const edge = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    edge.applyMatrix4(orientation);\n    edge.position.x = (to.x + from.x) / 2;\n    edge.position.y = (to.y + from.y) / 2;\n    edge.position.z = (to.z + from.z) / 2;\n    scene.add(edge);\n    return scene;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}