{"version":3,"sources":["core/Bot.ts","core/utils.ts","core/World.ts","core/matrix.ts","draw.ts","App.tsx","index.tsx"],"names":["newBot","pos","Vector3","weight","fixed","setPos","bot","setWeight","setFixed","throwError","Error","dot","a","b","length","result","i","addMatrix3","Matrix3","elements","map","e","subMatrix3","zeros","height","width","Array","numberArrayFromVector3Array","vec","k","getComponent","newWorld","bots","setBots","world","power","edgeStrength","d","Math","exp","stiffness","set","x","y","z","multiplyScalar","stiffnessDerivative","dim","epsilon","val","dPlus","clone","setComponent","dMinus","plus","minus","stiffnessPair","sub","stiffnessPairDerivative","derivative","removeFixedFromVector","vector","v","removeFixedFromMatrix","mat","j","stiffnessMatrix","s","forceMatrix","displacement","A","f","row","element","l","numberArrayFromMatrix3Array","linear","compliance","u","objective","resolveCollisionStep","max","oneFixed","dist","n","add","resolveCollision","gradient","res","si","slice","applyMatrix3","ss","dku","optimizeStepNumerical","stepSize","console","log","g","updateCylinder","from","to","radius","cylinder","direction","subVectors","orientation","Matrix4","lookAt","Object3D","up","multiply","setRotationFromMatrix","scale","position","divideScalar","toArray","rng","Prando","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","Bot","next","pipe","World","botMeshes","color","geom","SphereGeometry","computeVertexNormals","faces","forEach","face","vertexColors","fill","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","Mesh","MeshPhongMaterial","geometry","newSphere","Color","edgeMeshes","edgeGeometry","CylinderGeometry","newCylinder","scene","Scene","AmbientLight","light","DirectionalLight","newScene","App","useWindowSize","windowWidth","windowHeight","classes","mount","useRef","useState","controls","setControls","camera","setCamera","renderer","setRenderer","frame","setFrame","iterations","setIterations","useEffect","mc","current","cam","PerspectiveCamera","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","t","window","setInterval","clearInterval","removeChild","update","render","setTimeout","remove","strength","sqrt","clearTimeout","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","className","Paper","List","ListItem","ref","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.339a3fc1.chunk.js","sourcesContent":["import { Vector3 } from \"three\";\n\nexport type Bot = {\n    pos: Vector3;\n    weight: number;\n    fixed: boolean;\n};\n\nexport const newBot = (): Bot => ({\n    pos: new Vector3(0, 0, 0),\n    weight: 1,\n    fixed: false\n});\n\nexport const setPos = (pos: Vector3) => (bot: Bot): Bot => {\n    bot.pos = pos;\n    return bot;\n};\n\nexport const setWeight = (weight: number) => (bot: Bot): Bot => {\n    bot.weight = weight;\n    return bot;\n};\n\nexport const setFixed = (fixed: boolean) => (bot: Bot): Bot => {\n    bot.fixed = fixed;\n    return bot;\n};\n","import { Vector3, Matrix3 } from \"three\";\n\nconst throwError = () => {\n    throw new Error(\"Vectors need to be the same length\");\n};\n\nexport const dot = (a: number[], b: number[]): number => {\n    if (a.length !== b.length) throwError();\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) result += a[i] * b[i];\n    return result;\n};\n\nexport const applyMatrix = (A: number[][], b: number[]): number[] => {\n    if (A[0].length !== b.length) throwError();\n    return [...Array(A.length)].map((_, i) => dot(A[i], b));\n};\n\nexport const outerProduct = (a: Vector3, b: Vector3): Matrix3 => {\n    if (a.length !== b.length) throwError();\n    return new Matrix3().set(\n        a.x * b.x,\n        a.x * b.y,\n        a.x * b.z,\n        a.y * b.x,\n        a.y * b.y,\n        a.y * b.z,\n        a.z * b.x,\n        a.z * b.y,\n        a.z * b.z\n    );\n};\n\nexport const addMatrix3 = (a: Matrix3, b: Matrix3): Matrix3 => {\n    const result = new Matrix3();\n    result.elements = a.elements.map((e, i) => e + b.elements[i]);\n    return result;\n};\n\nexport const subMatrix3 = (a: Matrix3, b: Matrix3): Matrix3 => {\n    const result = new Matrix3();\n    result.elements = a.elements.map((e, i) => e - b.elements[i]);\n    return result;\n};\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n\nexport const numberArrayFromVector3Array = (vec: Vector3[]): number[] => {\n    const result = [...Array(3 * vec.length)].map(() => 0);\n    vec.map((e, i) => {\n        for (let k = 0; k < 3; ++k) {\n            result[3 * i + k] = e.getComponent(k);\n        }\n    });\n    return result;\n};\n\nexport const numberArrayToVector3Array = (vec: number[]): Vector3[] =>\n    [...Array(vec.length / 3)]\n        .map(() => new Vector3())\n        .map((e, i) => {\n            for (let k = 0; k < 3; ++k) {\n                e.setComponent(k, vec[3 * i + k]);\n            }\n            return e;\n        });\n\nexport const numberArrayFromMatrix3Array = (mat: Matrix3[][]): number[][] => {\n    const result = zeros(3 * mat.length, 3 * mat[0]?.length || 0);\n    mat.map((row, i) =>\n        row.map((element, j) => {\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k][3 * j + l] = mat[i][j].elements[k + 3 * l];\n                }\n            }\n        })\n    );\n    return result;\n};\n\nexport const numberArrayToMatrix3Array = (mat: number[][]): Matrix3[][] =>\n    zeros(mat.length / 3, (mat[0]?.length || 0) / 3).map((row, i) =>\n        row.map((element, j) => {\n            const res = new Matrix3();\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    res.elements[k + 3 * l] = mat[3 * i + k][3 * j + l];\n                }\n            }\n            return res;\n        })\n    );\n","import { Vector3, Matrix3 } from \"three\";\nimport {\n    dot,\n    outerProduct,\n    addMatrix3,\n    subMatrix3,\n    numberArrayFromVector3Array,\n    numberArrayFromMatrix3Array\n} from \"./utils\";\nimport { ldiv } from \"./matrix\";\nimport { Bot } from \"./Bot\";\n\nexport type World = { bots: Bot[] };\n\nexport const newWorld = (): World => ({ bots: [] });\n\nexport const setBots = (bots: Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nlet power = 4;\n\nexport const edgeStrength = (d: number): number => 2 / (1 + Math.exp(power * (d - 1)));\n\nexport const stiffness = (d: Vector3): Matrix3 => outerProduct(d, d).multiplyScalar(-1 / d.dot(d));\n\nexport const stiffnessDerivative = (dim: number) => (d: Vector3): Matrix3 => {\n    const epsilon = 0.00001;\n    const val = d.getComponent(dim);\n    const dPlus = d.clone().setComponent(dim, val + epsilon);\n    const dMinus = d.clone().setComponent(dim, val - epsilon);\n    const plus = stiffness(dPlus).multiplyScalar(edgeStrength(dPlus.length()));\n    const minus = stiffness(dMinus).multiplyScalar(edgeStrength(dMinus.length()));\n    return subMatrix3(plus, minus).multiplyScalar(1 / (2 * epsilon));\n};\n\nexport const stiffnessPair = (a: Bot, b: Bot): Matrix3 => {\n    const d = b.pos.clone().sub(a.pos);\n    return stiffness(d).multiplyScalar(edgeStrength(d.length()));\n};\n\nexport const stiffnessPairDerivative = (bot: Bot) => (dim: number) => (a: Bot, b: Bot): Matrix3 => {\n    if (a !== bot && b !== bot) return new Matrix3().set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n    const derivative = stiffnessDerivative(dim)(b.pos.clone().sub(a.pos));\n    if (a === bot) return derivative.multiplyScalar(-1);\n    return derivative;\n};\n\nexport const removeFixedFromVector = (world: World) => (vector: Vector3[]): Vector3[] =>\n    vector.map((v, i) => (world.bots[i].fixed ? new Vector3(0, 0, 0) : v));\n\nexport const removeFixedFromMatrix = (world: World) => (mat: Matrix3[][]): Matrix3[][] =>\n    mat.map((vector, i) =>\n        vector.map((v, j) => (world.bots[i].fixed || world.bots[j].fixed ? new Matrix3().multiplyScalar(0) : v))\n    );\n\nexport const stiffnessMatrix = (world: World): Matrix3[][] => {\n    const result = world.bots.map(() => world.bots.map(() => new Matrix3().multiplyScalar(0)));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = 0; j < world.bots.length; ++j) {\n            if (i === j) continue;\n            const s = stiffnessPair(world.bots[i], world.bots[j]);\n            result[i][i] = subMatrix3(result[i][i], s);\n            result[i][j] = addMatrix3(result[i][j], s);\n        }\n    }\n    return removeFixedFromMatrix(world)(result);\n};\n\nexport const forceMatrix = (world: World): Vector3[] =>\n    removeFixedFromVector(world)(world.bots.map(bot => new Vector3(0, -bot.weight, 0)));\n\nexport const displacement = (world: World): number[] => {\n    const f = numberArrayFromVector3Array(forceMatrix(world));\n    const k = numberArrayFromMatrix3Array(stiffnessMatrix(world));\n    return ldiv(k, f);\n};\n\nexport const compliance = (world: World): number => {\n    const f = numberArrayFromVector3Array(forceMatrix(world));\n    const u = displacement(world);\n    return dot(f, u);\n};\n\nexport const objective = (world: World): number => compliance(world);\n\nexport const resolveCollisionStep = (world: World): World => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].fixed) continue;\n        world.bots[i].pos.y = Math.max(world.bots[i].pos.y, 0.5);\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (world.bots[i].fixed && world.bots[j].fixed) continue;\n            const oneFixed = world.bots[i].fixed || world.bots[j].fixed;\n            const d = world.bots[j].pos.clone().sub(world.bots[i].pos);\n            const dist = d.length();\n            if (dist > 1) continue;\n            const n = d.multiplyScalar((1 - dist) / (oneFixed ? 1 : 2) / dist);\n            if (!world.bots[i].fixed) world.bots[i].pos = world.bots[i].pos.clone().sub(n);\n            if (!world.bots[j].fixed) world.bots[j].pos = world.bots[j].pos.clone().add(n);\n        }\n    }\n    return world;\n};\n\nexport const resolveCollision = (world: World): World => {\n    let result = world;\n    for (let i = 0; i < 10; ++i) result = resolveCollisionStep(result);\n    return result;\n};\n\nexport const gradient = (world: World): Vector3[] => {\n    const u = displacement(world);\n    const result = [...Array(world.bots.length)].map(() => new Vector3(0, 0, 0));\n    const res = [...Array(world.bots.length)].map(() =>\n        [0, 1, 2].map(() => [...Array(world.bots.length)].map(() => new Vector3(0, 0, 0)))\n    );\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            for (let j = 0; j < world.bots.length; ++j) {\n                if (i >= j) continue;\n                const s = stiffnessPairDerivative(world.bots[i])(dim)(world.bots[i], world.bots[j]);\n                const si = new Vector3(...u.slice(3 * i, 3 * (i + 1))).applyMatrix3(s);\n                const sj = new Vector3(...u.slice(3 * j, 3 * (j + 1))).applyMatrix3(s);\n                const ss = sj.sub(si);\n                res[i][dim][i].add(ss);\n                res[i][dim][j].sub(ss);\n                res[j][dim][j].add(ss);\n                res[j][dim][i].sub(ss);\n            }\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const dku = numberArrayFromVector3Array(removeFixedFromVector(world)(res[i][dim]));\n            result[i].setComponent(dim, -dot(u, dku));\n        }\n    }\n    return result;\n};\n\nexport const optimizeStepNumerical = (stepSize: number) => (world: World): World => {\n    power *= 1.005;\n    console.log(power);\n    const g = gradient(world).map(v => v.multiplyScalar(-stepSize / (1 + v.length())));\n    world.bots.map((bot, i) => {\n        if (bot.fixed) return;\n        bot.pos.add(g[i]);\n    });\n    return resolveCollision(world);\n};\n","import * as linear from \"linear-solve\";\n\nexport const ldiv = (A: number[][], b: number[]): number[] => linear.solve(A, b);\n","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D\n} from \"three\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const newSphere = (pos: Vector3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.position.set(...(pos.toArray() as [number, number, number]));\n    mesh.scale.set(0.5, 0.5, 0.5);\n    return mesh;\n};\n\nexport const updateCylinder = (from: Vector3, to: Vector3, radius: number) => (cylinder: Mesh): Mesh => {\n    const direction = new Vector3().subVectors(to, from);\n    const orientation = new Matrix4();\n    orientation.lookAt(from, to, new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    cylinder.setRotationFromMatrix(orientation);\n    cylinder.scale.set(radius, direction.length(), radius);\n    cylinder.position.set(...from.clone().add(to).divideScalar(2).toArray());\n    return cylinder;\n};\n\nexport const newCylinder = (from: Vector3, to: Vector3, radius: number, color: Color): Mesh => {\n    const edgeGeometry = new CylinderGeometry(1, 1, 1, 8, 1);\n    const cylinder = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    return updateCylinder(from, to, radius)(cylinder);\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Vector3, PerspectiveCamera, WebGLRenderer, Color } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { pipe } from \"ts-pipe-compose\";\nimport Prando from \"prando\";\nconst rng = new Prando(123);\nimport { Bot, World } from \"./core\";\nimport { newScene, newSphere, newCylinder, updateCylinder } from \"./draw\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst randomBot = () => Bot.setPos(new Vector3(...[rng.next(), rng.next(), rng.next()].map(x => x * 10)))(Bot.newBot());\n\nconst bot1 = Bot.setFixed(true)(Bot.newBot());\nconst bot2 = Bot.setFixed(true)(Bot.setPos(new Vector3(3, 0, 0))(Bot.newBot()));\nconst bot3 = Bot.setFixed(true)(Bot.setPos(new Vector3(0, 0, 2))(Bot.newBot()));\nconst bots = [bot1, bot2, bot3, ...[...Array(97)].map(randomBot)];\nlet world = pipe(World.newWorld(), World.setBots(bots));\n\nconst botMeshes = bots.map(bot => newSphere(bot.pos, bot.fixed ? new Color(0, 0, 1) : new Color(0, 1, 0)));\nconst edgeMeshes = bots.map(a => bots.map(b => newCylinder(a.pos, b.pos, 1, new Color(1, 0, 0))));\nconst scene = newScene();\nbotMeshes.map(mesh => scene.add(mesh));\nedgeMeshes.map((row, i) =>\n    row.map((mesh, j) => {\n        if (i >= j) return;\n        scene.add(mesh);\n    })\n);\n\nconst updateWorld = () => {\n    world = World.optimizeStepNumerical(0.1)(world);\n    world.bots.map((bot, i) => {\n        botMeshes[i].position.set(...bot.pos.toArray());\n    });\n    world.bots.map((from, i) =>\n        world.bots.map((to, j) => {\n            if (i >= j) return;\n            scene.remove(edgeMeshes[i][j]);\n            const strength = World.edgeStrength(to.pos.clone().sub(from.pos).length());\n            if (strength < 0.01) return;\n            scene.add(edgeMeshes[i][j]);\n            updateCylinder(from.pos, to.pos, Math.sqrt(strength) * 0.3)(edgeMeshes[i][j]);\n        })\n    );\n};\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n    const [iterations, setIterations] = useState(0);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && camera) renderer.render(scene, camera);\n    }, [controls, renderer, camera, frame]);\n\n    useEffect(() => {\n        if (iterations >= 150) return;\n        const t = setTimeout(() => {\n            updateWorld();\n            setIterations(iterations + 1);\n        }, 10);\n        return () => clearTimeout(t);\n    }, [iterations]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Microbots</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <b>iterations: </b>\n                                        {iterations}\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}