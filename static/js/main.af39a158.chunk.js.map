{"version":3,"sources":["core/Bot.ts","core/utils.ts","core/World.ts","core/matrix.ts","core/Animation.ts","draw.ts","App.tsx","index.tsx"],"names":["newBot","pos","Vector3","weight","fixed","setPos","bot","setWeight","setFixed","average","a","b","result","clone","add","divideScalar","throwError","Error","dot","length","i","addMatrix3","Matrix3","elements","map","e","subMatrix3","zeros","height","width","Array","numberArrayFromVector3Array","vec","k","getComponent","newWorld","bots","setBots","world","friction","edgeStrength","d","Math","exp","stiffness","set","x","y","z","multiplyScalar","stiffnessDerivative","dim","epsilon","val","dPlus","setComponent","dMinus","plus","minus","stiffnessPair","sub","stiffnessPairDerivative","derivative","removeFixedFromVector","vector","v","removeFixedFromMatrix","mat","j","stiffnessMatrix","sx","sy","sz","s","acceleration","before","after","dt","v1","forceMatrix","acc","displacement","A","f","row","element","l","numberArrayFromMatrix3Array","linear","resolveCollisionStep","max","oneFixed","dist","n","resolveCollision","gradient","beforeBefore","afterAfter","u","res","ssx","slice","applyMatrix3","ssy","ssz","si","ss","uBefore","uAfter","dku","start","end","World","Bot","optimizeStepNumerical","stepSize","g","subdivide","animation","createAnimation","c","min","updateCylinder","from","to","radius","cylinder","direction","subVectors","orientation","Matrix4","lookAt","Object3D","up","multiply","setRotationFromMatrix","scale","position","toArray","newCylinder","color","edgeGeometry","CylinderGeometry","Mesh","MeshPhongMaterial","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","worldStart","pipe","_","flat","worldEnd","Animation","botMeshes","geom","SphereGeometry","computeVertexNormals","faces","forEach","face","vertexColors","fill","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","geometry","newSphere","Color","groundEdgeMeshes","edgeMeshes","scene","Scene","AmbientLight","light","DirectionalLight","newScene","updateWorld","time","remove","strength","sqrt","App","useWindowSize","windowWidth","windowHeight","classes","mount","useRef","useState","controls","setControls","camera","setCamera","renderer","setRenderer","frame","setFrame","setTime","animating","setAnimating","useEffect","mc","current","cam","PerspectiveCamera","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","t","window","setInterval","clearInterval","removeChild","update","render","pauseFrames","round","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","className","Paper","List","ListItem","onClick","image","document","getElementsByTagName","toDataURL","createElement","href","replace","download","click","saveImage","ref","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.af39a158.chunk.js","sourcesContent":["import { Vector3 } from \"three\";\n\nexport type Bot = {\n    pos: Vector3;\n    weight: number;\n    fixed: boolean;\n};\n\nexport const newBot = (): Bot => ({\n    pos: new Vector3(0, 0, 0),\n    weight: 1,\n    fixed: false\n});\n\nexport const setPos = (pos: Vector3) => (bot: Bot): Bot => {\n    bot.pos = pos;\n    return bot;\n};\n\nexport const setWeight = (weight: number) => (bot: Bot): Bot => {\n    bot.weight = weight;\n    return bot;\n};\n\nexport const setFixed = (fixed: boolean) => (bot: Bot): Bot => {\n    bot.fixed = fixed;\n    return bot;\n};\n\nexport const average = (a: Bot, b: Bot): Bot => {\n    const result = newBot();\n    result.pos = a.pos.clone().add(b.pos).divideScalar(2);\n    result.weight = (a.weight + b.weight) / 2;\n    result.fixed = a.fixed || b.fixed;\n    return result;\n};\n","import { Vector3, Matrix3 } from \"three\";\n\nconst throwError = () => {\n    throw new Error(\"Vectors need to be the same length\");\n};\n\nexport const dot = (a: number[], b: number[]): number => {\n    if (a.length !== b.length) throwError();\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) result += a[i] * b[i];\n    return result;\n};\n\nexport const applyMatrix = (A: number[][], b: number[]): number[] => {\n    if (A[0].length !== b.length) throwError();\n    return [...Array(A.length)].map((_, i) => dot(A[i], b));\n};\n\nexport const outerProduct = (a: Vector3, b: Vector3): Matrix3 => {\n    if (a.length !== b.length) throwError();\n    return new Matrix3().set(\n        a.x * b.x,\n        a.x * b.y,\n        a.x * b.z,\n        a.y * b.x,\n        a.y * b.y,\n        a.y * b.z,\n        a.z * b.x,\n        a.z * b.y,\n        a.z * b.z\n    );\n};\n\nexport const addMatrix3 = (a: Matrix3, b: Matrix3): Matrix3 => {\n    const result = new Matrix3();\n    result.elements = a.elements.map((e, i) => e + b.elements[i]);\n    return result;\n};\n\nexport const subMatrix3 = (a: Matrix3, b: Matrix3): Matrix3 => {\n    const result = new Matrix3();\n    result.elements = a.elements.map((e, i) => e - b.elements[i]);\n    return result;\n};\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n\nexport const numberArrayFromVector3Array = (vec: Vector3[]): number[] => {\n    const result = [...Array(3 * vec.length)].map(() => 0);\n    vec.map((e, i) => {\n        for (let k = 0; k < 3; ++k) {\n            result[3 * i + k] = e.getComponent(k);\n        }\n    });\n    return result;\n};\n\nexport const numberArrayToVector3Array = (vec: number[]): Vector3[] =>\n    [...Array(vec.length / 3)]\n        .map(() => new Vector3())\n        .map((e, i) => {\n            for (let k = 0; k < 3; ++k) {\n                e.setComponent(k, vec[3 * i + k]);\n            }\n            return e;\n        });\n\nexport const numberArrayFromMatrix3Array = (mat: Matrix3[][]): number[][] => {\n    const result = zeros(3 * mat.length, 3 * mat[0]?.length || 0);\n    mat.map((row, i) =>\n        row.map((element, j) => {\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k][3 * j + l] = mat[i][j].elements[k + 3 * l];\n                }\n            }\n        })\n    );\n    return result;\n};\n\nexport const numberArrayToMatrix3Array = (mat: number[][]): Matrix3[][] =>\n    zeros(mat.length / 3, (mat[0]?.length || 0) / 3).map((row, i) =>\n        row.map((element, j) => {\n            const res = new Matrix3();\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    res.elements[k + 3 * l] = mat[3 * i + k][3 * j + l];\n                }\n            }\n            return res;\n        })\n    );\n","import { Vector3, Matrix3 } from \"three\";\nimport {\n    dot,\n    outerProduct,\n    addMatrix3,\n    subMatrix3,\n    numberArrayFromVector3Array,\n    numberArrayFromMatrix3Array\n} from \"./utils\";\nimport { ldiv } from \"./matrix\";\nimport * as Bot from \"./Bot\";\n\nexport type World = { bots: Bot.Bot[] };\n\nexport const newWorld = (): World => ({ bots: [] });\n\nexport const setBots = (bots: Bot.Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nconst power = 4;\nconst friction = 0.1;\n\nexport const edgeStrength = (d: number): number => 2 / (1 + Math.exp(power * (d - 1)));\n\nexport const stiffness = (d: Vector3): Matrix3 =>\n    outerProduct(d, d)\n        .multiplyScalar(-1 / d.dot(d))\n        .multiplyScalar(edgeStrength(d.length()));\n\nexport const stiffnessDerivative = (dim: number) => (d: Vector3): Matrix3 => {\n    const epsilon = 0.00001;\n    const val = d.getComponent(dim);\n    const dPlus = d.clone().setComponent(dim, val + epsilon);\n    const dMinus = d.clone().setComponent(dim, val - epsilon);\n    const plus = stiffness(dPlus);\n    const minus = stiffness(dMinus);\n    return subMatrix3(plus, minus).multiplyScalar(1 / (2 * epsilon));\n};\n\nexport const stiffnessPair = (a: Bot.Bot, b: Bot.Bot): Matrix3 => {\n    const d = b.pos.clone().sub(a.pos);\n    return stiffness(d);\n};\n\nexport const stiffnessPairDerivative = (bot: Bot.Bot) => (dim: number) => (a: Bot.Bot, b: Bot.Bot): Matrix3 => {\n    if (a !== bot && b !== bot) return new Matrix3().set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n    const derivative = stiffnessDerivative(dim)(b.pos.clone().sub(a.pos));\n    if (a === bot) return derivative.multiplyScalar(-1);\n    return derivative;\n};\n\nexport const removeFixedFromVector = (world: World) => (vector: Vector3[]): Vector3[] =>\n    vector.map((v, i) => (world.bots[i].fixed ? new Vector3(0, 0, 0) : v));\n\nexport const removeFixedFromMatrix = (world: World) => (mat: Matrix3[][]): Matrix3[][] =>\n    mat.map((vector, i) =>\n        vector.map((v, j) => (world.bots[i].fixed || world.bots[j].fixed ? new Matrix3().multiplyScalar(0) : v))\n    );\n\nexport const stiffnessMatrix = (world: World): Matrix3[][] => {\n    const result = world.bots.map(() => world.bots.map(() => new Matrix3().multiplyScalar(0)));\n    for (let i = 0; i < world.bots.length; ++i) {\n        const sx = stiffness(new Vector3(world.bots[i].pos.y + 0.5, 0, 0)).multiplyScalar(friction);\n        const sy = stiffness(new Vector3(0, world.bots[i].pos.y + 0.5, 0));\n        const sz = stiffness(new Vector3(0, 0, world.bots[i].pos.y + 0.5)).multiplyScalar(friction);\n        result[i][i] = subMatrix3(result[i][i], sx);\n        result[i][i] = subMatrix3(result[i][i], sy);\n        result[i][i] = subMatrix3(result[i][i], sz);\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = 0; j < world.bots.length; ++j) {\n            if (i === j) continue;\n            const s = stiffnessPair(world.bots[i], world.bots[j]);\n            result[i][i] = subMatrix3(result[i][i], s);\n            result[i][j] = addMatrix3(result[i][j], s);\n        }\n    }\n    return removeFixedFromMatrix(world)(result);\n};\n\nexport const acceleration = (before: World, after: World, dt: number) => (world: World): Vector3[] =>\n    world.bots.map((bot, i) => {\n        const v1 = world.bots[i].pos.clone().sub(before.bots[i].pos.clone()).divideScalar(dt);\n        const v2 = after.bots[i].pos.clone().sub(world.bots[i].pos.clone()).divideScalar(dt);\n        return v2.sub(v1).divideScalar(dt);\n    });\n\nexport const forceMatrix = (before: World, after: World, dt: number) => (world: World): Vector3[] => {\n    const acc = acceleration(before, after, dt)(world);\n    return removeFixedFromVector(world)(\n        world.bots.map((bot, i) => new Vector3(0, -1, 0).sub(acc[i]).multiplyScalar(bot.weight))\n    );\n};\n\nexport const displacement = (before: World, after: World, dt: number) => (world: World): number[] => {\n    const f = numberArrayFromVector3Array(forceMatrix(before, after, dt)(world));\n    const k = numberArrayFromMatrix3Array(stiffnessMatrix(world));\n    return ldiv(k, f);\n};\n\nexport const resolveCollisionStep = (world: World): World => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].fixed) continue;\n        world.bots[i].pos.y = Math.max(world.bots[i].pos.y, 0.5);\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (world.bots[i].fixed && world.bots[j].fixed) continue;\n            const oneFixed = world.bots[i].fixed || world.bots[j].fixed;\n            const d = world.bots[j].pos.clone().sub(world.bots[i].pos);\n            const dist = d.length();\n            if (dist > 1) continue;\n            const n = d.multiplyScalar((1 - dist) / (oneFixed ? 1 : 2) / dist);\n            if (!world.bots[i].fixed) world.bots[i].pos = world.bots[i].pos.clone().sub(n);\n            if (!world.bots[j].fixed) world.bots[j].pos = world.bots[j].pos.clone().add(n);\n        }\n    }\n    return world;\n};\n\nexport const resolveCollision = (world: World): World => {\n    let result = world;\n    for (let i = 0; i < 10; ++i) result = resolveCollisionStep(result);\n    return result;\n};\n\nexport const gradient = (beforeBefore: World, before: World, after: World, afterAfter: World, dt: number) => (\n    world: World\n): Vector3[] => {\n    const u = displacement(before, after, dt)(world);\n    const result = [...Array(world.bots.length)].map(() => new Vector3(0, 0, 0));\n    const res = [...Array(world.bots.length)].map(() =>\n        [0, 1, 2].map(() => [...Array(world.bots.length)].map(() => new Vector3(0, 0, 0)))\n    );\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const sx = stiffnessDerivative(dim)(new Vector3(world.bots[i].pos.y + 0.5, 0, 0)).multiplyScalar(friction);\n            const sy = stiffnessDerivative(dim)(new Vector3(0, world.bots[i].pos.y + 0.5, 0));\n            const sz = stiffnessDerivative(dim)(new Vector3(0, 0, world.bots[i].pos.y + 0.5)).multiplyScalar(friction);\n            const ssx = new Vector3(...u.slice(3 * i, 3 * (i + 1))).applyMatrix3(sx);\n            res[i][dim][i].sub(ssx);\n            const ssy = new Vector3(...u.slice(3 * i, 3 * (i + 1))).applyMatrix3(sy);\n            res[i][dim][i].sub(ssy);\n            const ssz = new Vector3(...u.slice(3 * i, 3 * (i + 1))).applyMatrix3(sz);\n            res[i][dim][i].sub(ssz);\n            for (let j = 0; j < world.bots.length; ++j) {\n                if (i >= j) continue;\n                const s = stiffnessPairDerivative(world.bots[i])(dim)(world.bots[i], world.bots[j]);\n                const si = new Vector3(...u.slice(3 * i, 3 * (i + 1))).applyMatrix3(s);\n                const sj = new Vector3(...u.slice(3 * j, 3 * (j + 1))).applyMatrix3(s);\n                const ss = sj.sub(si);\n                res[i][dim][i].add(ss);\n                res[i][dim][j].sub(ss);\n                res[j][dim][j].add(ss);\n                res[j][dim][i].sub(ss);\n            }\n        }\n    }\n    const uBefore = displacement(beforeBefore, world, dt)(before);\n    const uAfter = displacement(world, afterAfter, dt)(after);\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const dku = numberArrayFromVector3Array(removeFixedFromVector(world)(res[i][dim]));\n            result[i].setComponent(\n                dim,\n                -dot(u, dku) + 2 * ((2 * u[3 * i + dim] - uBefore[3 * i + dim] - uAfter[3 * i + dim]) / dt ** 2)\n            );\n        }\n    }\n    return result;\n};\n","import * as linear from \"linear-solve\";\n\nexport const ldiv = (A: number[][], b: number[]): number[] => linear.solve(A, b);\n","import * as Bot from \"./Bot\";\nimport * as World from \"./World\";\n\nconst average = (start: World.World, end: World.World): World.World => {\n    const result = World.newWorld();\n    result.bots = start.bots.map((b, i) => Bot.average(b, end.bots[i]));\n    return result;\n};\n\nexport const optimizeStepNumerical = (stepSize: number) => (\n    beforeBefore: World.World,\n    before: World.World,\n    after: World.World,\n    afterAfter: World.World,\n    dt: number\n) => (world: World.World): World.World => {\n    const g = World.gradient(\n        beforeBefore,\n        before,\n        after,\n        afterAfter,\n        dt\n    )(world).map(v => v.multiplyScalar(-stepSize / (1 + v.length())));\n    world.bots.map((bot, i) => {\n        if (bot.fixed) return;\n        bot.pos.add(g[i]);\n    });\n    return World.resolveCollision(world);\n};\n\nconst subdivide = (animation: World.World[]): World.World[] => {\n    const result = [...Array(animation.length * 2 - 1)];\n    for (let i = 0; i < animation.length; ++i) result[2 * i] = animation[i];\n    for (let i = 1; i < result.length - 1; i += 2) result[i] = average(result[i - 1], result[i + 1]);\n    return result;\n};\n\nexport const createAnimation = (before: World.World, after: World.World, n: number): World.World[] => {\n    let result = [before, after];\n    let dt = 100;\n    let stepSize = 0.1;\n    for (let i = 0; i < n; ++i) {\n        dt /= 2;\n        stepSize /= 2;\n        result = subdivide(result);\n        for (let c = 0; c < 30; ++c) {\n            for (let j = 1; j < result.length - 1; j += 2) {\n                optimizeStepNumerical(stepSize)(\n                    result[Math.max(j - 2, 0)],\n                    result[j - 1],\n                    result[j + 1],\n                    result[Math.min(j + 2, result.length - 1)],\n                    dt\n                )(result[j]);\n            }\n            for (let j = 2; j < result.length - 2; j += 2) {\n                optimizeStepNumerical(stepSize)(result[j - 2], result[j - 1], result[j + 1], result[j + 2], dt)(\n                    result[j]\n                );\n            }\n        }\n    }\n    optimizeStepNumerical(0.1)(result[0], result[0], result[2], result[2], dt)(result[1]);\n    return result;\n};\n","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D\n} from \"three\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const newSphere = (pos: Vector3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.position.set(...(pos.toArray() as [number, number, number]));\n    mesh.scale.set(0.5, 0.5, 0.5);\n    return mesh;\n};\n\nexport const updateCylinder = (from: Vector3, to: Vector3, radius: number) => (cylinder: Mesh): Mesh => {\n    const direction = new Vector3().subVectors(to, from);\n    const orientation = new Matrix4();\n    orientation.lookAt(from, to, new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    cylinder.setRotationFromMatrix(orientation);\n    cylinder.scale.set(radius, direction.length(), radius);\n    cylinder.position.set(...from.clone().add(to).divideScalar(2).toArray());\n    return cylinder;\n};\n\nexport const newCylinder = (from: Vector3, to: Vector3, radius: number, color: Color): Mesh => {\n    const edgeGeometry = new CylinderGeometry(1, 1, 1, 8, 1);\n    const cylinder = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    return updateCylinder(from, to, radius)(cylinder);\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Vector3, PerspectiveCamera, WebGLRenderer, Color } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { pipe } from \"ts-pipe-compose\";\nimport { Bot, World, Animation } from \"./core\";\nimport { newScene, newSphere, newCylinder, updateCylinder } from \"./draw\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst height = 3;\n\nconst worldStart = pipe(\n    World.newWorld(),\n    World.setBots([\n        ...[...Array(height)]\n            .map((_, i) => [\n                Bot.setPos(new Vector3(-4, 0.5 + i, 0))(Bot.newBot()),\n                Bot.setPos(new Vector3(4, 0.5 + i, 0))(Bot.newBot())\n            ])\n            .flat(),\n        Bot.setPos(new Vector3(-4, 0.5 + height, 0))(Bot.newBot())\n    ])\n);\n\nconst worldEnd = pipe(\n    World.newWorld(),\n    World.setBots([\n        ...[...Array(height)]\n            .map((_, i) => [\n                Bot.setPos(new Vector3(-4, 0.5 + i, 0))(Bot.newBot()),\n                Bot.setPos(new Vector3(4, 0.5 + i, 0))(Bot.newBot())\n            ])\n            .flat(),\n        Bot.setPos(new Vector3(4, 0.5 + height, 0))(Bot.newBot())\n    ])\n);\n\nconst animation = Animation.createAnimation(worldStart, worldEnd, 8);\n\nconst botMeshes = animation[0].bots.map(bot => newSphere(bot.pos, bot.fixed ? new Color(0, 0, 1) : new Color(0, 1, 0)));\nconst groundEdgeMeshes = animation[0].bots.map(bot =>\n    newCylinder(bot.pos, new Vector3(bot.pos.x, 0, bot.pos.z), 1, new Color(1, 0, 0))\n);\nconst edgeMeshes = animation[0].bots.map(a =>\n    animation[0].bots.map(b => newCylinder(a.pos, b.pos, 1, new Color(1, 0, 0)))\n);\nconst scene = newScene();\nbotMeshes.map(mesh => scene.add(mesh));\ngroundEdgeMeshes.map(mesh => scene.add(mesh));\nedgeMeshes.map((row, i) =>\n    row.map((mesh, j) => {\n        if (i >= j) return;\n        scene.add(mesh);\n    })\n);\n\nconst updateWorld = (time: number) => {\n    animation[time].bots.map((bot, i) => {\n        botMeshes[i].position.set(...bot.pos.toArray());\n    });\n    animation[time].bots.map((bot, i) => {\n        scene.remove(groundEdgeMeshes[i]);\n        const strength = World.edgeStrength(bot.pos.y + 0.5);\n        if (strength < 0.01) return;\n        scene.add(groundEdgeMeshes[i]);\n        updateCylinder(bot.pos, new Vector3(bot.pos.x, 0, bot.pos.z), Math.sqrt(strength) * 0.3)(groundEdgeMeshes[i]);\n    });\n    animation[time].bots.map((from, i) =>\n        animation[time].bots.map((to, j) => {\n            if (i >= j) return;\n            scene.remove(edgeMeshes[i][j]);\n            const strength = World.edgeStrength(to.pos.clone().sub(from.pos).length());\n            if (strength < 0.01) return;\n            scene.add(edgeMeshes[i][j]);\n            updateCylinder(from.pos, to.pos, Math.sqrt(strength) * 0.3)(edgeMeshes[i][j]);\n        })\n    );\n};\n\nconst saveImage = () => {\n    const canvas = document.getElementsByTagName(\"canvas\")[0];\n    const image = canvas.toDataURL(\"image/png\");\n    const a = document.createElement(\"a\");\n    a.href = image.replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n    a.download = \"image.png\";\n    a.click();\n};\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n    const [time, setTime] = useState(0);\n    const [animating, setAnimating] = useState(false);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && camera) renderer.render(scene, camera);\n    }, [controls, renderer, camera, frame]);\n\n    useEffect(() => {\n        const pauseFrac = 0.1;\n        const pauseFrames = Math.round(pauseFrac * animation.length);\n        let t = time % (2 * (animation.length + pauseFrames));\n        if (t < pauseFrames) {\n            updateWorld(0);\n            return;\n        }\n        t -= pauseFrames;\n        if (t < animation.length) {\n            updateWorld(t);\n            return;\n        }\n        t -= animation.length;\n        if (t < pauseFrames) {\n            updateWorld(animation.length - 1);\n            return;\n        }\n        t -= pauseFrames;\n        updateWorld(animation.length - 1 - t);\n    }, [time]);\n\n    useEffect(() => {\n        if (!animating) return;\n        const t = setInterval(() => setTime(time => time + 1), 10);\n        return () => clearInterval(t);\n    }, [animating]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Microbots</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <button onClick={() => setTime(time + 1)}>Time: {time}</button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <button onClick={() => setAnimating(!animating)}>\n                                            Animating: {animating ? \"true\" : \"false\"}\n                                        </button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <button onClick={() => saveImage()}>Save screenshot</button>\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}