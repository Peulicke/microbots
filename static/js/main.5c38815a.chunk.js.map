{"version":3,"sources":["core/Animation.ts","core/Vec3.ts","core/Mat3.ts","core/utils.ts","core/Bot.ts","core/conjugateGradientSparse.ts","core/delaunay.ts","core/World.ts","core/PriorityQueue.ts","core/aStar.ts","core/resolveOverlap.ts","examples/arc.ts","Gui/Dynamic.tsx","assets/grass.jpg","assets/skyboxes/nx.png","assets/skyboxes/ny.png","assets/skyboxes/nz.png","assets/skyboxes/px.png","assets/skyboxes/py.png","assets/skyboxes/pz.png","Gui/draw.ts","Gui/Canvas.tsx","Gui/Scene.tsx","examples/utils/index.ts","examples/bigArc.ts","examples/brachiation.ts","examples/bigCube.ts","examples/crane.ts","examples/cube.ts","examples/floorTransport.ts","examples/frameTransport.ts","examples/platform.ts","examples/platforms.ts","examples/transport.ts","examples/index.ts","examples/stack.ts","examples/towers.ts","examples/transformer.ts","examples/verticalTransport.ts","examples/wall.ts","Gui/SelectExample.tsx","Gui/Static.tsx","Gui/index.tsx","index.tsx"],"names":["ContractionType","newVec3","x","y","z","clone","a","add","b","addEq","sub","subEq","multiplyScalar","s","dot","length","Math","sqrt","dist","normalize","dir","i","j","apply","result","outerProduct","Vec3","bot","pos","fixed","interpolate","t","dt","p1","p2","p4","p5","v1","v2","v4","v5","t3","epsilon","t12","time","t13","t23","t24","t34","t35","t1213","t1323","t2324","t2434","t3435","t3545","c","w1","w2","w4","w5","q1","q2","q4","q5","minAcc","addVecMultNum","matMultVec","A","v","conditionVector","sum","floor","ldiv","bCopy","Array","fill","preconditioner","conditionMatrix","r","Ap","p","pOld","rsold","alpha","rsnew","cg","orient","m","Simplex","vertices","adjacent","boundary","lastVisited","this","u","GlueFacet","cell","index","Triangulation","simplices","interior","tuple","filter","point","n","verts","toVisit","pop","undefined","cellAdj","neighbor","nv","vv","o","push","initIndex","cellVerts","prev","tovisit","indexOf","glueFacets","indexOfN","indexOfNeg1","na","vverts","slice","vadj","ncell","opposite","flip","uu","nface","nptr","k","sort","l1","m1","d","l0","min","m0","compareCells","ai","bi","walk","handleBoundaryDegeneracy","addPeaks","cells","nc","bcell","cv","ptr","parity","LiftedPoint","triangulate","points","lifted","upper","l","max","dpoints","dindex","h","hull","Error","initialSimplex","initialCoords","initialCell","list","adj","triangles","insert","incrementalConvexHull","newWorld","bots","world","map","Bot","edgeStrength","offset","slack","stiffness","stiffnessGround","Mat3","edgeStrengthGround","stiffnessDerivative","dim","val","dPlus","dMinus","plus","stiffnessMatrix","friction","neigh","sx","sy","sz","forEach","stiffnessPair","displacement","before","after","g","f","_","acc","forceMatrix","neighbors","neighborRadius","con","gradient","overlapPenalty","uBefore","uAfter","beforeBefore","afterAfter","udku","vi","stiffnessPairDerivative","vj","svisvj","diff","dest","rng","Prando","connections","positions","tri","Object","keys","key","Number","delaunay","next","PriorityQueue","comparator","elements","first","peek","last","size","current","largest","left","right","compare","swap","element","parent","aux","backtrack","halfDist","prevCell","d1","w","round","grid","start","end","e","exactMidpoint","checked","check","distEstimate","iter","midpoint","equals","addToGrid","dx","dy","dz","removeFromGrid","average","World","aStar","avg","optimize","animation","iterations","vel","grad","displacements","contract","type","validConnections","Delaunay","Mst","shift","some","isValidConnection","dLength","minimizeAcceleration","createAnimation","config","range","botsToGrid","tooFast","now","maxAcc","resultPrev","tf","console","log","ro","prevPos","resolveOverlap","contractIterations","contractionType","gravity","botMass","optimizeIterations","minimizeAccelerationIterations","subdivideIterations","Dynamic","props","useState","pause","setPause","path","setPath","step","worldPrev","worldEnd","reduce","value","Animation","setWorldPrev","setWorld","useEffect","setInterval","clearInterval","worldStart","List","ListItem","Button","variant","onClick","update","$set","newScene","scene","Scene","geo","PlaneBufferGeometry","textureGrass","TextureLoader","load","grass","wrapS","RepeatWrapping","wrapT","repeat","set","mat","MeshPhongMaterial","plane","Mesh","rotateX","PI","castShadow","receiveShadow","AmbientLight","light","DirectionalLight","position","shadowCameraRight","shadowCameraLeft","shadowCameraTop","shadowCameraBottom","shadowMapWidth","shadowMapHeight","materialArray","px","nx","py","ny","pz","nz","MeshBasicMaterial","fog","side","BackSide","skyboxGeo","BoxGeometry","skybox","Canvas","useWindowSize","windowWidth","windowHeight","width","height","mount","useRef","controls","setControls","camera","setCamera","renderer","setRenderer","mc","cam","PerspectiveCamera","lookAt","ren","WebGLRenderer","antialias","setClearColor","setSize","shadowMapEnabled","shadowMapType","PCFSoftShadowMap","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","removeChild","window","render","ref","setScene","botMeshes","setBotMeshes","color","geom","SphereGeometry","computeVertexNormals","faces","face","vertexColors","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","geometry","scale","newSphere","Color","scn","createBots","coords","createWorld","createExample","title","fixedBots","startBots","endBots","arc","angle","cos","sin","flat","pillar","barZ","platform","bar","h1","h2","abs","frame","examples","bigArc","bigCube","brachiation","crane","cube","floorTransport","frameTransport","space","SelectExample","selectedExample","setSelectedExample","exampleButton","example","loadExample","ws","we","rand","onSelect","examplesNoFixed","examplesFixed","Static","setTime","setAnimation","pauseFrames","Date","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","App","classes","setWorldStart","setWorldEnd","dynamic","setDynamic","Fibers","setConfig","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","direction","fontSize","className","FormControlLabel","control","Switch","onChange","target","label","entries","Select","isNaN","MenuItem","TextField","parseFloat","image","document","getElementsByTagName","toDataURL","createElement","href","replace","download","click","saveImage","ReactDOM","StrictMode","Gui","getElementById"],"mappings":"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","file":"static/js/main.5c38815a.chunk.js","sourcesContent":["import * as Bot from \"./Bot\";\nimport * as Vec3 from \"./Vec3\";\nimport * as World from \"./World\";\n\nimport aStar, { Grid, botsToGrid } from \"./aStar\";\nimport resolveOverlap from \"./resolveOverlap\";\n\nconst average = (grid: Grid, start: World.World, end: World.World): World.World => {\n    const avg = (a: Bot.Bot, b: Bot.Bot): Bot.Bot => {\n        const result = Bot.clone(a);\n        result.pos = aStar(grid, a.pos, b.pos);\n        return result;\n    };\n    const result = World.newWorld();\n    result.bots = start.bots.map((b, i) => avg(b, end.bots[i]));\n    return result;\n};\n\nconst gradient = (\n    offset: number,\n    slack: number,\n    friction: number,\n    overlapPenalty: number,\n    animation: World.World[],\n    dt: number,\n    g: number,\n    m: number,\n    neighbors: number[][][]\n): Vec3.Vec3[][] => {\n    const result = [...Array(animation.length)].map(() =>\n        [...Array(animation[0].bots.length)].map(() => Vec3.newVec3(0, 0, 0))\n    );\n    const displacements = animation.map(() => [...Array(3 * animation[0].bots.length)].map(() => 0));\n    for (let i = 0; i < animation.length; ++i) {\n        const before = animation[Math.max(i - 1, 0)];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        displacements[i] = World.displacement(\n            offset,\n            slack,\n            friction,\n            before,\n            after,\n            dt,\n            g,\n            m,\n            animation[i],\n            neighbors[i]\n        );\n    }\n    for (let i = 1; i < animation.length; ++i) {\n        const beforeBefore = animation[Math.max(i - 2, 0)];\n        const before = animation[i - 1];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        const afterAfter = animation[Math.min(i + 2, animation.length - 1)];\n        result[i] = World.gradient(\n            offset,\n            slack,\n            friction,\n            overlapPenalty,\n            displacements[i - 1],\n            displacements[i],\n            displacements[Math.min(i + 1, animation.length - 1)],\n            beforeBefore,\n            before,\n            after,\n            afterAfter,\n            dt,\n            animation[i],\n            neighbors[i],\n            i / (animation.length - 1)\n        );\n    }\n    return result;\n};\n\nconst optimize = (\n    offset: number,\n    slack: number,\n    friction: number,\n    overlapPenalty: number,\n    neighborRadius: number,\n    animation: World.World[],\n    dt: number,\n    g: number,\n    m: number,\n    iterations: number\n): void => {\n    const acc = 0.2 / animation.length;\n    const vel = animation.map(world => world.bots.map(() => Vec3.newVec3(0, 0, 0)));\n    const connections = animation.map(world => World.connections(world.bots.map(bot => bot.pos)));\n    const neighbors = animation.map((world, i) =>\n        world.bots.map((_, j) => World.neighbors(neighborRadius, world, connections[i], j))\n    );\n    for (let iter = 0; iter < iterations; ++iter) {\n        let grad = gradient(offset, slack, friction, overlapPenalty, animation, dt, g, m, neighbors);\n        grad = grad.map(world => world.map(v => Vec3.multiplyScalar(v, -acc / (1e-4 + Vec3.length(v)))));\n        animation.forEach((world, i) => {\n            if (i <= 1 || i >= animation.length - 2) return;\n            world.bots.forEach((bot, j) => {\n                vel[i][j] = Vec3.add(vel[i][j], grad[i][j]);\n                vel[i][j] = Vec3.multiplyScalar(vel[i][j], 0.9);\n                bot.pos = Vec3.add(bot.pos, vel[i][j]);\n            });\n        });\n    }\n};\n\nconst dist = (a: Bot.Bot, b: Bot.Bot): number => Vec3.length(Vec3.sub(b.pos, a.pos));\n\nexport enum ContractionType {\n    Mst,\n    Fibers,\n    Delaunay\n}\n\nconst isValidConnection = (\n    world: World.World,\n    connections: number[][],\n    i: number,\n    j: number,\n    type: ContractionType\n): boolean => {\n    if (type === ContractionType.Delaunay) return true;\n    if (type === ContractionType.Mst) {\n        if (j === -1) {\n            const d = world.bots[i].pos[1] + 0.5;\n            const checked = [...Array(world.bots.length)].map(() => false);\n            const check: number[] = [];\n            for (let k = 0; k < world.bots.length; ++k) {\n                if (world.bots[k].pos[1] + 0.5 < d) check.push(k);\n            }\n            while (check.length > 0) {\n                const k = check.shift();\n                if (k === undefined) break;\n                if (checked[k]) continue;\n                checked[k] = true;\n                for (let c = 0; c < connections[k].length; ++c) {\n                    const l = connections[k][c];\n                    if (l === -1) continue;\n                    if (Vec3.dist(world.bots[k].pos, world.bots[l].pos) < d) check.push(l);\n                }\n            }\n            return !checked[i];\n        }\n        const d = Vec3.dist(world.bots[i].pos, world.bots[j].pos);\n        const checked = [...Array(world.bots.length)].map(() => false);\n        const check: number[] = [];\n        for (let k = 0; k < world.bots.length; ++k) {\n            if (world.bots[k].pos[1] + 0.5 < d) check.push(k);\n        }\n        while (check.length > 0) {\n            const k = check.shift();\n            if (k === undefined) break;\n            if (checked[k]) continue;\n            checked[k] = true;\n            for (let c = 0; c < connections[k].length; ++c) {\n                const l = connections[k][c];\n                if (l === -1) continue;\n                if (Vec3.dist(world.bots[k].pos, world.bots[l].pos) < d) check.push(l);\n            }\n        }\n        return !(checked[i] && checked[j]);\n    }\n    if (j === -1) {\n        const a = world.bots[i];\n        return !world.bots.some((b, k) => {\n            if (i === k) return false;\n            return (\n                Vec3.dist(b.pos, [a.pos[0], -0.5, b.pos[2]]) < a.pos[1] + 0.5 &&\n                Vec3.dist(a.pos, b.pos) < a.pos[1] + 0.5\n            );\n        });\n    }\n    for (let k = 0; k < world.bots.length; ++k) {\n        if (k === i) continue;\n        if (k === j) continue;\n        if (\n            dist(world.bots[i], world.bots[j]) > world.bots[i].pos[1] + 0.5 &&\n            dist(world.bots[i], world.bots[j]) > world.bots[j].pos[1] + 0.5\n        )\n            return false;\n        if (\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[i], world.bots[k]) &&\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[k], world.bots[j])\n        )\n            return false;\n        if (\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[j], world.bots[k]) &&\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[i], world.bots[k])\n        )\n            return false;\n    }\n    return true;\n};\n\nconst contract = (world: World.World, iterations: number, type: ContractionType): void => {\n    const frac = 0.2;\n    for (let iter = 0; iter < iterations; ++iter) {\n        const connections = World.connections(world.bots.map(bot => bot.pos));\n        const validConnections: [number, number][] = [];\n        connections.forEach((list, i) => {\n            list.forEach(j => {\n                if (j !== -1 && i >= j) return;\n                if (!isValidConnection(world, connections, i, j, type)) return;\n                validConnections.push([i, j]);\n            });\n        });\n        validConnections.forEach(([i, j]) => {\n            if (j === -1) {\n                world.bots[i].pos[1] += frac * (0.5 - world.bots[i].pos[1]);\n                return;\n            }\n            const d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const dLength = Vec3.length(d);\n            if (dLength < 1) return;\n            const n = Vec3.multiplyScalar(d, frac * ((1 - dLength) / dLength / 2));\n            Vec3.subEq(world.bots[i].pos, n);\n            Vec3.addEq(world.bots[j].pos, n);\n        });\n    }\n};\n\nconst minimizeAcceleration = (animation: World.World[], dt: number): void => {\n    const frac = 0.5;\n    for (let i = 2; i < animation.length - 2; ++i) {\n        animation[i].bots.forEach((bot, j) => {\n            const p = Bot.interpolate(\n                (i - 1) / (animation.length - 3),\n                dt,\n                animation[i - 2].bots[j].pos,\n                animation[i - 1].bots[j].pos,\n                animation[i + 1].bots[j].pos,\n                animation[i + 2].bots[j].pos\n            );\n            bot.pos = Vec3.add(Vec3.multiplyScalar(bot.pos, frac), Vec3.multiplyScalar(p, 1 - frac));\n        });\n    }\n};\n\nconst maxAcc = (prev: World.World, now: World.World, next: World.World, dt: number): number => {\n    let result = 0;\n    for (let i = 0; i < now.bots.length; ++i) {\n        const v1 = Vec3.multiplyScalar(Vec3.sub(now.bots[i].pos, prev.bots[i].pos), 1 / dt);\n        const v2 = Vec3.multiplyScalar(Vec3.sub(next.bots[i].pos, now.bots[i].pos), 1 / dt);\n        const a = Vec3.multiplyScalar(Vec3.sub(v2, v1), 1 / dt);\n        result = Math.max(result, Vec3.length(a));\n    }\n    return result;\n};\n\nexport type Config = {\n    subdivideIterations: number;\n    optimizeIterations: number;\n    contractionType: ContractionType;\n    contractIterations: number;\n    minimizeAccelerationIterations: number;\n    offset: number;\n    slack: number;\n    friction: number;\n    neighborRadius: number;\n    overlapPenalty: number;\n    gravity: number;\n    botMass: number;\n    dt: number;\n};\n\nexport const createAnimation = (\n    beforeBefore: World.World,\n    before: World.World,\n    after: World.World,\n    afterAfter: World.World,\n    config: Config\n): World.World[] => {\n    let result = [beforeBefore, before, after, afterAfter];\n    const maxAccLimit = 0.2;\n    const fixed = before.bots.filter(bot => bot.fixed);\n    const grid = botsToGrid(fixed);\n    for (let iter = 0; iter < config.subdivideIterations; ++iter) {\n        const tooFast = result.map((world, i) => {\n            if (i <= 1 || i >= result.length - 1) return false;\n            return maxAcc(result[i - 1], world, result[i + 1], config.dt) > maxAccLimit;\n        });\n        if (!tooFast.some(x => x)) break;\n        const resultPrev = [...result];\n        result = [result[0]];\n        tooFast.forEach((tf, i) => {\n            if (i === 0) return;\n            if (tf) result.push(average(grid, result[result.length - 1], resultPrev[i]));\n            result.push(resultPrev[i]);\n        });\n        console.log(iter, result.length);\n        const ro = result.map(world => resolveOverlap(world.bots));\n        for (let j = 0; j < config.contractIterations; ++j) {\n            for (let i = 2; i < result.length - 2; ++i) contract(result[i], 1, config.contractionType);\n            result.map((_, k) => ro[k]());\n        }\n        optimize(\n            config.offset,\n            config.slack,\n            config.friction,\n            config.overlapPenalty,\n            config.neighborRadius,\n            result,\n            config.dt,\n            config.gravity,\n            config.botMass,\n            config.optimizeIterations\n        );\n        if (iter > 3)\n            for (let i = 0; i < config.minimizeAccelerationIterations; ++i) {\n                minimizeAcceleration(result, config.dt);\n                result.map((_, k) => ro[k]());\n            }\n        result.forEach(world =>\n            world.bots.forEach((bot, i) => {\n                if (bot.fixed) bot.pos = Vec3.clone(result[0].bots[i].pos);\n            })\n        );\n    }\n    console.log(\"done\");\n    return result.slice(1, result.length - 1);\n};\n","export type Vec3 = [number, number, number];\n\nexport const newVec3 = (x: number, y: number, z: number): Vec3 => [x, y, z];\n\nexport const clone = (a: Vec3): Vec3 => [a[0], a[1], a[2]];\n\nexport const add = (a: Vec3, b: Vec3): Vec3 => [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n\nexport const addEq = (a: Vec3, b: Vec3): void => {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n};\n\nexport const sub = (a: Vec3, b: Vec3): Vec3 => [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n\nexport const subEq = (a: Vec3, b: Vec3): void => {\n    a[0] -= b[0];\n    a[1] -= b[1];\n    a[2] -= b[2];\n};\n\nexport const multiplyScalar = (a: Vec3, s: number): Vec3 => [a[0] * s, a[1] * s, a[2] * s];\n\nexport const dot = (a: Vec3, b: Vec3): number => a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\nexport const length = (a: Vec3): number => Math.sqrt(dot(a, a));\n\nexport const dist = (a: Vec3, b: Vec3): number => length(sub(a, b));\n\nexport const normalize = (a: Vec3): Vec3 => multiplyScalar(a, 1 / length(a));\n\nexport const dir = (a: Vec3, b: Vec3): Vec3 => normalize(sub(a, b));\n","import * as Vec3 from \"./Vec3\";\n\nexport type Mat3 = [Vec3.Vec3, Vec3.Vec3, Vec3.Vec3];\n\nexport const newMat3 = (x: Vec3.Vec3, y: Vec3.Vec3, z: Vec3.Vec3): Mat3 => [x, y, z];\n\nexport const add = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] += b[i][j];\n        }\n    }\n};\n\nexport const sub = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] -= b[i][j];\n        }\n    }\n};\n\nexport const multiplyScalar = (a: Mat3, s: number): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] *= s;\n        }\n    }\n};\n\nexport const apply = (a: Mat3, b: Vec3.Vec3): Vec3.Vec3 => {\n    const result: Vec3.Vec3 = [0, 0, 0];\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            result[i] += a[i][j] * b[j];\n        }\n    }\n    return result;\n};\n","import * as Mat3 from \"./Mat3\";\nimport * as Vec3 from \"./Vec3\";\n\ntype Spacetime = {\n    pos: Vec3.Vec3;\n    time: number;\n};\n\nexport const outerProduct = (a: Vec3.Vec3, b: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.newMat3(\n        Vec3.newVec3(a[0] * b[0], a[0] * b[1], a[0] * b[2]),\n        Vec3.newVec3(a[1] * b[0], a[1] * b[1], a[1] * b[2]),\n        Vec3.newVec3(a[2] * b[0], a[2] * b[1], a[2] * b[2])\n    );\n\nexport const minAcc = (v1: Spacetime, v2: Spacetime, v4: Spacetime, v5: Spacetime, t3: number): Vec3.Vec3 => {\n    const epsilon = 1e-10;\n    const t12 = v2.time - v1.time;\n    const t13 = t3 - v1.time;\n    const t23 = t3 - v2.time;\n    const t24 = v4.time - v2.time;\n    const t34 = v4.time - t3;\n    const t35 = v5.time - t3;\n    const t45 = v5.time - v4.time;\n    const t1213 = t12 * t13 + epsilon;\n    const t1323 = t13 * t23 + epsilon;\n    const t2324 = t23 * t24 + epsilon;\n    const t2434 = t24 * t34 + epsilon;\n    const t3435 = t34 * t35 + epsilon;\n    const t3545 = t35 * t45 + epsilon;\n    const c = 1 / (t2434 * t2324);\n    const a = c + 1 / t1323 ** 2 + 1 / t2324 ** 2;\n    const b = c + 1 / t2434 ** 2 + 1 / t3435 ** 2;\n    const w1 = -1 / (t1213 * t1323 * (a + b));\n    const w2 = (a + 1 / (t1213 * t1323)) / (a + b);\n    const w4 = (b + 1 / (t3435 * t3545)) / (a + b);\n    const w5 = -1 / (t3435 * t3545 * (a + b));\n    const q1 = Vec3.multiplyScalar(v1.pos, w1);\n    const q2 = Vec3.multiplyScalar(v2.pos, w2);\n    const q4 = Vec3.multiplyScalar(v4.pos, w4);\n    const q5 = Vec3.multiplyScalar(v5.pos, w5);\n    const p3 = Vec3.add(Vec3.add(Vec3.add(q1, q2), q4), q5);\n    return p3;\n};\n","import * as Vec3 from \"./Vec3\";\n\nimport { minAcc } from \"./utils\";\n\nexport type Bot = {\n    pos: Vec3.Vec3;\n    fixed: boolean;\n};\n\nexport const clone = (bot: Bot): Bot => ({ pos: Vec3.clone(bot.pos), fixed: bot.fixed });\n\nexport const interpolate = (\n    t: number,\n    dt: number,\n    p1: Vec3.Vec3,\n    p2: Vec3.Vec3,\n    p4: Vec3.Vec3,\n    p5: Vec3.Vec3\n): Vec3.Vec3 =>\n    minAcc(\n        { pos: p1, time: t - 2 * dt },\n        { pos: p2, time: t - dt },\n        { pos: p4, time: t + dt },\n        { pos: p5, time: t + 2 * dt },\n        t\n    );\n","export type SparseSymmetric = [number, number][][];\n\nconst clone = (a: number[], result: number[]): void => {\n    for (let i = 0; i < a.length; ++i) result[i] = a[i];\n};\n\nconst dot = (a: number[], b: number[]): number => {\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) {\n        result += a[i] * b[i];\n    }\n    return result;\n};\n\nconst addVecMultNum = (a: number[], b: number[], c: number): void => {\n    for (let i = 0; i < a.length; ++i) a[i] += b[i] * c;\n};\n\nconst matMultVec = (A: SparseSymmetric, b: number[], result: number[]): void => {\n    for (let i = 0; i < result.length; ++i) result[i] = 0;\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            const v = A[i][c][1];\n            result[i] += v * b[j];\n            if (i === j) continue;\n            result[j] += v * b[i];\n        }\n    }\n};\n\nconst cg = (A: SparseSymmetric, b: number[]): number[] => {\n    const x = Array(b.length).fill(0);\n    const r = Array(b.length);\n    clone(b, r);\n    const Ap = Array(b.length);\n    matMultVec(A, x, Ap);\n    addVecMultNum(r, Ap, -1);\n    const p = Array(r.length);\n    const pOld = Array(p.length);\n    clone(r, p);\n    let rsold = dot(r, r);\n    for (let i = 0; i < 20; ++i) {\n        matMultVec(A, p, Ap);\n        const alpha = rsold / dot(p, Ap);\n        addVecMultNum(x, p, alpha);\n        addVecMultNum(r, Ap, -alpha);\n        const rsnew = dot(r, r);\n        clone(p, pOld);\n        clone(r, p);\n        addVecMultNum(p, pOld, rsnew / rsold);\n        rsold = rsnew;\n    }\n    return x;\n};\n\nconst preconditioner = (A: SparseSymmetric, b: number[]): number[] => {\n    const sum = Array(b.length / 3).fill(0);\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const [j, v] = A[i][c];\n            if (Math.floor(i / 3) !== Math.floor(j / 3)) continue;\n            sum[Math.floor(i / 3)] += v;\n            if (i === j) continue;\n            sum[Math.floor(j / 3)] += v;\n        }\n    }\n    for (let i = 0; i < sum.length; ++i) sum[i] = Math.sqrt(Math.sqrt(3 / sum[i]));\n    return sum;\n};\n\nconst conditionMatrix = (sum: number[], A: SparseSymmetric): void => {\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            A[i][c][1] *= sum[Math.floor(i / 3)];\n            A[i][c][1] *= sum[Math.floor(j / 3)];\n        }\n    }\n};\n\nconst conditionVector = (sum: number[], b: number[]): void => {\n    for (let i = 0; i < b.length; ++i) {\n        b[i] *= sum[Math.floor(i / 3)];\n    }\n};\n\nexport const ldiv = (A: SparseSymmetric, b: number[]): number[] => {\n    const bCopy = Array(b.length);\n    clone(b, bCopy);\n    const sum = preconditioner(A, bCopy);\n    conditionMatrix(sum, A);\n    conditionVector(sum, bCopy);\n    const x = cg(A, bCopy);\n    conditionVector(sum, x);\n    return x;\n};\n","const orient = (m: number[][]) =>\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[2][2] +\n        (m[2][1] * m[4][0] - m[4][1] * m[2][0]) * -m[3][2] +\n        (m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[4][2]) *\n        m[1][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[3][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[4][2]) *\n        -m[2][3] +\n    ((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[2][2] +\n        (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[4][2]) *\n        m[3][3] +\n    ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[1][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * -m[2][2] +\n        (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[3][2]) *\n        -m[4][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[3][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[4][2]) *\n        m[0][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[0][2] +\n        (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[3][2] +\n        (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * m[4][2]) *\n        -m[1][3] +\n    (((m[1][1] * m[4][0] - m[4][1] * m[1][0]) * m[0][2] +\n        (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[1][2] +\n        (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[4][2]) *\n        m[3][3] +\n        ((m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[3][2]) *\n            -m[4][3] +\n        ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[1][2] +\n            (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * -m[2][2] +\n            (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[3][2]) *\n            m[0][3] +\n        ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[2][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[3][2]) *\n            -m[1][3] +\n        ((m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[3][2]) *\n            m[2][3] +\n        ((m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[2][2]) *\n            -m[3][3]) -\n    (((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[2][2] +\n        (m[2][1] * m[4][0] - m[4][1] * m[2][0]) * -m[3][2] +\n        (m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[4][2]) *\n        m[0][3] +\n        ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[0][2] +\n            (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[3][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * m[4][2]) *\n            -m[2][3] +\n        (((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[0][2] +\n            (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[2][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[4][2]) *\n            m[3][3] +\n            ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[0][2] +\n                (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[2][2] +\n                (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[3][2]) *\n                -m[4][3]) +\n        (((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[1][2] +\n            (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[2][2] +\n            (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[4][2]) *\n            m[0][3] +\n            ((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[0][2] +\n                (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[2][2] +\n                (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[4][2]) *\n                -m[1][3] +\n            (((m[1][1] * m[4][0] - m[4][1] * m[1][0]) * m[0][2] +\n                (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[1][2] +\n                (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[4][2]) *\n                m[2][3] +\n                ((m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[0][2] +\n                    (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * -m[1][2] +\n                    (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[2][2]) *\n                    -m[4][3])));\n\n//Ranks a pair of cells up to permutation\nconst compareCells = (a: number[], b: number[]) => {\n    const l1 = a[0] + a[1];\n    const m1 = b[0] + b[1];\n    let d = l1 + a[2] - (m1 + b[2]);\n    if (d) return d;\n    const l0 = Math.min(a[0], a[1]);\n    const m0 = Math.min(b[0], b[1]);\n    d = Math.min(l0, a[2]) - Math.min(m0, b[2]);\n    if (d) return d;\n    return Math.min(l0 + a[2], l1) - Math.min(m0 + b[2], m1);\n};\n\nclass Simplex {\n    vertices: number[];\n    adjacent: Simplex[];\n    boundary: boolean;\n    lastVisited: number;\n    constructor(vertices: number[], adjacent: Simplex[], boundary: boolean) {\n        this.vertices = vertices;\n        this.adjacent = adjacent;\n        this.boundary = boundary;\n        this.lastVisited = -1;\n    }\n    flip() {\n        const t = this.vertices[0];\n        this.vertices[0] = this.vertices[1];\n        this.vertices[1] = t;\n        const u = this.adjacent[0];\n        this.adjacent[0] = this.adjacent[1];\n        this.adjacent[1] = u;\n    }\n}\n\nclass GlueFacet {\n    vertices: number[];\n    cell: Simplex;\n    index: number;\n    constructor(vertices: number[], cell: Simplex, index: number) {\n        this.vertices = vertices;\n        this.cell = cell;\n        this.index = index;\n    }\n}\n\nclass Triangulation {\n    vertices: number[][];\n    simplices: Simplex[];\n    interior: Simplex[];\n    tuple: number[][];\n    orient: () => number;\n    constructor(vertices: number[][], simplices: Simplex[]) {\n        this.vertices = vertices;\n        this.simplices = simplices;\n        this.interior = simplices.filter(c => !c.boundary);\n        this.tuple = [...this.vertices];\n        this.orient = () => orient(this.tuple);\n    }\n    handleBoundaryDegeneracy(cell: Simplex, point: number[]) {\n        const d = 4;\n        const n = this.vertices.length - 1;\n        const tuple = this.tuple;\n        const verts = this.vertices;\n        const toVisit = [cell];\n        cell.lastVisited = -n;\n        while (toVisit.length > 0) {\n            const c = toVisit.pop();\n            if (c === undefined) break;\n            const cellAdj = c.adjacent;\n            for (let i = 0; i <= d; ++i) {\n                const neighbor = cellAdj[i];\n                if (!neighbor.boundary || neighbor.lastVisited <= -n) continue;\n                const nv = neighbor.vertices;\n                for (let j = 0; j <= d; ++j) {\n                    const vv = nv[j];\n                    if (vv < 0) tuple[j] = point;\n                    else tuple[j] = verts[vv];\n                }\n                const o = this.orient();\n                if (o > 0) return neighbor;\n                neighbor.lastVisited = -n;\n                if (o === 0) toVisit.push(neighbor);\n            }\n        }\n        return null;\n    }\n    walk(point: number[]) {\n        //Alias local properties\n        const n = this.vertices.length - 1;\n        const verts = this.vertices;\n        const tuple = this.tuple;\n\n        //Compute initial jump cell\n        const initIndex = this.interior.length - 1;\n        let cell = this.interior[initIndex];\n\n        //Start walking\n        while (!cell.boundary) {\n            const cellVerts = cell.vertices;\n            const cellAdj = cell.adjacent;\n\n            for (let i = 0; i <= 4; ++i) {\n                tuple[i] = verts[cellVerts[i]];\n            }\n            cell.lastVisited = n;\n\n            //Find farthest adjacent cell\n            for (let i = 0; i <= 4; ++i) {\n                const neighbor = cellAdj[i];\n                if (neighbor.lastVisited >= n) continue;\n                const prev = tuple[i];\n                tuple[i] = point;\n                const o = this.orient();\n                tuple[i] = prev;\n                if (o < 0) {\n                    cell = neighbor;\n                    break;\n                }\n                if (neighbor.boundary) neighbor.lastVisited = -n;\n                else neighbor.lastVisited = n;\n            }\n        }\n\n        return cell;\n    }\n    addPeaks(point: number[], cell: Simplex) {\n        const n = this.vertices.length - 1;\n        const verts = this.vertices;\n        const tuple = this.tuple;\n        const interior = this.interior;\n        const simplices = this.simplices;\n\n        //Walking finished at boundary, time to add peaks\n        const tovisit = [cell];\n\n        //Stretch initial boundary cell into a peak\n        cell.lastVisited = n;\n        cell.vertices[cell.vertices.indexOf(-1)] = n;\n        cell.boundary = false;\n        interior.push(cell);\n\n        //Record a list of all new boundaries created by added peaks so we can glue them together when we are all done\n        const glueFacets = [];\n\n        //Do a traversal of the boundary walking outward from starting peak\n        while (tovisit.length > 0) {\n            const c = tovisit.pop();\n            if (c === undefined) break;\n            //Pop off peak and walk over adjacent cells\n            const cellVerts = c.vertices;\n            const cellAdj = c.adjacent;\n            const indexOfN = cellVerts.indexOf(n);\n            if (indexOfN < 0) continue;\n\n            for (let i = 0; i <= 4; ++i) {\n                if (i === indexOfN) continue;\n\n                //For each boundary neighbor of the cell\n                const neighbor = cellAdj[i];\n                if (!neighbor.boundary || neighbor.lastVisited >= n) continue;\n\n                const nv = neighbor.vertices;\n\n                //Test if neighbor is a peak\n                if (neighbor.lastVisited !== -n) {\n                    //Compute orientation of p relative to each boundary peak\n                    let indexOfNeg1 = 0;\n                    for (let j = 0; j <= 4; ++j) {\n                        if (nv[j] < 0) {\n                            indexOfNeg1 = j;\n                            tuple[j] = point;\n                        } else tuple[j] = verts[nv[j]];\n                    }\n                    const o = this.orient();\n\n                    //Test if neighbor cell is also a peak\n                    if (o > 0) {\n                        nv[indexOfNeg1] = n;\n                        neighbor.boundary = false;\n                        interior.push(neighbor);\n                        tovisit.push(neighbor);\n                        neighbor.lastVisited = n;\n                        continue;\n                    }\n                    neighbor.lastVisited = -n;\n                }\n\n                const na = neighbor.adjacent;\n\n                //Otherwise, replace neighbor with new face\n                const vverts = cellVerts.slice();\n                const vadj = cellAdj.slice();\n                const ncell = new Simplex(vverts, vadj, true);\n                simplices.push(ncell);\n\n                //Connect to neighbor\n                const opposite = na.indexOf(c);\n                if (opposite < 0) continue;\n\n                na[opposite] = ncell;\n                vadj[indexOfN] = neighbor;\n\n                //Connect to cell\n                vverts[i] = -1;\n                vadj[i] = c;\n                cellAdj[i] = ncell;\n\n                //Flip facet\n                ncell.flip();\n\n                //Add to glue list\n                for (let j = 0; j <= 4; ++j) {\n                    const uu = vverts[j];\n                    if (uu < 0 || uu === n) continue;\n                    const nface = new Array(3);\n                    let nptr = 0;\n                    for (let k = 0; k <= 4; ++k) {\n                        const vv = vverts[k];\n                        if (vv < 0 || k === j) continue;\n                        nface[nptr++] = vv;\n                    }\n                    glueFacets.push(new GlueFacet(nface, ncell, j));\n                }\n            }\n        }\n\n        //Glue boundary facets together\n        glueFacets.sort((a, b) => compareCells(a.vertices, b.vertices));\n\n        for (let i = 0; i + 1 < glueFacets.length; i += 2) {\n            const a = glueFacets[i];\n            const b = glueFacets[i + 1];\n            const ai = a.index;\n            const bi = b.index;\n            if (ai < 0 || bi < 0) continue;\n            a.cell.adjacent[a.index] = b.cell;\n            b.cell.adjacent[b.index] = a.cell;\n        }\n    }\n    insert(point: number[]) {\n        //Add point\n        const verts = this.vertices;\n        verts.push(point);\n\n        let cell = this.walk(point);\n        if (!cell) return;\n\n        //Alias local properties\n        const tuple = this.tuple;\n\n        //Degenerate case: If point is coplanar to cell, then walk until we find a non-degenerate boundary\n        for (let i = 0; i <= 4; ++i) {\n            const vv = cell.vertices[i];\n            if (vv < 0) tuple[i] = point;\n            else tuple[i] = verts[vv];\n        }\n        const o = this.orient();\n        if (o < 0) return;\n        if (o === 0) {\n            const c = this.handleBoundaryDegeneracy(cell, point);\n            if (!c) return;\n            cell = c;\n        }\n\n        //Add peaks\n        this.addPeaks(point, cell);\n    }\n    boundary() {\n        const d = 4;\n        const boundary = [];\n        const cells = this.simplices;\n        const nc = cells.length;\n        for (let i = 0; i < nc; ++i) {\n            const c = cells[i];\n            if (c.boundary) {\n                const bcell = new Array(d);\n                const cv = c.vertices;\n                let ptr = 0;\n                let parity = 0;\n                for (let j = 0; j <= d; ++j) {\n                    if (cv[j] >= 0) {\n                        bcell[ptr++] = cv[j];\n                    } else {\n                        parity = j && 1;\n                    }\n                }\n                if (parity === (d && 1)) {\n                    const t = bcell[0];\n                    bcell[0] = bcell[1];\n                    bcell[1] = t;\n                }\n                boundary.push(bcell);\n            }\n        }\n        return boundary;\n    }\n}\n\nconst incrementalConvexHull = (points: number[][]) => {\n    const n = points.length;\n    if (n === 0) {\n        throw new Error(\"Must have at least d+1 points\");\n    }\n    const d = points[0].length;\n    if (n <= d) {\n        throw new Error(\"Must input at least d+1 points\");\n    }\n\n    const initialSimplex = points.slice(0, d + 1);\n\n    //Make sure initial simplex is positively oriented\n    const o = orient(initialSimplex);\n    if (o === 0) {\n        throw new Error(\"Input not in general position\");\n    }\n    const initialCoords = new Array(d + 1);\n    for (let i = 0; i <= d; ++i) {\n        initialCoords[i] = i;\n    }\n    if (o < 0) {\n        initialCoords[0] = 1;\n        initialCoords[1] = 0;\n    }\n\n    //Create initial topological index, glue pointers together (kind of messy)\n    const initialCell = new Simplex(initialCoords, new Array(d + 1), false);\n    const boundary = initialCell.adjacent;\n    const list = new Array(d + 2);\n    for (let i = 0; i <= d; ++i) {\n        const verts = initialCoords.slice();\n        for (let j = 0; j <= d; ++j) {\n            if (j === i) verts[j] = -1;\n        }\n        const t = verts[0];\n        verts[0] = verts[1];\n        verts[1] = t;\n        const cell = new Simplex(verts, new Array(d + 1), true);\n        boundary[i] = cell;\n        list[i] = cell;\n    }\n    list[d + 1] = initialCell;\n    for (let i = 0; i <= d; ++i) {\n        const verts = boundary[i].vertices;\n        const adj = boundary[i].adjacent;\n        for (let j = 0; j <= d; ++j) {\n            const v = verts[j];\n            if (v < 0) {\n                adj[j] = initialCell;\n                continue;\n            }\n            for (let k = 0; k <= d; ++k) {\n                if (boundary[k].vertices.indexOf(v) < 0) {\n                    adj[j] = boundary[k];\n                }\n            }\n        }\n    }\n\n    //Initialize triangles\n    const triangles = new Triangulation(initialSimplex, list);\n\n    //Insert remaining points\n    for (let i = d + 1; i < n; ++i) {\n        triangles.insert(points[i]);\n    }\n\n    //Extract boundary cells\n    return triangles.boundary();\n};\n\nclass LiftedPoint {\n    point: number[];\n    index: number;\n    constructor(p: number[], i: number) {\n        this.point = p;\n        this.index = i;\n    }\n}\n\nconst triangulate = (points: number[][]) => {\n    let n = points.length;\n    if (n === 0) return [];\n\n    //Lift points, sort\n    const lifted = new Array(n);\n    let upper = 1.0;\n    for (let i = 0; i < n; ++i) {\n        const p = points[i];\n        const x = new Array(3 + 1);\n        let l = 0.0;\n        for (let j = 0; j < 3; ++j) {\n            const v = p[j];\n            x[j] = v;\n            l += v * v;\n        }\n        x[3] = l;\n        lifted[i] = new LiftedPoint(x, i);\n        upper = Math.max(l, upper);\n    }\n    lifted.sort((a, b) => {\n        for (let i = 0; i < 5; ++i) {\n            const s = b.point[i] - a.point[i];\n            if (s) return s;\n        }\n        return 0;\n    });\n\n    //Double points\n    n = lifted.length;\n\n    //Create new list of points\n    const dpoints = new Array(n + 3 + 1);\n    const dindex = new Array(n + 3 + 1);\n\n    //Add steiner points at top\n    const u = (3 + 1) * (3 + 1) * upper;\n    const y = new Array(3 + 1);\n    for (let i = 0; i <= 3; ++i) {\n        y[i] = 0.0;\n    }\n    y[3] = u;\n\n    dpoints[0] = y.slice();\n    dindex[0] = -1;\n\n    for (let i = 0; i <= 3; ++i) {\n        const x = y.slice();\n        x[i] = 1;\n        dpoints[i + 1] = x;\n        dindex[i + 1] = -1;\n    }\n\n    //Copy rest of the points over\n    for (let i = 0; i < n; ++i) {\n        const h = lifted[i];\n        dpoints[i + 3 + 1] = h.point;\n        dindex[i + 3 + 1] = h.index;\n    }\n\n    //Construct convex hull\n    let hull = incrementalConvexHull(dpoints);\n    hull = hull.filter(cell => {\n        for (let i = 0; i <= 3; ++i) {\n            const v = dindex[cell[i]];\n            if (v < 0) {\n                return false;\n            }\n            cell[i] = v;\n        }\n        return true;\n    });\n\n    for (let i = 0; i < hull.length; ++i) {\n        const h = hull[i];\n        const x = h[0];\n        h[0] = h[1];\n        h[1] = x;\n    }\n\n    return hull;\n};\n\ntype Connection = {\n    [key: number]: boolean;\n};\n\nexport default (points: number[][]): number[][] => {\n    const tri = triangulate(points);\n    const connections: Connection[] = points.map(() => ({}));\n    tri.forEach(t => {\n        for (let i = 0; i < 4; ++i) {\n            for (let j = i + 1; j < 4; ++j) {\n                connections[t[i]][t[j]] = true;\n                connections[t[j]][t[i]] = true;\n            }\n        }\n    });\n    return connections.map(con => Object.keys(con).map(key => Number(key)));\n};\n","import * as Bot from \"./Bot\";\nimport * as Mat3 from \"./Mat3\";\nimport * as Vec3 from \"./Vec3\";\n\nimport { SparseSymmetric, ldiv } from \"./conjugateGradientSparse\";\n\nimport Prando from \"prando\";\nimport delaunay from \"./delaunay\";\nimport { outerProduct } from \"./utils\";\n\nexport type World = { bots: Bot.Bot[] };\n\nexport const newWorld = (): World => ({ bots: [] });\n\nexport const clone = (world: World): World => ({ bots: world.bots.map(bot => Bot.clone(bot)) });\n\nconst edgeStrength = (offset: number, slack: number, d: number): number => {\n    if (d < offset - slack / 2) return 1;\n    if (d > offset + slack / 2) return 0;\n    return (2 * (d + slack - offset) * (offset + slack / 2 - d) ** 2) / slack ** 3;\n};\n\nconst edgeStrengthGround = (offset: number, slack: number, d: number): number => edgeStrength(offset, slack, d) + 1e-4;\n\nconst stiffness = (offset: number, slack: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const l = Vec3.length(d);\n    const s = Vec3.multiplyScalar(d, Math.sqrt(edgeStrength(offset, slack, l)) / l);\n    return outerProduct(s, s);\n};\n\nconst stiffnessGround = (offset: number, slack: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const result = outerProduct(d, d);\n    Mat3.multiplyScalar(result, edgeStrengthGround(offset, slack, Vec3.length(d)) / Vec3.dot(d, d));\n    return result;\n};\n\nconst stiffnessDerivative = (offset: number, slack: number, dim: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const epsilon = 0.00001;\n    const val = d[dim];\n    const dPlus = Vec3.clone(d);\n    dPlus[dim] = val + epsilon;\n    const dMinus = Vec3.clone(d);\n    dMinus[dim] = val - epsilon;\n    const plus = stiffness(offset, slack, dPlus);\n    const minus = stiffness(offset, slack, dMinus);\n    Mat3.sub(plus, minus);\n    Mat3.multiplyScalar(plus, 1 / (2 * epsilon));\n    return plus;\n};\n\nconst stiffnessPair = (offset: number, slack: number, a: Bot.Bot, b: Bot.Bot): Mat3.Mat3 => {\n    const d = Vec3.sub(b.pos, a.pos);\n    return stiffness(offset, slack, d);\n};\n\nconst stiffnessPairDerivative = (offset: number, slack: number, a: Bot.Bot, dim: number, b: Bot.Bot): Mat3.Mat3 =>\n    stiffnessDerivative(offset, slack, dim, Vec3.sub(a.pos, b.pos));\n\nconst stiffnessMatrix = (\n    offset: number,\n    slack: number,\n    friction: number,\n    world: World,\n    neigh: number[][]\n): SparseSymmetric => {\n    const result: SparseSymmetric = [...Array(world.bots.length * 3)].map(() => []);\n    for (let i = 0; i < world.bots.length; ++i) {\n        const sx = stiffnessGround(offset, slack, Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n        const sy = stiffnessGround(offset, slack, Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n        const sz = stiffnessGround(offset, slack, Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n        for (let k = 0; k < 3; ++k) {\n            for (let l = k; l < 3; ++l) {\n                result[3 * i + k].push([3 * i + l, (sx[k][l] + sz[k][l]) * friction + sy[k][l]]);\n            }\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        neigh[i].forEach(j => {\n            const s = stiffnessPair(offset, slack, world.bots[i], world.bots[j]);\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k].push([3 * j + l, -s[k][l]]);\n                    if (k > l) continue;\n                    result[3 * i + k][l - k][1] += s[k][l];\n                    result[3 * j + k][l - k][1] += s[k][l];\n                }\n            }\n        });\n    }\n    return result;\n};\n\nconst forceMatrix = (before: World, after: World, dt: number, g: number, m: number, world: World): number[] => {\n    const result = [...Array(world.bots.length * 3)].map(() => 0);\n    world.bots.forEach((_, i) => {\n        for (let j = 0; j < 3; ++j) {\n            const v1 = (world.bots[i].pos[j] - before.bots[i].pos[j]) / dt;\n            const v2 = (after.bots[i].pos[j] - world.bots[i].pos[j]) / dt;\n            const acc = (v2 - v1) / dt;\n            result[3 * i + j] = ((j === 1 ? -1 : 0) - acc) * g * m;\n        }\n    });\n    return result;\n};\n\nexport const displacement = (\n    offset: number,\n    slack: number,\n    friction: number,\n    before: World,\n    after: World,\n    dt: number,\n    g: number,\n    m: number,\n    world: World,\n    neigh: number[][]\n): number[] => {\n    const f = forceMatrix(before, after, dt, g, m, world);\n    const k = stiffnessMatrix(offset, slack, friction, world, neigh);\n    return ldiv(k, f);\n};\n\nexport const neighbors = (neighborRadius: number, world: World, con: number[][], n: number): number[] =>\n    con[n]\n        .filter(i => i > n)\n        .filter(i => {\n            const d = Vec3.dist(world.bots[n].pos, world.bots[i].pos);\n            return d < neighborRadius;\n        });\n\nexport const gradient = (\n    offset: number,\n    slack: number,\n    friction: number,\n    overlapPenalty: number,\n    uBefore: number[],\n    u: number[],\n    uAfter: number[],\n    beforeBefore: World,\n    before: World,\n    after: World,\n    afterAfter: World,\n    dt: number,\n    world: World,\n    neigh: number[][],\n    t: number\n): Vec3.Vec3[] => {\n    const udku = [...Array(world.bots.length)].map(() => [0, 1, 2].map(() => 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const sx = stiffnessDerivative(offset, slack, dim, Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n            Mat3.multiplyScalar(sx, friction);\n            const sy = stiffnessDerivative(offset, slack, dim, Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n            const sz = stiffnessDerivative(offset, slack, dim, Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n            Mat3.multiplyScalar(sz, friction);\n            const vi = Vec3.newVec3(u[3 * i], u[3 * i + 1], u[3 * i + 2]);\n            Mat3.add(sx, sy);\n            Mat3.add(sx, sz);\n            const d = Vec3.dot(vi, Mat3.apply(sx, vi));\n            udku[i][dim] += d;\n            neigh[i].forEach(j => {\n                const s = stiffnessPairDerivative(offset, slack, world.bots[i], dim, world.bots[j]);\n                const vj = Vec3.newVec3(u[3 * j], u[3 * j + 1], u[3 * j + 2]);\n                Vec3.subEq(vj, vi);\n                const svisvj = Mat3.apply(s, vj);\n                const diff = Vec3.dot(vj, svisvj);\n                udku[i][dim] += diff;\n                udku[j][dim] -= diff;\n            });\n        }\n    }\n    const result = [...Array(world.bots.length)].map(() => Vec3.newVec3(0, 0, 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            result[i][dim] =\n                -udku[i][dim] + 2 * ((-uBefore[3 * i + dim] + 2 * u[3 * i + dim] - uAfter[3 * i + dim]) / dt ** 2);\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].pos[1] > 0.5) continue;\n        const l = world.bots[i].pos[1] + 0.5;\n        result[i][1] += 2 * overlapPenalty * (2 * (l - 2));\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        neigh[i].forEach(j => {\n            let d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const l = Vec3.length(d);\n            if (l > 1) return;\n            d = Vec3.multiplyScalar(d, overlapPenalty * ((2 * (l - 2)) / l));\n            Vec3.subEq(result[i], d);\n            Vec3.addEq(result[j], d);\n        });\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        const dest = Bot.interpolate(\n            t,\n            dt,\n            beforeBefore.bots[i].pos,\n            before.bots[i].pos,\n            after.bots[i].pos,\n            afterAfter.bots[i].pos\n        );\n        const d = Vec3.sub(dest, world.bots[i].pos);\n        Vec3.addEq(result[i], Vec3.multiplyScalar(d, -0.1));\n    }\n    return result;\n};\n\nconst rng = new Prando(123);\n\nconst rand = () => Vec3.multiplyScalar(Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5), 0.1);\n\nexport const connections = (positions: Vec3.Vec3[]): number[][] =>\n    delaunay(\n        [...positions, ...positions.map((pos): Vec3.Vec3 => [pos[0], -0.5, pos[2]])].map(pos => Vec3.add(pos, rand()))\n    )\n        .map(con => con.map(c => (c >= positions.length ? -1 : c)))\n        .slice(0, positions.length);\n","type Element<Type> = Type;\n\ntype Compare<Type> = (a: Element<Type>, b: Element<Type>) => number;\n\nclass PriorityQueue<Type> {\n    comparator: Compare<Type>;\n    elements: Element<Type>[];\n    constructor(comparator: Compare<Type>) {\n        this.comparator = comparator;\n        this.elements = [];\n    }\n\n    peek(): Element<Type> | undefined {\n        return this.elements[0];\n    }\n\n    pop(): Element<Type> | undefined {\n        const first = this.peek();\n        if (first === undefined) return undefined;\n        const last = this.elements.pop();\n        if (last === undefined) return undefined;\n        const size = this.size();\n\n        if (size === 0) return first;\n\n        this.elements[0] = last;\n        let current = 0;\n\n        while (current < size) {\n            let largest = current;\n            const left = 2 * current + 1;\n            const right = 2 * current + 2;\n\n            if (left < size && this.compare(left, largest) >= 0) {\n                largest = left;\n            }\n\n            if (right < size && this.compare(right, largest) >= 0) {\n                largest = right;\n            }\n\n            if (largest === current) break;\n\n            this.swap(largest, current);\n            current = largest;\n        }\n\n        return first;\n    }\n\n    push(element: Element<Type>): void {\n        const size = this.elements.push(element);\n        let current = size - 1;\n\n        while (current > 0) {\n            const parent = Math.floor((current - 1) / 2);\n\n            if (this.compare(current, parent) <= 0) break;\n\n            this.swap(parent, current);\n            current = parent;\n        }\n    }\n\n    size(): number {\n        return this.elements.length;\n    }\n\n    compare(a: number, b: number): number {\n        return this.comparator(this.elements[a], this.elements[b]);\n    }\n\n    swap(a: number, b: number): void {\n        const aux = this.elements[a];\n        this.elements[a] = this.elements[b];\n        this.elements[b] = aux;\n    }\n}\n\nexport default PriorityQueue;\n","import { Vec3, add, length, multiplyScalar, sub } from \"./Vec3\";\n\nimport { Bot } from \"./Bot\";\nimport PriorityQueue from \"./PriorityQueue\";\n\nexport type Grid = {\n    [i: number]: {\n        [j: number]: {\n            [k: number]: boolean;\n        };\n    };\n};\n\ntype Cell = {\n    dist: number;\n    distEstimate: number;\n    pos: Vec3;\n    prev: Cell | undefined;\n};\n\ntype Solution = {\n    [i: number]: {\n        [j: number]: {\n            [k: number]: Cell;\n        };\n    };\n};\n\nconst equals = (a: Vec3, b: Vec3): boolean => a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n\nconst backtrack = (c: Cell): Vec3 => {\n    const halfDist = c.dist / 2;\n    let cell: Cell = c;\n    for (; cell.prev !== undefined && cell.prev.dist > halfDist; cell = cell.prev);\n    if (cell.prev === undefined) return cell.pos;\n    const prevCell = cell.prev;\n    const d1 = halfDist - prevCell.dist;\n    const d2 = cell.dist - halfDist;\n    const w = d1 / (d1 + d2);\n    return add(multiplyScalar(prevCell.pos, 1 - w), multiplyScalar(cell.pos, w));\n};\n\nconst round = (v: Vec3): Vec3 => [Math.round(v[0]), Math.round(v[1]), Math.round(v[2])];\n\nconst resolution = 3;\n\nconst midpoint = (grid: Grid, s: Vec3, e: Vec3): Vec3 => {\n    const exactMidpoint = multiplyScalar(add(s, e), 0.5);\n    if (length(sub(e, s)) < 1) return exactMidpoint;\n    const start = round(s);\n    const end = round(e);\n    const checked: Solution = {};\n    const check = new PriorityQueue<Cell>((a: Cell, b: Cell): number => b.distEstimate - a.distEstimate);\n    check.push({ dist: 0, distEstimate: 0, pos: start, prev: undefined });\n    let iter = 0;\n    for (; iter < 10000; ) {\n        const c = check.pop();\n        if (c === undefined) break;\n        const [x, y, z] = c.pos;\n        if (y < 0.5 * resolution) continue;\n        if (((grid[x] || {})[y] || {})[z] === true) continue;\n        if (((checked[x] || {})[y] || {})[z] !== undefined) continue;\n        if (checked[x] === undefined) checked[x] = {};\n        if (checked[x][y] === undefined) checked[x][y] = {};\n        checked[x][y][z] = c;\n        if (equals(c.pos, end)) return backtrack(c);\n        ++iter;\n        for (let i = -1; i <= 1; ++i) {\n            for (let j = -1; j <= 1; ++j) {\n                for (let k = -1; k <= 1; ++k) {\n                    if (i === 0 && j === 0 && k === 0) continue;\n                    const p: Vec3 = [i, j, k];\n                    const pos = add(c.pos, p);\n                    const dist = c.dist + length(p);\n                    check.push({\n                        dist,\n                        distEstimate: dist + length(sub(end, pos)),\n                        pos,\n                        prev: c\n                    });\n                }\n            }\n        }\n    }\n    return exactMidpoint;\n};\n\nexport const botsToGrid = (bots: Bot[]): Grid => {\n    const range = [...Array(2 * resolution + 1)].map((_, i) => (i / resolution - 1) * resolution * 0.5);\n    const result: Grid = {};\n    bots.forEach(bot => {\n        range.forEach(a => {\n            range.forEach(b => {\n                range.forEach(c => {\n                    const [i, j, k] = round(add(multiplyScalar(bot.pos, resolution), [a, b, c]));\n                    if (result[i] === undefined) result[i] = {};\n                    if (result[i][j] === undefined) result[i][j] = {};\n                    result[i][j][k] = true;\n                });\n            });\n        });\n    });\n    return result;\n};\n\nexport default (grid: Grid, start: Vec3, end: Vec3): Vec3 =>\n    multiplyScalar(midpoint(grid, multiplyScalar(start, resolution), multiplyScalar(end, resolution)), 1 / resolution);\n","import { Vec3, addEq, clone, length, multiplyScalar, sub, subEq } from \"./Vec3\";\n\nimport { Bot } from \"./Bot\";\n\ntype Grid = {\n    [i: number]: {\n        [j: number]: {\n            [k: number]: {\n                [l: number]: boolean;\n            };\n        };\n    };\n};\n\nconst equals = (a: Vec3, b: Vec3): boolean => a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n\nconst round = (v: Vec3): Vec3 => [Math.round(v[0]), Math.round(v[1]), Math.round(v[2])];\n\nconst addToGrid = (grid: Grid, pos: Vec3, i: number): void => {\n    const [x, y, z] = round(pos);\n    for (let dx = -1; dx <= 1; ++dx) {\n        for (let dy = -1; dy <= 1; ++dy) {\n            for (let dz = -1; dz <= 1; ++dz) {\n                const a = x + dx;\n                const b = y + dy;\n                const c = z + dz;\n                if (grid[a] === undefined) grid[a] = {};\n                if (grid[a][b] === undefined) grid[a][b] = {};\n                if (grid[a][b][c] === undefined) grid[a][b][c] = [];\n                grid[a][b][c][i] = true;\n            }\n        }\n    }\n};\n\nconst removeFromGrid = (grid: Grid, pos: Vec3, i: number): void => {\n    const [x, y, z] = round(pos);\n    for (let dx = -1; dx <= 1; ++dx) {\n        for (let dy = -1; dy <= 1; ++dy) {\n            for (let dz = -1; dz <= 1; ++dz) {\n                const a = x + dx;\n                const b = y + dy;\n                const c = z + dz;\n                delete grid[a][b][c][i];\n            }\n        }\n    }\n};\n\nexport default (bots: Bot[]): (() => void) => {\n    const prevPos = bots.map(bot => clone(bot.pos));\n    const grid: Grid = {};\n    for (let i = 0; i < bots.length; ++i) {\n        addToGrid(grid, bots[i].pos, i);\n    }\n    return () => {\n        for (let i = 0; i < bots.length; ++i) {\n            if (equals(prevPos[i], bots[i].pos)) continue;\n            removeFromGrid(grid, prevPos[i], i);\n            addToGrid(grid, bots[i].pos, i);\n        }\n        for (let i = 0; i < bots.length; ++i) {\n            const [x, y, z] = round(prevPos[i]);\n            const list = Object.keys(grid[x][y][z]).map(key => Number(key));\n            for (let l = 0; l < list.length; ++l) {\n                const j = list[l];\n                const b = bots[j];\n                if (bots[i] === b) continue;\n                const d = sub(b.pos, bots[i].pos);\n                const dLength = length(d);\n                if (dLength > 1) continue;\n                const n = multiplyScalar(d, (1 - dLength) / dLength / 2);\n                subEq(bots[i].pos, n);\n                addEq(b.pos, n);\n            }\n        }\n    };\n};\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst n = 10;\n\nconst arc = [Vec3.newVec3(0, 0, 0)];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push(Vec3.newVec3(arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0));\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push(Vec3.newVec3(-arc[i][0], arc[i][1], 0));\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nconst s = [\n    ...[...Array(n + 1)].map((_, i) => Vec3.newVec3(i, 0.5, 0)),\n    ...[...Array(n)].map((_, i) => Vec3.newVec3(-i - 1, 0.5, 0))\n];\n\nexport default createExample(\"Arc\", [], s, arc);\n","import { Animation, Vec3, World } from \"../core\";\nimport { Button, List, ListItem } from \"@material-ui/core\";\nimport React, { FC, useEffect, useState } from \"react\";\n\nimport Prando from \"prando\";\nimport update from \"immutability-helper\";\n\nconst rng = new Prando(123);\n\nconst rand = () => Vec3.multiplyScalar(Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5), 2);\n\ntype Props = {\n    worldStart: World.World | undefined;\n    world: World.World | undefined;\n    worldPrev: World.World | undefined;\n    setWorld: (world: World.World) => void;\n    setWorldPrev: (world: World.World) => void;\n    worldEnd: World.World | undefined;\n    config: Animation.Config;\n};\n\nconst Dynamic: FC<Props> = props => {\n    const [pause, setPause] = useState(true);\n    const [path, setPath] = useState<World.World[]>([]);\n\n    const step = () => {\n        if (props.world === undefined || props.worldPrev === undefined || props.worldEnd === undefined) return;\n        if (\n            path.length === 0 ||\n            props.world.bots\n                .map((bot, i) => Vec3.sub(bot.pos, path[0].bots[i].pos))\n                .map(v => Vec3.dot(v, v))\n                .reduce((sum, value) => sum + value, 0) > 0.00001\n        ) {\n            setPath(\n                Animation.createAnimation(props.worldPrev, props.world, props.worldEnd, props.worldEnd, props.config)\n            );\n            return;\n        }\n        let p = path;\n        if (p.length > 1) p = p.slice(1);\n        props.setWorldPrev(props.world);\n        props.setWorld(p[0]);\n        setPath(p);\n    };\n\n    useEffect(() => {\n        if (pause) return undefined;\n        const i = setInterval(step, 1000 / 30);\n        return () => clearInterval(i);\n    }, [props, pause, path]);\n\n    useEffect(() => {\n        setPause(true);\n        if (props.worldStart === undefined) return;\n        props.setWorld(props.worldStart);\n        setPath([]);\n    }, [props.worldStart]);\n\n    return (\n        <List>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        setPause(!pause);\n                    }}>\n                    paused: {pause ? \"yes\" : \"no\"}\n                </Button>\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        if (props.world === undefined) return;\n                        props.setWorld(\n                            update(props.world, {\n                                bots: {\n                                    $set: props.world.bots.map(bot =>\n                                        update(bot, { pos: { $set: Vec3.add(bot.pos, rand()) } })\n                                    )\n                                }\n                            })\n                        );\n                    }}>\n                    Disturb\n                </Button>\n            </ListItem>\n        </List>\n    );\n};\n\nexport default Dynamic;\n","export default __webpack_public_path__ + \"static/media/grass.75422b3f.jpg\";","export default __webpack_public_path__ + \"static/media/nx.484e0aff.png\";","export default __webpack_public_path__ + \"static/media/ny.6a6662a7.png\";","export default __webpack_public_path__ + \"static/media/nz.ed736547.png\";","export default __webpack_public_path__ + \"static/media/px.c6e24cee.png\";","export default __webpack_public_path__ + \"static/media/py.a67deb40.png\";","export default __webpack_public_path__ + \"static/media/pz.39034444.png\";","import * as Vec3 from \"../core/Vec3\";\n\nimport {\n    AmbientLight,\n    BackSide,\n    BoxGeometry,\n    BufferGeometry,\n    Color,\n    DirectionalLight,\n    Mesh,\n    MeshBasicMaterial,\n    MeshPhongMaterial,\n    PlaneBufferGeometry,\n    RepeatWrapping,\n    Scene,\n    SphereGeometry,\n    TextureLoader\n} from \"three\";\n\nimport grass from \"../assets/grass.jpg\";\nimport nx from \"../assets/skyboxes/nx.png\";\nimport ny from \"../assets/skyboxes/ny.png\";\nimport nz from \"../assets/skyboxes/nz.png\";\nimport px from \"../assets/skyboxes/px.png\";\nimport py from \"../assets/skyboxes/py.png\";\nimport pz from \"../assets/skyboxes/pz.png\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n\n    const geo = new PlaneBufferGeometry(2000, 2000, 8, 8);\n    const textureGrass = new TextureLoader().load(grass);\n    textureGrass.wrapS = RepeatWrapping;\n    textureGrass.wrapT = RepeatWrapping;\n    textureGrass.repeat.set(100, 100);\n    const mat = new MeshPhongMaterial({ map: textureGrass });\n    const plane = new Mesh(geo, mat);\n    plane.rotateX(-Math.PI / 2);\n    plane.castShadow = false;\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(10, 50, 10);\n    light.castShadow = true;\n    light.shadowCameraRight = 50;\n    light.shadowCameraLeft = -50;\n    light.shadowCameraTop = 50;\n    light.shadowCameraBottom = -50;\n    light.shadowMapWidth = 1024;\n    light.shadowMapHeight = 1024;\n    scene.add(light);\n\n    const materialArray = [px, nx, py, ny, pz, nz]\n        .map(t => new TextureLoader().load(t))\n        .map(t => new MeshBasicMaterial({ map: t, fog: false, side: BackSide }));\n    const skyboxGeo = new BoxGeometry(1000, 1000, 1000);\n    const skybox = new Mesh(skyboxGeo, materialArray);\n    scene.add(skybox);\n\n    return scene;\n};\n\nexport const newSphere = (pos: Vec3.Vec3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color }));\n    mesh.geometry = bg;\n    mesh.position.set(...pos);\n    mesh.scale.set(0.5, 0.5, 0.5);\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n    return mesh;\n};\n","import { PCFSoftShadowMap, PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { useWindowSize } from \"@react-hook/window-size\";\n\ntype Props = { scene: Scene };\n\nconst Canvas: FC<Props> = props => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return undefined;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#87ceeb\");\n        ren.setSize(width, height);\n        ren.shadowMapEnabled = true;\n        ren.shadowMapType = PCFSoftShadowMap;\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n\n        return () => {\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (!controls || !renderer || !camera || !props.scene) return undefined;\n        const i = window.setInterval(() => {\n            controls.update();\n            renderer.render(props.scene, camera);\n        }, 1000 / 30);\n        return () => {\n            window.clearInterval(i);\n        };\n    }, [controls, renderer, camera, props.scene]);\n\n    return <div ref={mount} />;\n};\n\nexport default Canvas;\n","import { Color, Mesh } from \"three\";\nimport React, { FC, useEffect, useState } from \"react\";\nimport { newScene, newSphere } from \"./draw\";\n\nimport Canvas from \"./Canvas\";\nimport { World } from \"../core\";\n\ntype Props = {\n    worldStart: World.World | undefined;\n    world: World.World | undefined;\n};\n\nconst Scene: FC<Props> = props => {\n    const [scene, setScene] = useState(newScene());\n    const [botMeshes, setBotMeshes] = useState<Mesh[]>([]);\n\n    useEffect(() => {\n        const w = props.world;\n        if (w === undefined) return;\n        if (botMeshes.length !== w.bots.length) return;\n        w.bots.forEach((bot, i) => {\n            botMeshes[i].position.set(...bot.pos);\n        });\n    }, [props.world, botMeshes]);\n\n    useEffect(() => {\n        const w = props.worldStart;\n        if (w === undefined) return;\n        setBotMeshes(w.bots.map(bot => newSphere(bot.pos, new Color(bot.fixed ? \"#808080\" : \"#fa8072\"))));\n    }, [props.worldStart]);\n\n    useEffect(() => {\n        const scn = newScene();\n        botMeshes.forEach(mesh => scn.add(mesh));\n        setScene(scn);\n    }, [botMeshes]);\n\n    return <Canvas scene={scene} />;\n};\n\nexport default Scene;\n","import { Bot, Vec3, World } from \"../../core\";\n\nexport type Example = {\n    title: string;\n    start: World.World;\n    end: World.World;\n};\n\nconst createBots = (coords: Vec3.Vec3[], fixed: boolean): Bot.Bot[] =>\n    coords.map(\n        (pos): Bot.Bot => ({\n            pos,\n            fixed\n        })\n    );\n\nconst createWorld = (bots: Bot.Bot[]): World.World => ({ bots });\n\nexport const coordsToWorld = (coords: Vec3.Vec3[], fixed: boolean): World.World =>\n    createWorld(createBots(coords, fixed));\n\nexport const createExample = (title: string, fixed: Vec3.Vec3[], start: Vec3.Vec3[], end: Vec3.Vec3[]): Example => {\n    const fixedBots = createBots(fixed, true);\n    const startBots = createBots(start, false);\n    const endBots = createBots(end, false);\n    return {\n        title,\n        start: createWorld([...fixedBots, ...startBots]),\n        end: createWorld([...fixedBots, ...endBots])\n    };\n};\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst n = 20;\n\nconst arc = [Vec3.newVec3(0, 0, 0)];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push(Vec3.newVec3(arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0));\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push(Vec3.newVec3(-arc[i][0], arc[i][1], 0));\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nconst s = [\n    ...[...Array(n + 1)].map((_, i) => Vec3.newVec3(i + 15, 0.5, 0)),\n    ...[...Array(n)].map((_, i) => Vec3.newVec3(-i - 1 - 15, 0.5, 0))\n];\n\nexport default createExample(\"Big arc\", [], s, arc);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst r = 10;\nconst h1 = 7;\nconst h2 = 12;\n\nconst pillar = (pos: Vec3.Vec3, height: number): Vec3.Vec3[] =>\n    [...Array(height)].map((_, i) => Vec3.add(pos, [0, i, 0]));\n\nconst bar = (pos: Vec3.Vec3, width: number): Vec3.Vec3[] => [...Array(width)].map((_, i) => Vec3.add(pos, [i, 0, 0]));\n\nconst barZ = (pos: Vec3.Vec3, width: number): Vec3.Vec3[] => [...Array(width)].map((_, i) => Vec3.add(pos, [0, 0, i]));\n\nconst platform = (pos: Vec3.Vec3, w: number, h: number): Vec3.Vec3[] => [\n    ...pillar(Vec3.add(pos, [-w, 0, 0]), h),\n    ...pillar(Vec3.add(pos, [w, 0, 0]), h),\n    ...bar(Vec3.add(pos, [-w + 1, h - 1, 0]), 2 * w - 1)\n];\n\nconst platformZ = (pos: Vec3.Vec3, w: number, h: number): Vec3.Vec3[] => [\n    ...pillar(Vec3.add(pos, [0, 0, -w]), h),\n    ...pillar(Vec3.add(pos, [0, 0, w]), h),\n    ...barZ(Vec3.add(pos, [0, h - 1, -w + 1]), w - 1),\n    ...barZ(Vec3.add(pos, [0, h - 1, 1]), w - 1)\n];\n\nconst f: Vec3.Vec3[] = [\n    ...platform([-r, 0.5, 0], 1, h1),\n    ...platform([r, 0.5, 0], 1, h1),\n    ...platform([0, h1 + 0.5, 0], r + 1, h2 - h1),\n    ...platformZ([0, 0.5, 0], 2, h2)\n];\n\nconst s: Vec3.Vec3[] = pillar([-r, h1 + 0.5, 0], h2 - h1 - 2);\nconst e: Vec3.Vec3[] = pillar([r, h1 + 0.5, 0], h2 - h1 - 2);\n\nexport default createExample(\"Brachiation\", f, s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s = [...Array(8)].map((_, i) => [...Array(8)].map((_, j) => Vec3.newVec3(i - 3.5, 0.5, j - 3.5))).flat();\nconst e = [...Array(4)]\n    .map((_, i) => [...Array(4)].map((_, j) => [...Array(4)].map((_, k) => Vec3.newVec3(i - 1.5, k + 0.5, j - 1.5))))\n    .flat()\n    .flat();\n\nexport default createExample(\"Big cube\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [1, 0.5, 0],\n    [0, 0.5, 0],\n    [-1, 0.5, 0],\n    [0, 1.5, 0],\n    [0, 2.5, 0],\n    [0, 3.5, 0],\n    [1, 3.5, 0],\n    [2, 3.5, 0],\n    [3, 3.5, 0],\n    [3, 0.5, 0]\n];\nconst e: Vec3.Vec3[] = [\n    [1, 0.5, 0],\n    [0, 0.5, 0],\n    [-1, 0.5, 0],\n    [0, 1.5, 0],\n    [0, 2.5, 0],\n    [0, 3.5, 0],\n    [1, 3.5, 0],\n    [2, 3.5, 0],\n    [3, 3.5, 0],\n    [3, 2.5, 0]\n];\n\nexport default createExample(\"Crane\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [-1.5, 0.5, -1.5],\n    [-0.5, 0.5, -1.5],\n    [0.5, 0.5, -1.5],\n    [1.5, 0.5, -1.5],\n    [-1.5, 0.5, -0.5],\n    [-0.5, 0.5, -0.5],\n    [0.5, 0.5, -0.5],\n    [1.5, 0.5, -0.5],\n    [-1.5, 0.5, 0.5],\n    [-0.5, 0.5, 0.5],\n    [0.5, 0.5, 0.5],\n    [1.5, 0.5, 0.5],\n    [-1.5, 0.5, 1.5],\n    [-0.5, 0.5, 1.5],\n    [0.5, 0.5, 1.5],\n    [1.5, 0.5, 1.5]\n];\n\nconst e: Vec3.Vec3[] = [\n    [-0.5, 0.5, -0.5],\n    [0.5, 0.5, -0.5],\n    [0.5, 0.5, 0.5],\n    [-0.5, 0.5, 0.5],\n    [-0.5, 1.5, -0.5],\n    [0.5, 1.5, -0.5],\n    [0.5, 1.5, 0.5],\n    [-0.5, 1.5, 0.5],\n    [-0.5, 2.5, -0.5],\n    [0.5, 2.5, -0.5],\n    [0.5, 2.5, 0.5],\n    [-0.5, 2.5, 0.5],\n    [-0.5, 3.5, -0.5],\n    [0.5, 3.5, -0.5],\n    [0.5, 3.5, 0.5],\n    [-0.5, 3.5, 0.5]\n];\n\nexport default createExample(\"Cube\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst r = 6;\nconst h = 3;\nconst w = 2;\n\nconst floor = () =>\n    [...Array(2 * r + 1)]\n        .map((_, i) => [...Array(2 * r + 1)].map((_, j): [number, number, number] => [i - r, 0.5, j - r]))\n        .flat()\n        .filter(p => Math.abs(p[0] + p[2]) < w);\n\nconst s: Vec3.Vec3[] = [\n    ...floor(),\n    ...[...Array(h)].map((_, i): [number, number, number] => [-r, i + 1.5, r]),\n    ...[...Array(h)].map((_, i): [number, number, number] => [r, i + 1.5, -r]),\n    [-r, h + 1.5, r]\n];\n\nconst e: Vec3.Vec3[] = [\n    ...floor(),\n    ...[...Array(h)].map((_, i): [number, number, number] => [-r, i + 1.5, r]),\n    ...[...Array(h)].map((_, i): [number, number, number] => [r, i + 1.5, -r]),\n    [r, h + 1.5, -r]\n];\n\nexport default createExample(\"Floor transport\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst r = 1;\nconst d = 5;\n\nconst frame = (pos: Vec3.Vec3) =>\n    [...Array(2 * r + 1)]\n        .map((_, i) =>\n            [...Array(2 * r + 1)].map((_, j) =>\n                [...Array(2 * r + 1)].map((_, k): [number, number, number] => [i - r, j - r, k - r])\n            )\n        )\n        .flat()\n        .flat()\n        .filter(\n            p => (Math.abs(p[0]) === r ? 1 : 0) + (Math.abs(p[1]) === r ? 1 : 0) + (Math.abs(p[2]) === r ? 1 : 0) >= 2\n        )\n        .map(p => Vec3.newVec3(p[0], p[1] + 0.5 + r, p[2]))\n        .map(p => Vec3.add(p, pos));\n\nconst s: Vec3.Vec3[] = [\n    ...frame([0, 0, d]),\n    ...frame([0, 2 * r + 1, d]),\n    ...frame([-d, 0, d]),\n    ...frame([d, 0, -d]),\n    ...frame([-d, 2 * r + 1, d])\n];\n\nconst e: Vec3.Vec3[] = [\n    ...frame([0, 0, d]),\n    ...frame([0, 2 * r + 1, d]),\n    ...frame([-d, 0, -d]),\n    ...frame([d, 0, d]),\n    ...frame([d, 2 * r + 1, d])\n];\n\nexport default createExample(\"Frame transport\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst h = 4;\n\nconst pillar = (pos: Vec3.Vec3, height: number): Vec3.Vec3[] =>\n    [...Array(height)].map((_, i) => Vec3.add(pos, [0, i + 0.5, 0]));\n\nconst p = (pos: Vec3.Vec3): Vec3.Vec3[] => {\n    const coords: Vec3.Vec3[] = [\n        [0, 0.5, 1],\n        [0, 0.5, 0],\n        [0, 0.5, -1],\n        [1, 0.5, 1],\n        [1, 0.5, 0],\n        [1, 0.5, -1],\n        [-1, 0.5, 1],\n        [-1, 0.5, 0],\n        [-1, 0.5, -1]\n    ];\n    return coords.map(v => Vec3.add(v, pos));\n};\n\nconst c = (pos: Vec3.Vec3, height: number): Vec3.Vec3[] => [\n    ...pillar(Vec3.add(pos, [1, 0, 1]), height),\n    ...pillar(Vec3.add(pos, [1, 0, -1]), height),\n    ...pillar(Vec3.add(pos, [-1, 0, -1]), height),\n    ...pillar(Vec3.add(pos, [-1, 0, 1]), height)\n];\n\nconst platform = (pos: Vec3.Vec3): Vec3.Vec3[] => [...c(pos, h), ...p(Vec3.add(pos, [0, h, 0]))];\n\nconst f: Vec3.Vec3[] = [...platform([0, 0, 0])];\n\nconst s: Vec3.Vec3[] = pillar([0, 0, 0], h);\nconst e: Vec3.Vec3[] = pillar([0, h + 1, 0], h);\n\nexport default createExample(\"Platform\", f, s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst r = 5;\nconst h = 5;\n\nconst pillar = (pos: Vec3.Vec3, height: number): Vec3.Vec3[] =>\n    [...Array(height)].map((_, i) => Vec3.add(pos, [0, i, 0]));\n\nconst p = (pos: Vec3.Vec3): Vec3.Vec3[] => {\n    const coords: Vec3.Vec3[] = [\n        [0, 0.5, 1],\n        [0, 0.5, 0],\n        [0, 0.5, -1],\n        [1, 0.5, 1],\n        [1, 0.5, 0],\n        [1, 0.5, -1],\n        [-1, 0.5, 1],\n        [-1, 0.5, 0],\n        [-1, 0.5, -1]\n    ];\n    return coords.map(v => Vec3.add(v, pos));\n};\n\nconst c = (pos: Vec3.Vec3): Vec3.Vec3[] => {\n    const coords: Vec3.Vec3[] = [\n        [1, 0.5, 1],\n        [1, 0.5, -1],\n        [-1, 0.5, 1],\n        [-1, 0.5, -1]\n    ];\n    return coords.map(v => Vec3.add(v, pos));\n};\n\nconst platform = (pos: Vec3.Vec3): Vec3.Vec3[] => [\n    ...c(pos),\n    ...c(Vec3.add(pos, [0, 1, 0])),\n    ...p(Vec3.add(pos, [0, 2, 0]))\n];\n\nconst f: Vec3.Vec3[] = [...platform([-r, 0, 0]), ...platform([r, 0, 0])];\n\nconst s: Vec3.Vec3[] = pillar([-r, 3.5, 0], h);\nconst e: Vec3.Vec3[] = pillar([r, 3.5, 0], h);\n\nexport default createExample(\"Platforms\", f, s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst pillar = (pos: Vec3.Vec3) => {\n    const list: Vec3.Vec3[] = [\n        [0, 0, 0],\n        [1, 0, 0],\n        [-1, 0, 0],\n        [0, 0, 1],\n        [0, 0, -1],\n        [0, 1, 0],\n        [0, 2, 0],\n        [0, 3, 0]\n    ];\n    return list.map((p: Vec3.Vec3) => Vec3.add(p, pos));\n};\n\nconst space = 3;\n\nconst s: Vec3.Vec3[] = [\n    ...pillar([space * 2, 0.5, -space * 2]),\n    ...pillar([space, 0.5, -space]),\n    ...pillar([0, 0.5, 0]),\n    ...pillar([-space, 0.5, space]),\n    ...pillar([-space * 2, 0.5, space * 2]),\n    [-space * 2, 4.5, space * 2]\n];\n\nconst e: Vec3.Vec3[] = [\n    ...pillar([space * 2, 0.5, -space * 2]),\n    ...pillar([space, 0.5, -space]),\n    ...pillar([0, 0.5, 0]),\n    ...pillar([-space, 0.5, space]),\n    ...pillar([-space * 2, 0.5, space * 2]),\n    [space * 2, 4.5, -space * 2]\n];\n\nexport default createExample(\"Transport\", [], s, e);\n","import { Example as ExampleType } from \"./utils\";\nimport { World } from \"../core\";\nimport arc from \"./arc\";\nimport bigArc from \"./bigArc\";\nimport bigCube from \"./bigCube\";\nimport brachiation from \"./brachiation\";\nimport crane from \"./crane\";\nimport cube from \"./cube\";\nimport floorTransport from \"./floorTransport\";\nimport frameTransport from \"./frameTransport\";\nimport platform from \"./platform\";\nimport platforms from \"./platforms\";\nimport stack from \"./stack\";\nimport towers from \"./towers\";\nimport transformer from \"./transformer\";\nimport transport from \"./transport\";\nimport verticalTransport from \"./verticalTransport\";\nimport wall from \"./wall\";\nexport type Example = ExampleType;\n\nexport const examples = [\n    arc,\n    bigArc,\n    bigCube,\n    brachiation,\n    crane,\n    cube,\n    floorTransport,\n    frameTransport,\n    platform,\n    platforms,\n    stack,\n    towers,\n    transformer,\n    transport,\n    verticalTransport,\n    wall\n].sort((a, b) => {\n    const d = a.start.bots.length - b.start.bots.length;\n    if (d === 0) return a.title > b.title ? 1 : -1;\n    return d;\n});\n\nexport default (example: Example): [World.World, World.World] => [World.clone(example.start), World.clone(example.end)];\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s = [...[...Array(5)].map((_, i): Vec3.Vec3 => [i, 0.5, 0])];\n\nconst e = [...[...Array(5)].map((_, i): Vec3.Vec3 => [0, 0.5 + i, 0])];\n\nexport default createExample(\"Stack\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [2, 0.5, 0],\n    [2, 1.5, 0],\n    [2, 2.5, 0],\n    [2, 3.5, 0],\n    [2, 4.5, 0],\n    [-2, 0.5, 0],\n    [-2, 1.5, 0],\n    [-2, 2.5, 0],\n    [-2, 3.5, 0],\n    [-2, 4.5, 0],\n    [2, 5.5, 0]\n];\nconst e: Vec3.Vec3[] = [\n    [2, 0.5, 0],\n    [2, 1.5, 0],\n    [2, 2.5, 0],\n    [2, 3.5, 0],\n    [2, 4.5, 0],\n    [-2, 0.5, 0],\n    [-2, 1.5, 0],\n    [-2, 2.5, 0],\n    [-2, 3.5, 0],\n    [-2, 4.5, 0],\n    [-2, 5.5, 0]\n];\n\nexport default createExample(\"Towers\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [0, 0.5, 1],\n    [0, 0.5, -1],\n\n    [0, 1.5, 1],\n    [0, 1.5, 0],\n    [0, 1.5, -1],\n\n    [1, 1.5, 1],\n    [1, 1.5, 0],\n    [1, 1.5, -1],\n\n    [2, 1.5, 1],\n    [2, 1.5, 0],\n    [2, 1.5, -1],\n\n    [3, 1.5, 1],\n    [3, 1.5, 0],\n    [3, 1.5, -1],\n\n    [3, 0.5, 1],\n    [3, 0.5, -1]\n];\n\nconst e: Vec3.Vec3[] = [\n    [0, 0.5, 1],\n    [0, 0.5, -1],\n\n    [0, 1.5, 0.8],\n    [0, 3.5, 0],\n    [0, 1.5, -0.8],\n\n    [0, 2.5, 0.6],\n    [0, 4.5, 0],\n    [0, 2.5, -0.6],\n\n    [0, 5.5, 1],\n    [0, 5.5, 0],\n    [0, 5.5, -1],\n\n    [0, 4.7, 1.6],\n    [0, 6.5, 0],\n    [0, 4.7, -1.6],\n\n    [0, 3.7, 2],\n    [0, 3.7, -2]\n];\n\nexport default createExample(\"Transformer\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [-3, 0.5, 0],\n    [-3, 1.5, 0],\n    [-3, 2.5, 0],\n    [-2, 2.5, 0],\n    [-1, 2.5, 0],\n    [-3, 3.5, 0],\n    [-3, 4.5, 0],\n    [-3, 5.5, 0],\n    [-3, 6.5, 0],\n    [-2, 6.5, 0],\n    [-1, 6.5, 0],\n    [-3, 7.5, 0],\n    [-3, 8.5, 0],\n    [-3, 9.5, 0],\n    [-3, 10.5, 0],\n    [-2, 10.5, 0],\n    [-1, 10.5, 0],\n\n    [3, 0.5, 0],\n    [3, 1.5, 0],\n    [3, 2.5, 0],\n    [3, 3.5, 0],\n    [3, 4.5, 0],\n    [2, 4.5, 0],\n    [1, 4.5, 0],\n    [3, 5.5, 0],\n    [3, 6.5, 0],\n    [3, 7.5, 0],\n    [3, 8.5, 0],\n    [2, 8.5, 0],\n    [1, 8.5, 0],\n    [3, 9.5, 0],\n    [3, 10.5, 0],\n    [3, 11.5, 0],\n    [3, 12.5, 0],\n    [3, 13.5, 0],\n    [2, 13.5, 0],\n    [1, 13.5, 0],\n    [0, 13.5, 0],\n    [-1, 13.5, 0],\n    [-2, 13.5, 0],\n    [-3, 13.5, 0],\n    [-3, 12.5, 0],\n    [-3, 11.5, 0],\n\n    [0, 0.5, 0]\n];\n\nconst e: Vec3.Vec3[] = [\n    [-3, 0.5, 0],\n    [-3, 1.5, 0],\n    [-3, 2.5, 0],\n    [-2, 2.5, 0],\n    [-1, 2.5, 0],\n    [-3, 3.5, 0],\n    [-3, 4.5, 0],\n    [-3, 5.5, 0],\n    [-3, 6.5, 0],\n    [-2, 6.5, 0],\n    [-1, 6.5, 0],\n    [-3, 7.5, 0],\n    [-3, 8.5, 0],\n    [-3, 9.5, 0],\n    [-3, 10.5, 0],\n    [-2, 10.5, 0],\n    [-1, 10.5, 0],\n\n    [3, 0.5, 0],\n    [3, 1.5, 0],\n    [3, 2.5, 0],\n    [3, 3.5, 0],\n    [3, 4.5, 0],\n    [2, 4.5, 0],\n    [1, 4.5, 0],\n    [3, 5.5, 0],\n    [3, 6.5, 0],\n    [3, 7.5, 0],\n    [3, 8.5, 0],\n    [2, 8.5, 0],\n    [1, 8.5, 0],\n    [3, 9.5, 0],\n    [3, 10.5, 0],\n    [3, 11.5, 0],\n    [3, 12.5, 0],\n    [3, 13.5, 0],\n    [2, 13.5, 0],\n    [1, 13.5, 0],\n    [0, 13.5, 0],\n    [-1, 13.5, 0],\n    [-2, 13.5, 0],\n    [-3, 13.5, 0],\n    [-3, 12.5, 0],\n    [-3, 11.5, 0],\n\n    [0, 12.5, 0]\n];\n\nexport default createExample(\"Vertical transport\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst f: Vec3.Vec3[] = [\n    [0, 0.5, 1],\n    [0, 0.5, 0],\n    [0, 0.5, -1],\n    [0, 1.5, 1],\n    [0, 1.5, 0],\n    [0, 1.5, -1],\n    [0, 2.5, 1],\n    [0, 2.5, 0],\n    [0, 2.5, -1]\n];\n\nconst s: Vec3.Vec3[] = [[2, 0.5, 0]];\n\nconst e: Vec3.Vec3[] = [[-2, 0.5, 0]];\n\nexport default createExample(\"Wall\", f, s, e);\n","import React, { FC, useState } from \"react\";\nimport { Vec3, World } from \"../core\";\nimport loadExample, { Example, examples } from \"../examples\";\n\nimport { Button } from \"@material-ui/core\";\nimport Prando from \"prando\";\n\ntype Props = { onSelect: (worldStart: World.World, worldEnd: World.World) => void };\n\nconst SelectExample: FC<Props> = props => {\n    const [selectedExample, setSelectedExample] = useState<number | undefined>(undefined);\n\n    const exampleButton = (example: Example, i: number) => (\n        <Button\n            key={i}\n            variant=\"contained\"\n            color={selectedExample === i ? \"primary\" : \"default\"}\n            onClick={() => {\n                const rng = new Prando(123);\n                const [ws, we] = loadExample(example);\n                console.log(ws, we);\n                const rand = () =>\n                    Vec3.multiplyScalar(Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5), 0.1);\n                ws.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                we.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                props.onSelect(ws, we);\n                setSelectedExample(i);\n            }}>\n            {example.title} ({example.start.bots.length} bots)\n        </Button>\n    );\n\n    const examplesNoFixed = examples.filter(e => !e.start.bots.some(bot => bot.fixed));\n\n    const examplesFixed = examples.filter(e => e.start.bots.some(bot => bot.fixed));\n\n    return (\n        <>\n            <b>Select an example</b>\n            <br />\n            <br />\n            No obstacles\n            <br />\n            <br />\n            {examplesNoFixed.map(exampleButton)}\n            <br />\n            <br />\n            Obstacles\n            <br />\n            <br />\n            {examplesFixed.map((e, i) => exampleButton(e, i + examplesNoFixed.length))}\n        </>\n    );\n};\n\nexport default SelectExample;\n","import { Animation, World } from \"../core\";\nimport { Button, List, ListItem } from \"@material-ui/core\";\nimport React, { FC, useEffect, useState } from \"react\";\n\ntype Props = {\n    worldStart: World.World | undefined;\n    worldEnd: World.World | undefined;\n    setWorld: (world: World.World) => void;\n    config: Animation.Config;\n};\n\nconst Static: FC<Props> = props => {\n    const [time, setTime] = useState(0);\n    const [pause, setPause] = useState(true);\n    const [animation, setAnimation] = useState<World.World[]>([]);\n\n    useEffect(() => {\n        if (animation.length === 0) return;\n        const pauseFrac = 0.1;\n        const pauseFrames = Math.round(pauseFrac * animation.length);\n        let t = time % (2 * (animation.length + pauseFrames));\n        if (t < pauseFrames) {\n            props.setWorld(animation[0]);\n            return;\n        }\n        t -= pauseFrames;\n        if (t < animation.length) {\n            props.setWorld(animation[t]);\n            return;\n        }\n        t -= animation.length;\n        if (t < pauseFrames) {\n            props.setWorld(animation[animation.length - 1]);\n            return;\n        }\n        t -= pauseFrames;\n        props.setWorld(animation[animation.length - 1 - t]);\n    }, [animation, time]);\n\n    useEffect(() => {\n        if (pause) return undefined;\n        const i = setInterval(() => setTime(t => t + 1), 1000 / 30);\n        return () => clearInterval(i);\n    }, [pause]);\n\n    useEffect(() => {\n        setPause(true);\n        if (props.worldStart === undefined) return;\n        props.setWorld(props.worldStart);\n    }, [props.worldStart]);\n\n    return (\n        <List>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        if (props.worldStart === undefined || props.worldEnd === undefined) return;\n                        const t = Date.now();\n                        setAnimation(\n                            Animation.createAnimation(\n                                props.worldStart,\n                                props.worldStart,\n                                props.worldEnd,\n                                props.worldEnd,\n                                props.config\n                            )\n                        );\n                        console.log((Date.now() - t) / 1000);\n                        setPause(false);\n                    }}>\n                    Generate animation\n                </Button>\n            </ListItem>\n            <ListItem>\n                <Button variant=\"contained\" onClick={() => setPause(!pause)}>\n                    paused: {pause ? \"yes\" : \"no\"}\n                </Button>\n                {pause && (\n                    <Button variant=\"contained\" onClick={() => setTime(time + 1)}>\n                        Step\n                    </Button>\n                )}\n            </ListItem>\n        </List>\n    );\n};\n\nexport default Static;\n","import { Animation, World } from \"../core\";\nimport {\n    Button,\n    FormControlLabel,\n    Grid,\n    List,\n    ListItem,\n    MenuItem,\n    Select,\n    Switch,\n    TextField,\n    makeStyles\n} from \"@material-ui/core\";\nimport React, { FC, useState } from \"react\";\n\nimport Dynamic from \"./Dynamic\";\nimport Scene from \"./Scene\";\nimport SelectExample from \"./SelectExample\";\nimport Static from \"./Static\";\nimport update from \"immutability-helper\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst saveImage = () => {\n    const canvas = document.getElementsByTagName(\"canvas\")[0];\n    const image = canvas.toDataURL(\"image/png\");\n    const a = document.createElement(\"a\");\n    a.href = image.replace(/^data:image\\/[^;]/u, \"data:application/octet-stream\");\n    a.download = \"image.png\";\n    a.click();\n};\n\nconst App: FC = () => {\n    const classes = useStyles();\n    const [worldStart, setWorldStart] = useState<World.World | undefined>(undefined);\n    const [worldEnd, setWorldEnd] = useState<World.World | undefined>(undefined);\n    const [world, setWorld] = useState<World.World | undefined>(undefined);\n    const [worldPrev, setWorldPrev] = useState<World.World | undefined>(undefined);\n    const [dynamic, setDynamic] = useState(false);\n\n    const [config, setConfig] = useState<Animation.Config>({\n        subdivideIterations: 10,\n        optimizeIterations: 10,\n        contractionType: Animation.ContractionType.Fibers,\n        contractIterations: 10,\n        minimizeAccelerationIterations: 40,\n        offset: 1.5,\n        slack: 2,\n        friction: 0.1,\n        neighborRadius: 2,\n        overlapPenalty: 1000,\n        gravity: 1,\n        botMass: 1,\n        dt: 1\n    });\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <b style={{ fontSize: 20 }}>Microbots</b>\n                        <Grid item className={classes.gridItem}>\n                            <SelectExample\n                                onSelect={(ws: World.World, we: World.World) => {\n                                    setWorldStart(ws);\n                                    setWorldEnd(we);\n                                    setWorld(ws);\n                                    setWorldPrev(ws);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <b>Animation</b>\n                            <br />\n                            <FormControlLabel\n                                control={<Switch checked={dynamic} onChange={e => setDynamic(e.target.checked)} />}\n                                label=\"Dynamic\"\n                            />\n                            {dynamic ? (\n                                <Dynamic\n                                    worldStart={worldStart}\n                                    worldEnd={worldEnd}\n                                    world={world}\n                                    worldPrev={worldPrev}\n                                    setWorld={setWorld}\n                                    setWorldPrev={setWorldPrev}\n                                    config={config}\n                                />\n                            ) : (\n                                <Static\n                                    worldStart={worldStart}\n                                    worldEnd={worldEnd}\n                                    setWorld={setWorld}\n                                    config={config}\n                                />\n                            )}\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <b>Extra options</b>\n                            <List>\n                                {Object.entries(config).map(([key, value]) => (\n                                    <ListItem key={key}>\n                                        {key === \"contractionType\" ? (\n                                            <Select\n                                                value={value}\n                                                onChange={e => {\n                                                    setConfig(\n                                                        update(config, {\n                                                            [key]: { $set: e.target.value as Animation.ContractionType }\n                                                        })\n                                                    );\n                                                }}>\n                                                {Object.entries(Animation.ContractionType)\n                                                    .filter(([k]) => isNaN(Number(k)))\n                                                    .map(([k, v]) => (\n                                                        <MenuItem key={k} value={v}>\n                                                            {k}\n                                                        </MenuItem>\n                                                    ))}\n                                            </Select>\n                                        ) : (\n                                            <TextField\n                                                type=\"number\"\n                                                label={key}\n                                                value={value}\n                                                onChange={e =>\n                                                    setConfig(\n                                                        update(config, {\n                                                            [key]: { $set: Math.max(parseFloat(e.target.value), 0) }\n                                                        })\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    </ListItem>\n                                ))}\n                            </List>\n                            <List>\n                                <ListItem>\n                                    <Button variant=\"contained\" onClick={() => saveImage()}>\n                                        Save screenshot\n                                    </Button>\n                                </ListItem>\n                            </List>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <Scene worldStart={worldStart} world={world} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import Gui from \"./Gui\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Gui />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}