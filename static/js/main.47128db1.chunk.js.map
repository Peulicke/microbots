{"version":3,"sources":["examples/arc.ts","core/Vec3.ts","core/Mat3.ts","core/Bot.ts","core/utils.ts","core/conjugateGradientSparse.ts","core/World.ts","core/Animation.ts","draw.ts","examples/bigArc.ts","examples/bigCube.ts","examples/cube.ts","examples/stack.ts","examples/towers.ts","examples/index.ts","examples/targets.ts","App.tsx","index.tsx"],"names":["newVec3","x","y","z","clone","a","add","b","addEq","sub","subEq","multiplyScalar","s","dot","length","Math","sqrt","normalize","i","j","apply","result","newBot","config","pos","Vec3","target","weight","average","outerProduct","addVecMultNum","c","matMultVec","A","v","conditionVector","sum","floor","ldiv","bCopy","Array","fill","preconditioner","conditionMatrix","r","Ap","p","pOld","rsold","alpha","rsnew","cg","newWorld","bots","setBots","world","offset","slack","setSlack","setOffset","o","console","log","edgeStrength","d","edgeStrengthGround","stiffness","l","stiffnessGround","Mat3","stiffnessDerivative","dim","epsilon","val","dPlus","dMinus","plus","stiffnessPair","stiffnessPairDerivative","displacement","before","after","dt","f","map","forEach","bot","v1","acc","forceMatrix","k","sx","sy","sz","push","stiffnessMatrix","gradient","uBefore","u","uAfter","beforeBefore","afterAfter","udku","vi","vj","svisvj","diff","p1","p2","p3","p4","p5","start","end","World","Bot","optimize","animation","vel","iter","g","displacements","max","min","undefined","subdivide","createAnimation","n","newScene","scene","Scene","AmbientLight","light","DirectionalLight","position","set","updateCylinder","from","to","radius","cylinder","orientation","Matrix4","lookAt","Vector3","Object3D","up","multiply","setRotationFromMatrix","scale","newCylinder","color","edgeGeometry","CylinderGeometry","Mesh","MeshPhongMaterial","arc","angle","PI","cos","sin","m","_","example","title","t","flat","examples","abs","bigArc","cube","bigCube","sort","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","App","useWindowSize","windowWidth","windowHeight","width","height","classes","mount","useRef","useState","controls","setControls","camera","setCamera","renderer","setRenderer","frame","setFrame","time","setTime","animate","setAnimate","setScene","botMeshes","setBotMeshes","groundEdgeMeshes","setGroundEdgeMeshes","edgeMeshes","setEdgeMeshes","setAnimation","worldStart","setWorldStart","worldEnd","setWorldEnd","selectedExample","setSelectedExample","updateWorld","remove","strength","useEffect","geom","SphereGeometry","computeVertexNormals","faces","face","vertexColors","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","geometry","newSphere","Color","scn","row","mc","current","cam","PerspectiveCamera","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","window","setInterval","clearInterval","removeChild","update","render","pauseFrames","round","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","direction","className","Paper","List","ListItem","Button","variant","onClick","index","rng","Prando","ws","we","rand","next","Animation","image","document","getElementsByTagName","toDataURL","createElement","href","replace","download","click","saveImage","ref","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.47128db1.chunk.js","sourcesContent":["import { Vec3, Bot, World } from \"../core\";\n\nconst n = 10;\n\nconst arc = [Vec3.newVec3(0, 0, 0)];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push(Vec3.newVec3(arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0));\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push(Vec3.newVec3(-arc[i][0], arc[i][1], 0));\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nconst start = [\n    ...[...Array(n + 1)].map((_, i) => Vec3.newVec3(i, 0.5, 0)),\n    ...[...Array(n)].map((_, i) => Vec3.newVec3(-i - 1, 0.5, 0))\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: t => {\n                    if (t > 0.9) return arc[i];\n                },\n                weight: 0.01\n            })\n    )\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Arc\",\n    world: world\n};\n\nexport default example;\n","export type Vec3 = [number, number, number];\n\nexport const newVec3 = (x: number, y: number, z: number): Vec3 => [x, y, z];\n\nexport const clone = (a: Vec3): Vec3 => [a[0], a[1], a[2]];\n\nexport const add = (a: Vec3, b: Vec3): Vec3 => [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n\nexport const addEq = (a: Vec3, b: Vec3): void => {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n};\n\nexport const sub = (a: Vec3, b: Vec3): Vec3 => [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n\nexport const subEq = (a: Vec3, b: Vec3): void => {\n    a[0] -= b[0];\n    a[1] -= b[1];\n    a[2] -= b[2];\n};\n\nexport const multiplyScalar = (a: Vec3, s: number): Vec3 => [a[0] * s, a[1] * s, a[2] * s];\n\nexport const dot = (a: Vec3, b: Vec3): number => a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\nexport const length = (a: Vec3): number => Math.sqrt(dot(a, a));\n\nexport const normalize = (a: Vec3): Vec3 => multiplyScalar(a, 1 / length(a));\n","import * as Vec3 from \"./Vec3\";\n\nexport type Mat3 = [Vec3.Vec3, Vec3.Vec3, Vec3.Vec3];\n\nexport const newMat3 = (x: Vec3.Vec3, y: Vec3.Vec3, z: Vec3.Vec3): Mat3 => [x, y, z];\n\nexport const add = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] += b[i][j];\n        }\n    }\n};\n\nexport const sub = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] -= b[i][j];\n        }\n    }\n};\n\nexport const multiplyScalar = (a: Mat3, s: number): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] *= s;\n        }\n    }\n};\n\nexport const apply = (a: Mat3, b: Vec3.Vec3): Vec3.Vec3 => {\n    const result: Vec3.Vec3 = [0, 0, 0];\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            result[i] += a[i][j] * b[j];\n        }\n    }\n    return result;\n};\n","import * as Vec3 from \"./Vec3\";\n\ntype Target = (t: number) => Vec3.Vec3 | undefined;\n\nexport type Bot = {\n    pos: Vec3.Vec3;\n    target: Target;\n    weight: number;\n};\n\nexport const newBot = (config: { pos?: Vec3.Vec3; target?: Target; weight?: number }): Bot => ({\n    pos: config.pos || Vec3.newVec3(0, 0, 0),\n    target: config.target || (() => undefined),\n    weight: config.weight || 1\n});\n\nexport const average = (a: Bot, b: Bot): Bot =>\n    newBot({ ...a, pos: Vec3.multiplyScalar(Vec3.add(a.pos, b.pos), 1 / 2) });\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\n\nconst throwError = () => {\n    throw new Error(\"Vectors need to be the same length\");\n};\n\nexport const dot = (a: number[], b: number[]): number => {\n    if (a.length !== b.length) throwError();\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) result += a[i] * b[i];\n    return result;\n};\n\nexport const outerProduct = (a: Vec3.Vec3, b: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.newMat3(\n        Vec3.newVec3(a[0] * b[0], a[0] * b[1], a[0] * b[2]),\n        Vec3.newVec3(a[1] * b[0], a[1] * b[1], a[1] * b[2]),\n        Vec3.newVec3(a[2] * b[0], a[2] * b[1], a[2] * b[2])\n    );\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n","export type SparseSymmetric = [number, number][][];\n\nconst clone = (a: number[], result: number[]): void => {\n    for (let i = 0; i < a.length; ++i) result[i] = a[i];\n};\n\nconst dot = (a: number[], b: number[]): number => {\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) {\n        result += a[i] * b[i];\n    }\n    return result;\n};\n\nconst addVecMultNum = (a: number[], b: number[], c: number): void => {\n    for (let i = 0; i < a.length; ++i) a[i] += b[i] * c;\n};\n\nconst matMultVec = (A: SparseSymmetric, b: number[], result: number[]): void => {\n    for (let i = 0; i < result.length; ++i) result[i] = 0;\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            const v = A[i][c][1];\n            result[i] += v * b[j];\n            if (i === j) continue;\n            result[j] += v * b[i];\n        }\n    }\n};\n\nconst cg = (A: SparseSymmetric, b: number[]): number[] => {\n    const x = Array(b.length).fill(0);\n    const r = Array(b.length);\n    clone(b, r);\n    const Ap = Array(b.length);\n    matMultVec(A, x, Ap);\n    addVecMultNum(r, Ap, -1);\n    const p = Array(r.length);\n    const pOld = Array(p.length);\n    clone(r, p);\n    let rsold = dot(r, r);\n    for (let i = 0; i < 20; ++i) {\n        matMultVec(A, p, Ap);\n        const alpha = rsold / dot(p, Ap);\n        addVecMultNum(x, p, alpha);\n        addVecMultNum(r, Ap, -alpha);\n        const rsnew = dot(r, r);\n        clone(p, pOld);\n        clone(r, p);\n        addVecMultNum(p, pOld, rsnew / rsold);\n        rsold = rsnew;\n    }\n    return x;\n};\n\nconst preconditioner = (A: SparseSymmetric, b: number[]): number[] => {\n    const sum = Array(b.length / 3).fill(0);\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const [j, v] = A[i][c];\n            if (Math.floor(i / 3) !== Math.floor(j / 3)) continue;\n            sum[Math.floor(i / 3)] += v;\n            if (i === j) continue;\n            sum[Math.floor(j / 3)] += v;\n        }\n    }\n    for (let i = 0; i < sum.length; ++i) sum[i] = Math.sqrt(Math.sqrt(3 / sum[i]));\n    return sum;\n};\n\nconst conditionMatrix = (sum: number[], A: SparseSymmetric): void => {\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            A[i][c][1] *= sum[Math.floor(i / 3)];\n            A[i][c][1] *= sum[Math.floor(j / 3)];\n        }\n    }\n};\n\nconst conditionVector = (sum: number[], b: number[]): void => {\n    for (let i = 0; i < b.length; ++i) {\n        b[i] *= sum[Math.floor(i / 3)];\n    }\n};\n\nexport const ldiv = (A: SparseSymmetric, b: number[]): number[] => {\n    const bCopy = Array(b.length);\n    clone(b, bCopy);\n    const sum = preconditioner(A, bCopy);\n    conditionMatrix(sum, A);\n    conditionVector(sum, bCopy);\n    const x = cg(A, bCopy);\n    conditionVector(sum, x);\n    return x;\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\nimport { outerProduct } from \"./utils\";\nimport { SparseSymmetric, ldiv } from \"./conjugateGradientSparse\";\nimport * as Bot from \"./Bot\";\n\nexport type World = { bots: Bot.Bot[] };\n\nexport const newWorld = (): World => ({ bots: [] });\n\nexport const setBots = (bots: Bot.Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nlet offset = 1.5;\nlet slack = 2;\nexport const setSlack = (s: number): void => {\n    slack = s;\n};\nexport const setOffset = (o: number): void => {\n    offset = o;\n    console.log(offset);\n};\nconst friction = 0.1;\n\nexport const edgeStrength = (d: number): number => {\n    if (d < offset - slack / 2) return 1;\n    if (d > offset + slack / 2) return 0;\n    return (2 * (d + slack - offset) * (offset + slack / 2 - d) ** 2) / slack ** 3;\n};\n\nexport const edgeStrengthGround = (d: number): number => edgeStrength(d) + 1e-4;\n\nconst stiffness = (d: Vec3.Vec3): Mat3.Mat3 => {\n    const l = Vec3.length(d);\n    d = Vec3.multiplyScalar(d, Math.sqrt(edgeStrength(l)) / l);\n    return outerProduct(d, d);\n};\n\nconst stiffnessGround = (d: Vec3.Vec3): Mat3.Mat3 => {\n    const result = outerProduct(d, d);\n    Mat3.multiplyScalar(result, edgeStrengthGround(Vec3.length(d)) / Vec3.dot(d, d));\n    return result;\n};\n\nconst stiffnessDerivative = (dim: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const epsilon = 0.00001;\n    const val = d[dim];\n    const dPlus = Vec3.clone(d);\n    dPlus[dim] = val + epsilon;\n    const dMinus = Vec3.clone(d);\n    dMinus[dim] = val - epsilon;\n    const plus = stiffness(dPlus);\n    const minus = stiffness(dMinus);\n    Mat3.sub(plus, minus);\n    Mat3.multiplyScalar(plus, 1 / (2 * epsilon));\n    return plus;\n};\n\nconst stiffnessPair = (a: Bot.Bot, b: Bot.Bot): Mat3.Mat3 => {\n    const d = Vec3.sub(b.pos, a.pos);\n    return stiffness(d);\n};\n\nconst stiffnessPairDerivative = (a: Bot.Bot, dim: number, b: Bot.Bot): Mat3.Mat3 =>\n    stiffnessDerivative(dim, Vec3.sub(a.pos, b.pos));\n\nconst stiffnessMatrix = (world: World): SparseSymmetric => {\n    const result: SparseSymmetric = [...Array(world.bots.length * 3)].map(() => []);\n    for (let i = 0; i < world.bots.length; ++i) {\n        const sx = stiffnessGround(Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n        const sy = stiffnessGround(Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n        const sz = stiffnessGround(Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n        for (let k = 0; k < 3; ++k) {\n            for (let l = k; l < 3; ++l) {\n                result[3 * i + k].push([3 * i + l, (sx[k][l] + sz[k][l]) * friction + sy[k][l]]);\n            }\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (Vec3.length(Vec3.sub(world.bots[i].pos, world.bots[j].pos)) > offset + slack / 2) continue;\n            const s = stiffnessPair(world.bots[i], world.bots[j]);\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k].push([3 * j + l, -s[k][l]]);\n                    if (k > l) continue;\n                    result[3 * i + k][l - k][1] += s[k][l];\n                    result[3 * j + k][l - k][1] += s[k][l];\n                }\n            }\n        }\n    }\n    return result;\n};\n\nconst forceMatrix = (before: World, after: World, dt: number, world: World): number[] => {\n    const result = [...Array(world.bots.length * 3)].map(() => 0);\n    world.bots.forEach((bot, i) => {\n        for (let j = 0; j < 3; ++j) {\n            const v1 = (world.bots[i].pos[j] - before.bots[i].pos[j]) / dt;\n            const v2 = (after.bots[i].pos[j] - world.bots[i].pos[j]) / dt;\n            const acc = (v2 - v1) / dt;\n            result[3 * i + j] = ((j === 1 ? -1 : 0) - acc) * bot.weight;\n        }\n    });\n    return result;\n};\n\nexport const displacement = (before: World, after: World, dt: number, world: World): number[] => {\n    const f = forceMatrix(before, after, dt, world);\n    const k = stiffnessMatrix(world);\n    return ldiv(k, f);\n};\n\nexport const gradient = (\n    uBefore: number[],\n    u: number[],\n    uAfter: number[],\n    beforeBefore: World,\n    before: World,\n    after: World,\n    afterAfter: World,\n    dt: number,\n    world: World\n): Vec3.Vec3[] => {\n    const udku = [...Array(world.bots.length)].map(() => [0, 1, 2].map(() => 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const sx = stiffnessDerivative(dim, Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n            Mat3.multiplyScalar(sx, friction);\n            const sy = stiffnessDerivative(dim, Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n            const sz = stiffnessDerivative(dim, Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n            Mat3.multiplyScalar(sz, friction);\n            const vi = Vec3.newVec3(u[3 * i], u[3 * i + 1], u[3 * i + 2]);\n            Mat3.add(sx, sy);\n            Mat3.add(sx, sz);\n            const d = Vec3.dot(vi, Mat3.apply(sx, vi));\n            udku[i][dim] += d;\n            for (let j = i + 1; j < world.bots.length; ++j) {\n                if (Vec3.length(Vec3.sub(world.bots[j].pos, world.bots[i].pos)) > offset + slack / 2) continue;\n                const s = stiffnessPairDerivative(world.bots[i], dim, world.bots[j]);\n                const vj = Vec3.newVec3(u[3 * j], u[3 * j + 1], u[3 * j + 2]);\n                Vec3.subEq(vj, vi);\n                const svisvj = Mat3.apply(s, vj);\n                const diff = Vec3.dot(vj, svisvj);\n                udku[i][dim] += diff;\n                udku[j][dim] -= diff;\n            }\n        }\n    }\n    const result = [...Array(world.bots.length)].map(() => Vec3.newVec3(0, 0, 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            result[i][dim] =\n                -udku[i][dim] + 2 * ((-uBefore[3 * i + dim] + 2 * u[3 * i + dim] - uAfter[3 * i + dim]) / dt ** 2);\n        }\n    }\n    const overlapPenalty = 1000;\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].pos[1] > 0.5) continue;\n        const l = world.bots[i].pos[1] + 0.5;\n        result[i][1] += 2 * overlapPenalty * (2 * (l - 2));\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            let d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const l = Vec3.length(d);\n            if (l > 1) continue;\n            d = Vec3.multiplyScalar(d, overlapPenalty * ((2 * (l - 2)) / l));\n            Vec3.subEq(result[i], d);\n            Vec3.addEq(result[j], d);\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        const p1 = Vec3.multiplyScalar(beforeBefore.bots[i].pos, 2);\n        const p2 = Vec3.multiplyScalar(before.bots[i].pos, -8);\n        const p3 = Vec3.multiplyScalar(world.bots[i].pos, 12);\n        const p4 = Vec3.multiplyScalar(after.bots[i].pos, -8);\n        const p5 = Vec3.multiplyScalar(afterAfter.bots[i].pos, 2);\n        Vec3.addEq(p1, p2);\n        Vec3.addEq(p1, p3);\n        Vec3.addEq(p1, p4);\n        Vec3.addEq(p1, p5);\n        Vec3.addEq(result[i], Vec3.multiplyScalar(p1, 100 / dt ** 4));\n    }\n    return result;\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Bot from \"./Bot\";\nimport * as World from \"./World\";\n\nconst average = (start: World.World, end: World.World): World.World => {\n    const result = World.newWorld();\n    result.bots = start.bots.map((b, i) => Bot.average(b, end.bots[i]));\n    return result;\n};\n\nconst gradient = (animation: World.World[], dt: number): Vec3.Vec3[][] => {\n    const result = [...Array(animation.length)].map(() =>\n        [...Array(animation[0].bots.length)].map(() => Vec3.newVec3(0, 0, 0))\n    );\n    const displacements = [...Array(animation.length)].map(() => [...Array(3 * animation[0].bots.length)].map(() => 0));\n    for (let i = 0; i < animation.length; ++i) {\n        const before = animation[Math.max(i - 1, 0)];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        displacements[i] = World.displacement(before, after, dt, animation[i]);\n    }\n    for (let i = 1; i < animation.length; ++i) {\n        const beforeBefore = animation[Math.max(i - 2, 0)];\n        const before = animation[i - 1];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        const afterAfter = animation[Math.min(i + 2, animation.length - 1)];\n        result[i] = World.gradient(\n            displacements[i - 1],\n            displacements[i],\n            displacements[Math.min(i + 1, animation.length - 1)],\n            beforeBefore,\n            before,\n            after,\n            afterAfter,\n            dt,\n            animation[i]\n        );\n    }\n    return result;\n};\n\nconst optimize = (animation: World.World[], dt: number): void => {\n    const n = 1000;\n    const acc = 0.02;\n    const vel = animation.map(world => world.bots.map(() => Vec3.newVec3(0, 0, 0)));\n    for (let iter = 0; iter < n / animation.length; ++iter) {\n        const y = (iter * animation.length) / n;\n        const x = ((1 + y) * animation.length) / 10;\n        World.setOffset(1 + 2 / x);\n        let g = gradient(animation, dt);\n        g = g.map(world => world.map(v => Vec3.multiplyScalar(v, -acc / (1e-4 + Vec3.length(v)))));\n        animation.map((world, i) =>\n            world.bots.map((bot, j) => {\n                const target = bot.target(i / (animation.length - 1));\n                if (target !== undefined) {\n                    bot.pos = target;\n                    return;\n                }\n                vel[i][j] = Vec3.add(vel[i][j], g[i][j]);\n                vel[i][j] = Vec3.multiplyScalar(vel[i][j], 0.9);\n                bot.pos = Vec3.add(bot.pos, vel[i][j]);\n            })\n        );\n    }\n};\n\nconst subdivide = (animation: World.World[]): World.World[] => {\n    const result = [...Array(animation.length * 2 - 1)];\n    for (let i = 0; i < animation.length; ++i) result[2 * i] = animation[i];\n    for (let i = 1; i < result.length - 1; i += 2) result[i] = average(result[i - 1], result[i + 1]);\n    return result;\n};\n\nexport const createAnimation = (before: World.World, after: World.World, n: number): World.World[] => {\n    let result = [before, after];\n    let dt = 100;\n    for (let i = 0; i < n; ++i) {\n        dt /= 2;\n        result = subdivide(result);\n        optimize(result, dt);\n    }\n    return result;\n};\n","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D\n} from \"three\";\nimport * as Vec3 from \"./core/Vec3\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const newSphere = (pos: Vec3.Vec3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.position.set(...pos);\n    mesh.scale.set(0.5, 0.5, 0.5);\n    return mesh;\n};\n\nexport const updateCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number) => (cylinder: Mesh): Mesh => {\n    const orientation = new Matrix4();\n    orientation.lookAt(new Vector3(...from), new Vector3(...to), new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    cylinder.setRotationFromMatrix(orientation);\n    cylinder.scale.set(radius, Vec3.length(Vec3.sub(to, from)), radius);\n    const pos = Vec3.multiplyScalar(Vec3.add(from, to), 1 / 2);\n    cylinder.position.set(pos[0], pos[1], pos[2]);\n    return cylinder;\n};\n\nexport const newCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number, color: Color): Mesh => {\n    const edgeGeometry = new CylinderGeometry(1, 1, 1, 8, 1);\n    const cylinder = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    return updateCylinder(from, to, radius)(cylinder);\n};\n","import { Vec3, Bot, World } from \"../core\";\n\nconst n = 20;\n\nconst arc = [Vec3.newVec3(0, 0, 0)];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push(Vec3.newVec3(arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0));\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push(Vec3.newVec3(-arc[i][0], arc[i][1], 0));\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nconst start = [\n    ...[...Array(n + 1)].map((_, i) => Vec3.newVec3(i, 0.5, 0)),\n    ...[...Array(n)].map((_, i) => Vec3.newVec3(-i - 1, 0.5, 0))\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: t => {\n                    if (t > 0.9) return arc[i];\n                },\n                weight: 0.01\n            })\n    )\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Big arc\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst start = [...Array(8)].map((_, i) => [...Array(8)].map((_, j) => Vec3.newVec3(i - 3.5, 0.5, j - 3.5))).flat();\nconst end = [...Array(4)]\n    .map((_, i) => [...Array(4)].map((_, j) => [...Array(4)].map((_, k) => Vec3.newVec3(i - 1.5, k + 0.5, j - 1.5))))\n    .flat()\n    .flat();\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: t => {\n                    if (t > 0.9) return end[i];\n                },\n                weight: 0.01\n            })\n    )\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Big cube\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst start: Vec3.Vec3[] = [\n    [-0.5, 0.5, -0.5],\n    [0.5, 0.5, -0.5],\n    [0.5, 0.5, 0.5],\n    [-0.5, 0.5, 0.5],\n    [-0.5, 1.5, -0.5],\n    [0.5, 1.5, -0.5],\n    [0.5, 1.5, 0.5],\n    [-0.5, 1.5, 0.5],\n    [-0.5, 2.5, -0.5],\n    [0.5, 2.5, -0.5],\n    [0.5, 2.5, 0.5],\n    [-0.5, 2.5, 0.5],\n    [-0.5, 3.5, -0.5],\n    [0.5, 3.5, -0.5],\n    [0.5, 3.5, 0.5],\n    [-0.5, 3.5, 0.5]\n];\nconst end: Vec3.Vec3[] = [\n    [-1.5, 0.5, -1.5],\n    [-0.5, 0.5, -1.5],\n    [0.5, 0.5, -1.5],\n    [1.5, 0.5, -1.5],\n    [-1.5, 0.5, -0.5],\n    [-0.5, 0.5, -0.5],\n    [0.5, 0.5, -0.5],\n    [1.5, 0.5, -0.5],\n    [-1.5, 0.5, 0.5],\n    [-0.5, 0.5, 0.5],\n    [0.5, 0.5, 0.5],\n    [1.5, 0.5, 0.5],\n    [-1.5, 0.5, 1.5],\n    [-0.5, 0.5, 1.5],\n    [0.5, 0.5, 1.5],\n    [1.5, 0.5, 1.5]\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: t => {\n                    if (t > 0.9) return end[i];\n                },\n                weight: 0.01\n            })\n    )\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Cube\",\n    world: world\n};\n\nexport default example;\n","import { Bot, World } from \"../core\";\n\nconst world: World.World = {\n    bots: [\n        ...[...Array(5)].map(\n            (_, i): Bot.Bot =>\n                Bot.newBot({\n                    pos: [i, 0.5, 0],\n                    target: t => {\n                        if (t > 0.9) return [0, 0.5 + i, 0];\n                    },\n                    weight: 0.1\n                })\n        )\n    ]\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Stack\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst start: Vec3.Vec3[] = [\n    [2, 0.5, 0],\n    [2, 1.5, 0],\n    [2, 2.5, 0],\n    [2, 3.5, 0],\n    [2, 4.5, 0],\n    [-2, 0.5, 0],\n    [-2, 1.5, 0],\n    [-2, 2.5, 0],\n    [-2, 3.5, 0],\n    [-2, 4.5, 0],\n    [2, 5.5, 0]\n];\nconst end: Vec3.Vec3[] = [\n    [2, 0.5, 0],\n    [2, 1.5, 0],\n    [2, 2.5, 0],\n    [2, 3.5, 0],\n    [2, 4.5, 0],\n    [-2, 0.5, 0],\n    [-2, 1.5, 0],\n    [-2, 2.5, 0],\n    [-2, 3.5, 0],\n    [-2, 4.5, 0],\n    [-2, 5.5, 0]\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: t => {\n                    if (t > 0.9) return end[i];\n                },\n                weight: 0.02\n            })\n    )\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Towers\",\n    world: world\n};\n\nexport default example;\n","import { Bot, World } from \"../core\";\nimport arc from \"./arc\";\nimport bigArc from \"./bigArc\";\nimport bigCube from \"./bigCube\";\nimport cube from \"./cube\";\nimport stack from \"./stack\";\nimport towers from \"./towers\";\nimport targets from \"./targets\";\n\nexport const examples = [stack, towers, targets, arc, bigArc, cube, bigCube].sort((a, b) => {\n    const d = a.world.bots.length - b.world.bots.length;\n    if (d === 0) return a.title > b.title ? 1 : -1;\n    return d;\n});\n\nexport default (index: number): [World.World, World.World] => [\n    examples[index].world,\n    World.setBots(\n        examples[index].world.bots.map((bot: Bot.Bot) => {\n            return {\n                pos: bot.target !== undefined ? bot.target(1) || bot.pos : bot.pos,\n                target: bot.target,\n                weight: bot.weight\n            };\n        })\n    )(World.newWorld())\n];\n","import { Bot, World } from \"../core\";\n\nconst world: World.World = {\n    bots: [\n        ...[...Array(9)].map((_, i): Bot.Bot => Bot.newBot({ pos: [i, 0.5, 0], weight: 0.001 })),\n        Bot.newBot({\n            pos: [4.5, 0.5, 4],\n            target: t => {\n                if (Math.abs(t - 0.4) < 0.03) return [1, 3.5, 1];\n                if (Math.abs(t - 0.6) < 0.03) return [-1, 3.5, 1];\n                if (Math.abs(t - 0.8) < 0.03) return [-1, 3.5, -1];\n                if (Math.abs(t - 1) < 0.03) return [1, 3.5, -1];\n            }\n        })\n    ]\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Targets\",\n    world: world\n};\n\nexport default example;\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { PerspectiveCamera, WebGLRenderer, Color, Mesh } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem, Button } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { Vec3, World, Animation } from \"./core\";\nimport { newScene, newSphere, newCylinder, updateCylinder } from \"./draw\";\nimport Prando from \"prando\";\nimport loadExample, { examples } from \"./examples\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst saveImage = () => {\n    const canvas = document.getElementsByTagName(\"canvas\")[0];\n    const image = canvas.toDataURL(\"image/png\");\n    const a = document.createElement(\"a\");\n    a.href = image.replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n    a.download = \"image.png\";\n    a.click();\n};\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n    const [time, setTime] = useState(0);\n    const [animate, setAnimate] = useState(false);\n    const [scene, setScene] = useState(newScene());\n    const [botMeshes, setBotMeshes] = useState<Mesh[]>([]);\n    const [groundEdgeMeshes, setGroundEdgeMeshes] = useState<Mesh[]>([]);\n    const [edgeMeshes, setEdgeMeshes] = useState<Mesh[][]>([]);\n    const [animation, setAnimation] = useState<World.World[]>([]);\n    const [worldStart, setWorldStart] = useState<World.World>(World.newWorld());\n    const [worldEnd, setWorldEnd] = useState<World.World>(World.newWorld());\n    const [selectedExample, setSelectedExample] = useState<number | undefined>(undefined);\n\n    const updateWorld = (time: number) => {\n        animation[time].bots.map((bot, i) => {\n            botMeshes[i].position.set(...bot.pos);\n        });\n        animation[time].bots.map((bot, i) => {\n            scene.remove(groundEdgeMeshes[i]);\n            const strength = World.edgeStrength(bot.pos[1] + 0.5);\n            if (strength < 0.01) return;\n            scene.add(groundEdgeMeshes[i]);\n            updateCylinder(\n                bot.pos,\n                Vec3.newVec3(bot.pos[0], 0, bot.pos[2]),\n                Math.sqrt(strength) * 0.3\n            )(groundEdgeMeshes[i]);\n        });\n        animation[time].bots.map((from, i) =>\n            animation[time].bots.map((to, j) => {\n                if (i >= j) return;\n                scene.remove(edgeMeshes[i][j]);\n                const strength = World.edgeStrength(Vec3.length(Vec3.sub(to.pos, from.pos)));\n                if (strength < 0.01) return;\n                scene.add(edgeMeshes[i][j]);\n                updateCylinder(from.pos, to.pos, Math.sqrt(strength) * 0.3)(edgeMeshes[i][j]);\n            })\n        );\n    };\n\n    useEffect(() => {\n        if (animation.length === 0) return;\n        setBotMeshes(\n            animation[0].bots.map(bot =>\n                newSphere(bot.pos, bot.target(1) === undefined ? new Color(0, 0, 1) : new Color(0, 1, 0))\n            )\n        );\n        setGroundEdgeMeshes(\n            animation[0].bots.map(bot =>\n                newCylinder(bot.pos, Vec3.newVec3(bot.pos[0], 0, bot.pos[2]), 1, new Color(1, 0, 0))\n            )\n        );\n        setEdgeMeshes(\n            animation[0].bots.map(a => animation[0].bots.map(b => newCylinder(a.pos, b.pos, 1, new Color(1, 0, 0))))\n        );\n    }, [animation]);\n\n    useEffect(() => {\n        const scn = newScene();\n        botMeshes.map(mesh => scn.add(mesh));\n        groundEdgeMeshes.map(mesh => scn.add(mesh));\n        edgeMeshes.map((row, i) =>\n            row.map((mesh, j) => {\n                if (i >= j) return;\n                scn.add(mesh);\n            })\n        );\n        setScene(scn);\n    }, [botMeshes, groundEdgeMeshes, edgeMeshes]);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && camera && scene) renderer.render(scene, camera);\n    }, [controls, renderer, camera, frame, scene]);\n\n    useEffect(() => {\n        if (botMeshes.length === 0) return;\n        const pauseFrac = 0.1;\n        const pauseFrames = Math.round(pauseFrac * animation.length);\n        let t = time % (2 * (animation.length + pauseFrames));\n        if (t < pauseFrames) {\n            updateWorld(0);\n            return;\n        }\n        t -= pauseFrames;\n        if (t < animation.length) {\n            updateWorld(t);\n            return;\n        }\n        t -= animation.length;\n        if (t < pauseFrames) {\n            updateWorld(animation.length - 1);\n            return;\n        }\n        t -= pauseFrames;\n        updateWorld(animation.length - 1 - t);\n    }, [time, scene]);\n\n    useEffect(() => {\n        if (!animate) return;\n        const t = setInterval(() => setTime(time => time + 1), 10);\n        return () => clearInterval(t);\n    }, [animate]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <b>Microbots</b>\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Select an example</b>\n                                    </ListItem>\n                                </List>\n                                {examples.map((example, i) => (\n                                    <Button\n                                        key={i}\n                                        variant=\"contained\"\n                                        color={selectedExample === i ? \"primary\" : \"default\"}\n                                        onClick={() => {\n                                            const rng = new Prando(123);\n                                            const [ws, we] = loadExample(i);\n                                            console.log(ws, we);\n                                            const rand = () =>\n                                                Vec3.multiplyScalar(\n                                                    Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5),\n                                                    0.0001\n                                                );\n                                            ws.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                                            we.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                                            setWorldStart(ws);\n                                            setWorldEnd(we);\n                                            setAnimation([ws, we]);\n                                            setAnimate(false);\n                                            setSelectedExample(i);\n                                        }}>\n                                        {example.title} ({example.world.bots.length} bots)\n                                    </Button>\n                                ))}\n                                <br />\n                                <br />\n                            </Paper>\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Compute the animation</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button\n                                            variant=\"contained\"\n                                            onClick={() => {\n                                                setAnimation(Animation.createAnimation(worldStart, worldEnd, 8));\n                                                setAnimate(true);\n                                            }}>\n                                            Generate animation\n                                        </Button>\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Extra options</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button variant=\"contained\" onClick={() => setTime(time + 1)}>\n                                            Time: {time}\n                                        </Button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button variant=\"contained\" onClick={() => setAnimate(!animate)}>\n                                            Animate: {animate ? \"true\" : \"false\"}\n                                        </Button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button variant=\"contained\" onClick={() => saveImage()}>\n                                            Save screenshot\n                                        </Button>\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}