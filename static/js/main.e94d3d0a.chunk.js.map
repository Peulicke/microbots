{"version":3,"sources":["examples/arc.ts","core/Vec3.ts","core/Mat3.ts","core/Bot.ts","core/utils.ts","core/conjugateGradientSparse.ts","core/World.ts","core/Animation.ts","draw.ts","examples/bigArc.ts","examples/index.ts","examples/towers.ts","examples/stack.ts","examples/cube.ts","examples/bigCube.ts","App.tsx","index.tsx"],"names":["newVec3","x","y","z","clone","a","add","b","sub","multiplyScalar","s","divideScalar","dot","length","Math","sqrt","normalize","Vec3","apply","newBot","pos","weight","fixed","setPos","bot","setWeight","setFixed","average","result","outerProduct","i","addVecMultNum","c","matMultVec","A","j","v","conditionVector","sum","floor","ldiv","bCopy","Array","map","forEach","preconditioner","conditionMatrix","r","Ap","p","pOld","rsold","alpha","rsnew","cg","newWorld","bots","setBots","world","offset","slack","setSlack","edgeStrength","d","edgeStrengthGround","stiffness","l","stiffnessGround","Mat3","stiffnessDerivative","dim","epsilon","val","dPlus","dMinus","plus","minus","stiffnessPair","stiffnessPairDerivative","stiffnessMatrix","sx","sy","sz","k","push","forceMatrix","before","after","dt","v1","acc","displacement","f","resolveCollisionStep","max","oneFixed","dist","n","resolveCollision","gradient","uBefore","u","uAfter","beforeBefore","afterAfter","udku","vi","vj","diff","p1","p2","p3","p4","p5","numerator","start","end","World","Bot","optimize","animation","vel","iter","g","displacements","min","subdivide","createAnimation","newScene","scene","Scene","AmbientLight","light","DirectionalLight","position","set","updateCylinder","from","to","radius","cylinder","orientation","Matrix4","lookAt","Vector3","Object3D","up","multiply","setRotationFromMatrix","scale","newCylinder","color","edgeGeometry","CylinderGeometry","Mesh","MeshPhongMaterial","arc","angle","PI","cos","sin","m","_","title","data","examples","flat","bigArc","sort","toWorld","index","time","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","App","useWindowSize","windowWidth","windowHeight","width","height","classes","mount","useRef","useState","controls","setControls","camera","setCamera","renderer","setRenderer","frame","setFrame","setTime","animate","setAnimate","setScene","botMeshes","setBotMeshes","groundEdgeMeshes","setGroundEdgeMeshes","edgeMeshes","setEdgeMeshes","setAnimation","worldStart","setWorldStart","worldEnd","setWorldEnd","undefined","selectedExample","setSelectedExample","updateWorld","remove","strength","useEffect","geom","SphereGeometry","computeVertexNormals","faces","face","vertexColors","fill","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","geometry","newSphere","Color","scn","row","mc","current","cam","PerspectiveCamera","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","t","window","setInterval","clearInterval","removeChild","update","render","pauseFrames","round","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","direction","className","Paper","List","ListItem","example","Button","variant","onClick","rng","Prando","ws","we","rand","next","Animation","image","document","getElementsByTagName","toDataURL","createElement","href","replace","download","click","saveImage","ref","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.e94d3d0a.chunk.js","sourcesContent":["const n = 10;\n\nconst arc = [[0, 0, 0]];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push([arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0]);\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push([-arc[i][0], arc[i][1], 0]);\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nexport default {\n    title: \"Arc\",\n    data: [[...[...Array(n + 1)].map((_, i) => [i, 0.5, 0]), ...[...Array(n)].map((_, i) => [-i - 1, 0.5, 0])], arc]\n};\n","export type Vec3 = [number, number, number];\n\nexport const newVec3 = (x: number, y: number, z: number): Vec3 => [x, y, z];\n\nexport const clone = (a: Vec3): Vec3 => [a[0], a[1], a[2]];\n\nexport const add = (a: Vec3, b: Vec3): Vec3 => [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n\nexport const sub = (a: Vec3, b: Vec3): Vec3 => [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n\nexport const multiplyScalar = (a: Vec3, s: number): Vec3 => [a[0] * s, a[1] * s, a[2] * s];\n\nexport const divideScalar = (a: Vec3, s: number): Vec3 => [a[0] / s, a[1] / s, a[2] / s];\n\nexport const dot = (a: Vec3, b: Vec3): number => a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\nexport const length = (a: Vec3): number => Math.sqrt(dot(a, a));\n\nexport const normalize = (a: Vec3): Vec3 => divideScalar(a, length(a));\n","import * as Vec3 from \"./Vec3\";\n\nexport type Mat3 = [Vec3.Vec3, Vec3.Vec3, Vec3.Vec3];\n\nexport const newMat3 = (x: Vec3.Vec3, y: Vec3.Vec3, z: Vec3.Vec3): Mat3 => [x, y, z];\n\nexport const clone = (a: Mat3): Mat3 => [Vec3.clone(a[0]), Vec3.clone(a[1]), Vec3.clone(a[2])];\n\nexport const add = (a: Mat3, b: Mat3): Mat3 => [Vec3.add(a[0], b[0]), Vec3.add(a[1], b[1]), Vec3.add(a[2], b[2])];\n\nexport const sub = (a: Mat3, b: Mat3): Mat3 => [Vec3.sub(a[0], b[0]), Vec3.sub(a[1], b[1]), Vec3.sub(a[2], b[2])];\n\nexport const multiplyScalar = (a: Mat3, s: number): Mat3 => [\n    Vec3.multiplyScalar(a[0], s),\n    Vec3.multiplyScalar(a[1], s),\n    Vec3.multiplyScalar(a[2], s)\n];\n\nexport const divideScalar = (a: Mat3, s: number): Mat3 => [\n    Vec3.divideScalar(a[0], s),\n    Vec3.divideScalar(a[1], s),\n    Vec3.divideScalar(a[2], s)\n];\n\nexport const apply = (a: Mat3, b: Vec3.Vec3): Vec3.Vec3 => [Vec3.dot(a[0], b), Vec3.dot(a[1], b), Vec3.dot(a[2], b)];\n","import * as Vec3 from \"./Vec3\";\n\nexport type Bot = {\n    pos: Vec3.Vec3;\n    weight: number;\n    fixed: boolean;\n};\n\nexport const newBot = (): Bot => ({\n    pos: Vec3.newVec3(0, 0, 0),\n    weight: 1,\n    fixed: false\n});\n\nexport const setPos = (pos: Vec3.Vec3) => (bot: Bot): Bot => {\n    bot.pos = pos;\n    return bot;\n};\n\nexport const setWeight = (weight: number) => (bot: Bot): Bot => {\n    bot.weight = weight;\n    return bot;\n};\n\nexport const setFixed = (fixed: boolean) => (bot: Bot): Bot => {\n    bot.fixed = fixed;\n    return bot;\n};\n\nexport const average = (a: Bot, b: Bot): Bot => {\n    const result = newBot();\n    result.pos = Vec3.divideScalar(Vec3.add(a.pos, b.pos), 2);\n    result.weight = (a.weight + b.weight) / 2;\n    result.fixed = a.fixed || b.fixed;\n    return result;\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\n\nconst throwError = () => {\n    throw new Error(\"Vectors need to be the same length\");\n};\n\nexport const dot = (a: number[], b: number[]): number => {\n    if (a.length !== b.length) throwError();\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) result += a[i] * b[i];\n    return result;\n};\n\nexport const outerProduct = (a: Vec3.Vec3, b: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.newMat3(\n        Vec3.newVec3(a[0] * b[0], a[0] * b[1], a[0] * b[2]),\n        Vec3.newVec3(a[1] * b[0], a[1] * b[1], a[1] * b[2]),\n        Vec3.newVec3(a[2] * b[0], a[2] * b[1], a[2] * b[2])\n    );\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n","export type SparseSymmetric = [number, number][][];\n\nconst clone = (a: number[], result: number[]): void => {\n    for (let i = 0; i < a.length; ++i) result[i] = a[i];\n};\n\nconst dot = (a: number[], b: number[]): number => {\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) {\n        result += a[i] * b[i];\n    }\n    return result;\n};\n\nconst addVecMultNum = (a: number[], b: number[], c: number): void => {\n    for (let i = 0; i < a.length; ++i) a[i] += b[i] * c;\n};\n\nconst matMultVec = (A: SparseSymmetric, b: number[], result: number[]): void => {\n    for (let i = 0; i < result.length; ++i) result[i] = 0;\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            const v = A[i][c][1];\n            result[i] += v * b[j];\n            if (i === j) continue;\n            result[j] += v * b[i];\n        }\n    }\n};\n\nconst cg = (A: SparseSymmetric, b: number[]): number[] => {\n    const x = b.map(() => 0);\n    const r = Array(b.length);\n    clone(b, r);\n    const Ap = b.map(() => 0);\n    matMultVec(A, x, Ap);\n    addVecMultNum(r, Ap, -1);\n    const p = Array(r.length);\n    const pOld = Array(p.length);\n    clone(r, p);\n    let rsold = dot(r, r);\n    for (let i = 0; i < 20; ++i) {\n        matMultVec(A, p, Ap);\n        const alpha = rsold / dot(p, Ap);\n        addVecMultNum(x, p, alpha);\n        addVecMultNum(r, Ap, -alpha);\n        const rsnew = dot(r, r);\n        clone(p, pOld);\n        clone(r, p);\n        addVecMultNum(p, pOld, rsnew / rsold);\n        rsold = rsnew;\n    }\n    return x;\n};\n\nconst preconditioner = (A: SparseSymmetric, b: number[]): number[] => {\n    const sum = [...Array(b.length / 3)].map(() => 0);\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const [j, v] = A[i][c];\n            if (Math.floor(i / 3) !== Math.floor(j / 3)) continue;\n            sum[Math.floor(i / 3)] += v;\n            if (i === j) continue;\n            sum[Math.floor(j / 3)] += v;\n        }\n    }\n    sum.forEach((v, i) => (sum[i] = Math.sqrt(Math.sqrt(3 / v))));\n    return sum;\n};\n\nconst conditionMatrix = (sum: number[], A: SparseSymmetric): void => {\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            A[i][c][1] *= sum[Math.floor(i / 3)];\n            A[i][c][1] *= sum[Math.floor(j / 3)];\n        }\n    }\n};\n\nconst conditionVector = (sum: number[], b: number[]): void => {\n    for (let i = 0; i < b.length; ++i) {\n        b[i] *= sum[Math.floor(i / 3)];\n    }\n};\n\nexport const ldiv = (A: SparseSymmetric, b: number[]): number[] => {\n    const bCopy = Array(b.length);\n    clone(b, bCopy);\n    const sum = preconditioner(A, bCopy);\n    conditionMatrix(sum, A);\n    conditionVector(sum, bCopy);\n    const x = cg(A, bCopy);\n    conditionVector(sum, x);\n    return x;\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\nimport { outerProduct } from \"./utils\";\nimport { SparseSymmetric, ldiv } from \"./conjugateGradientSparse\";\nimport * as Bot from \"./Bot\";\n\nexport type World = { bots: Bot.Bot[] };\n\nexport const newWorld = (): World => ({ bots: [] });\n\nexport const setBots = (bots: Bot.Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nconst offset = 1.5;\nlet slack = 2;\nexport const setSlack = (s: number): void => {\n    slack = s;\n};\nconst friction = 0.1;\n\nexport const edgeStrength = (d: number): number => {\n    if (d < offset - slack / 2) return 1;\n    if (d > offset + slack / 2) return 0;\n    return (2 * (d + slack - offset) * (offset + slack / 2 - d) ** 2) / slack ** 3;\n};\n\nexport const edgeStrengthGround = (d: number): number => edgeStrength(d) + 1e-4;\n\nexport const stiffness = (d: Vec3.Vec3): Mat3.Mat3 => {\n    const l = Vec3.length(d);\n    d = Vec3.multiplyScalar(d, Math.sqrt(edgeStrength(l)) / l);\n    return outerProduct(d, d);\n};\n\nexport const stiffnessGround = (d: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.multiplyScalar(outerProduct(d, d), edgeStrengthGround(Vec3.length(d)) / Vec3.dot(d, d));\n\nexport const stiffnessDerivative = (dim: number) => (d: Vec3.Vec3): Mat3.Mat3 => {\n    const epsilon = 0.00001;\n    const val = d[dim];\n    const dPlus = Vec3.clone(d);\n    dPlus[dim] = val + epsilon;\n    const dMinus = Vec3.clone(d);\n    dMinus[dim] = val - epsilon;\n    const plus = stiffness(dPlus);\n    const minus = stiffness(dMinus);\n    return Mat3.multiplyScalar(Mat3.sub(plus, minus), 1 / (2 * epsilon));\n};\n\nexport const stiffnessPair = (a: Bot.Bot, b: Bot.Bot): Mat3.Mat3 => {\n    const d = Vec3.sub(b.pos, a.pos);\n    return stiffness(d);\n};\n\nexport const stiffnessPairDerivative = (a: Bot.Bot, dim: number, b: Bot.Bot): Mat3.Mat3 =>\n    stiffnessDerivative(dim)(Vec3.sub(a.pos, b.pos));\n\nexport const stiffnessMatrix = (world: World): SparseSymmetric => {\n    const result: SparseSymmetric = [...Array(world.bots.length * 3)].map(() => []);\n    for (let i = 0; i < world.bots.length; ++i) {\n        const sx = stiffnessGround(Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n        const sy = stiffnessGround(Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n        const sz = stiffnessGround(Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n        for (let k = 0; k < 3; ++k) {\n            for (let l = k; l < 3; ++l) {\n                result[3 * i + k].push([3 * i + l, (sx[k][l] + sz[k][l]) * friction + sy[k][l]]);\n            }\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (Vec3.length(Vec3.sub(world.bots[i].pos, world.bots[j].pos)) > offset + slack / 2) continue;\n            const s = stiffnessPair(world.bots[i], world.bots[j]);\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k].push([3 * j + l, -s[k][l]]);\n                    if (k > l) continue;\n                    result[3 * i + k][l - k][1] += s[k][l];\n                    result[3 * j + k][l - k][1] += s[k][l];\n                }\n            }\n        }\n    }\n    return result;\n};\n\nexport const forceMatrix = (before: World, after: World, dt: number) => (world: World): number[] => {\n    const result = [...Array(world.bots.length * 3)].map(() => 0);\n    world.bots.forEach((bot, i) => {\n        for (let j = 0; j < 3; ++j) {\n            const v1 = (world.bots[i].pos[j] - before.bots[i].pos[j]) / dt;\n            const v2 = (after.bots[i].pos[j] - world.bots[i].pos[j]) / dt;\n            const acc = (v2 - v1) / dt;\n            result[3 * i + j] = ((j === 1 ? -1 : 0) - acc) * bot.weight;\n        }\n    });\n    return result;\n};\n\nexport const displacement = (before: World, after: World, dt: number) => (world: World): number[] => {\n    const f = forceMatrix(before, after, dt)(world);\n    const k = stiffnessMatrix(world);\n    return ldiv(k, f);\n};\n\nexport const resolveCollisionStep = (world: World): World => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].fixed) continue;\n        world.bots[i].pos[1] = Math.max(world.bots[i].pos[1], 0.5);\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (world.bots[i].fixed && world.bots[j].fixed) continue;\n            const oneFixed = world.bots[i].fixed || world.bots[j].fixed;\n            const d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const dist = Vec3.length(d);\n            if (dist > 1) continue;\n            const n = Vec3.multiplyScalar(d, (1 - dist) / (oneFixed ? 1 : 2) / dist);\n            if (!world.bots[i].fixed) world.bots[i].pos = Vec3.sub(world.bots[i].pos, n);\n            if (!world.bots[j].fixed) world.bots[j].pos = Vec3.add(world.bots[j].pos, n);\n        }\n    }\n    return world;\n};\n\nexport const resolveCollision = (world: World): World => {\n    let result = world;\n    for (let i = 0; i < 10; ++i) result = resolveCollisionStep(result);\n    return result;\n};\n\nexport const gradient = (uBefore: number[], u: number[], uAfter: number[]) => (\n    beforeBefore: World,\n    before: World,\n    after: World,\n    afterAfter: World,\n    dt: number\n) => (world: World): Vec3.Vec3[] => {\n    const udku = [...Array(world.bots.length)].map(() => [0, 1, 2].map(() => 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const sx = Mat3.multiplyScalar(\n                stiffnessDerivative(dim)(Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0)),\n                friction\n            );\n            const sy = stiffnessDerivative(dim)(Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n            const sz = Mat3.multiplyScalar(\n                stiffnessDerivative(dim)(Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5)),\n                friction\n            );\n            const vi = Vec3.newVec3(u[3 * i], u[3 * i + 1], u[3 * i + 2]);\n            const d = Vec3.dot(vi, Mat3.apply(Mat3.add(Mat3.add(sx, sy), sz), vi));\n            udku[i][dim] += d;\n            for (let j = i + 1; j < world.bots.length; ++j) {\n                if (Vec3.length(Vec3.sub(world.bots[j].pos, world.bots[i].pos)) > offset + slack / 2) continue;\n                const s = stiffnessPairDerivative(world.bots[i], dim, world.bots[j]);\n                const vj = Vec3.newVec3(u[3 * j], u[3 * j + 1], u[3 * j + 2]);\n                const diff =\n                    Vec3.dot(Vec3.sub(vi, vj), Mat3.apply(s, vi)) - Vec3.dot(Vec3.sub(vi, vj), Mat3.apply(s, vj));\n                udku[i][dim] += diff;\n                udku[j][dim] -= diff;\n            }\n        }\n    }\n    const result = [...Array(world.bots.length)].map(() => Vec3.newVec3(0, 0, 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            result[i][dim] =\n                -udku[i][dim] + 2 * ((-uBefore[3 * i + dim] + 2 * u[3 * i + dim] - uAfter[3 * i + dim]) / dt ** 2);\n        }\n    }\n    const overlapPenalty = 1000;\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].pos[1] > 0.5) continue;\n        const l = world.bots[i].pos[1] + 0.5;\n        result[i][1] += 2 * overlapPenalty * (2 * (l - 2));\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            let d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const l = Vec3.length(d);\n            if (l > 1) continue;\n            d = Vec3.multiplyScalar(d, overlapPenalty * ((2 * (l - 2)) / l));\n            result[i] = Vec3.sub(result[i], d);\n            result[j] = Vec3.add(result[j], d);\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        const p1 = Vec3.multiplyScalar(beforeBefore.bots[i].pos, 2);\n        const p2 = Vec3.multiplyScalar(before.bots[i].pos, -8);\n        const p3 = Vec3.multiplyScalar(world.bots[i].pos, 12);\n        const p4 = Vec3.multiplyScalar(after.bots[i].pos, -8);\n        const p5 = Vec3.multiplyScalar(afterAfter.bots[i].pos, 2);\n        const numerator = Vec3.add(Vec3.add(Vec3.add(Vec3.add(p1, p2), p3), p4), p5);\n        result[i] = Vec3.add(result[i], Vec3.multiplyScalar(numerator, 100000 / dt ** 4));\n    }\n    return result;\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Bot from \"./Bot\";\nimport * as World from \"./World\";\n\nconst average = (start: World.World, end: World.World): World.World => {\n    const result = World.newWorld();\n    result.bots = start.bots.map((b, i) => Bot.average(b, end.bots[i]));\n    return result;\n};\n\nconst gradient = (animation: World.World[], dt: number): Vec3.Vec3[][] => {\n    const result = [...Array(animation.length)].map(() =>\n        [...Array(animation[0].bots.length)].map(() => Vec3.newVec3(0, 0, 0))\n    );\n    const displacements = [...Array(animation.length)].map(() => [...Array(3 * animation[0].bots.length)].map(() => 0));\n    for (let i = 0; i < animation.length; ++i) {\n        const before = animation[Math.max(i - 1, 0)];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        displacements[i] = World.displacement(before, after, dt)(animation[i]);\n    }\n    for (let i = 1; i < animation.length - 1; ++i) {\n        const beforeBefore = animation[Math.max(i - 2, 0)];\n        const before = animation[i - 1];\n        const after = animation[i + 1];\n        const afterAfter = animation[Math.min(i + 2, animation.length - 1)];\n        result[i] = World.gradient(displacements[i - 1], displacements[i], displacements[i + 1])(\n            beforeBefore,\n            before,\n            after,\n            afterAfter,\n            dt\n        )(animation[i]);\n    }\n    return result;\n};\n\nconst optimize = (animation: World.World[], dt: number): void => {\n    const n = 500;\n    const acc = 0.02;\n    const vel = animation.map(world => world.bots.map(() => Vec3.newVec3(0, 0, 0)));\n    for (let iter = 0; iter < n / animation.length; ++iter) {\n        const y = (iter * animation.length) / n;\n        const x = ((1 + y) * animation.length) / 10;\n        World.setSlack(2 / x);\n        const g = gradient(animation, dt).map(world =>\n            world.map(v => Vec3.multiplyScalar(v, -acc / (1e-4 + Vec3.length(v))))\n        );\n        animation.map((world, i) =>\n            world.bots.map((bot, j) => {\n                if (bot.fixed) return;\n                vel[i][j] = Vec3.add(vel[i][j], g[i][j]);\n                vel[i][j] = Vec3.multiplyScalar(vel[i][j], 0.9);\n                bot.pos = Vec3.add(bot.pos, vel[i][j]);\n            })\n        );\n    }\n};\n\nconst subdivide = (animation: World.World[]): World.World[] => {\n    const result = [...Array(animation.length * 2 - 1)];\n    for (let i = 0; i < animation.length; ++i) result[2 * i] = animation[i];\n    for (let i = 1; i < result.length - 1; i += 2) result[i] = average(result[i - 1], result[i + 1]);\n    return result;\n};\n\nexport const createAnimation = (before: World.World, after: World.World, n: number): World.World[] => {\n    let result = [before, after];\n    let dt = 100;\n    for (let i = 0; i < n; ++i) {\n        dt /= 2;\n        result = subdivide(result);\n        optimize(result, dt);\n    }\n    return result;\n};\n","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D\n} from \"three\";\nimport * as Vec3 from \"./core/Vec3\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const newSphere = (pos: Vec3.Vec3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.position.set(...pos);\n    mesh.scale.set(0.5, 0.5, 0.5);\n    return mesh;\n};\n\nexport const updateCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number) => (cylinder: Mesh): Mesh => {\n    const orientation = new Matrix4();\n    orientation.lookAt(new Vector3(...from), new Vector3(...to), new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    cylinder.setRotationFromMatrix(orientation);\n    cylinder.scale.set(radius, Vec3.length(Vec3.sub(to, from)), radius);\n    const pos = Vec3.divideScalar(Vec3.add(from, to), 2);\n    cylinder.position.set(pos[0], pos[1], pos[2]);\n    return cylinder;\n};\n\nexport const newCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number, color: Color): Mesh => {\n    const edgeGeometry = new CylinderGeometry(1, 1, 1, 8, 1);\n    const cylinder = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    return updateCylinder(from, to, radius)(cylinder);\n};\n","const n = 20;\n\nconst arc = [[0, 0, 0]];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push([arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0]);\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push([-arc[i][0], arc[i][1], 0]);\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nexport default {\n    title: \"Big arc\",\n    data: [[...[...Array(n + 1)].map((_, i) => [i, 0.5, 0]), ...[...Array(n)].map((_, i) => [-i - 1, 0.5, 0])], arc]\n};\n","import { Vec3, Bot, World } from \"../core\";\nimport arc from \"./arc\";\nimport bigArc from \"./bigArc\";\nimport bigCube from \"./bigCube\";\nimport cube from \"./cube\";\nimport stack from \"./stack\";\nimport towers from \"./towers\";\n\nexport const examples = [towers, stack, cube, bigCube, arc, bigArc].sort((a, b) => {\n    const d = a.data[0].length - b.data[0].length;\n    if (d === 0) return a.title > b.title ? 1 : -1;\n    return d;\n});\n\nconst toWorld = (index: number, time: number): World.World =>\n    World.setBots(examples[index].data[time].map(p => Bot.setPos(Vec3.newVec3(p[0], p[1], p[2]))(Bot.newBot())))(\n        World.newWorld()\n    );\n\nexport default (index: number): [World.World, World.World] => [toWorld(index, 0), toWorld(index, 1)];\n","export default {\n    title: \"Towers\",\n    data: [\n        [\n            [2, 0.5, 0],\n            [2, 1.5, 0],\n            [2, 2.5, 0],\n            [2, 3.5, 0],\n            [2, 4.5, 0],\n            [-2, 0.5, 0],\n            [-2, 1.5, 0],\n            [-2, 2.5, 0],\n            [-2, 3.5, 0],\n            [-2, 4.5, 0],\n            [2, 5.5, 0]\n        ],\n        [\n            [2, 0.5, 0],\n            [2, 1.5, 0],\n            [2, 2.5, 0],\n            [2, 3.5, 0],\n            [2, 4.5, 0],\n            [-2, 0.5, 0],\n            [-2, 1.5, 0],\n            [-2, 2.5, 0],\n            [-2, 3.5, 0],\n            [-2, 4.5, 0],\n            [-2, 5.5, 0]\n        ]\n    ]\n};\n","export default {\n    title: \"Stack\",\n    data: [\n        [\n            [0, 0.5, 0],\n            [0, 1.5, 0],\n            [0, 2.5, 0],\n            [0, 3.5, 0],\n            [0, 4.5, 0]\n        ],\n        [\n            [0, 0.5, 0],\n            [1, 0.5, 0],\n            [2, 0.5, 0],\n            [3, 0.5, 0],\n            [4, 0.5, 0]\n        ]\n    ]\n};\n","export default {\n    title: \"Cube\",\n    data: [\n        [\n            [-0.5, 0.5, -0.5],\n            [0.5, 0.5, -0.5],\n            [0.5, 0.5, 0.5],\n            [-0.5, 0.5, 0.5],\n            [-0.5, 1.5, -0.5],\n            [0.5, 1.5, -0.5],\n            [0.5, 1.5, 0.5],\n            [-0.5, 1.5, 0.5],\n            [-0.5, 2.5, -0.5],\n            [0.5, 2.5, -0.5],\n            [0.5, 2.5, 0.5],\n            [-0.5, 2.5, 0.5],\n            [-0.5, 3.5, -0.5],\n            [0.5, 3.5, -0.5],\n            [0.5, 3.5, 0.5],\n            [-0.5, 3.5, 0.5]\n        ],\n        [\n            [-1.5, 0.5, -1.5],\n            [-0.5, 0.5, -1.5],\n            [0.5, 0.5, -1.5],\n            [1.5, 0.5, -1.5],\n            [-1.5, 0.5, -0.5],\n            [-0.5, 0.5, -0.5],\n            [0.5, 0.5, -0.5],\n            [1.5, 0.5, -0.5],\n            [-1.5, 0.5, 0.5],\n            [-0.5, 0.5, 0.5],\n            [0.5, 0.5, 0.5],\n            [1.5, 0.5, 0.5],\n            [-1.5, 0.5, 1.5],\n            [-0.5, 0.5, 1.5],\n            [0.5, 0.5, 1.5],\n            [1.5, 0.5, 1.5]\n        ]\n    ]\n};\n","export default {\n    title: \"Big cube\",\n    data: [\n        [...Array(8)].map((_, i) => [...Array(8)].map((_, j) => [i - 3.5, 0.5, j - 3.5])).flat(),\n        [...Array(4)]\n            .map((_, i) => [...Array(4)].map((_, j) => [...Array(4)].map((_, k) => [i - 1.5, k + 0.5, j - 1.5])))\n            .flat()\n            .flat()\n    ]\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { PerspectiveCamera, WebGLRenderer, Color, Mesh } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem, Button } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { Vec3, World, Animation } from \"./core\";\nimport { newScene, newSphere, newCylinder, updateCylinder } from \"./draw\";\nimport Prando from \"prando\";\nimport loadExample, { examples } from \"./examples\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst saveImage = () => {\n    const canvas = document.getElementsByTagName(\"canvas\")[0];\n    const image = canvas.toDataURL(\"image/png\");\n    const a = document.createElement(\"a\");\n    a.href = image.replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n    a.download = \"image.png\";\n    a.click();\n};\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n    const [time, setTime] = useState(0);\n    const [animate, setAnimate] = useState(false);\n    const [scene, setScene] = useState(newScene());\n    const [botMeshes, setBotMeshes] = useState<Mesh[]>([]);\n    const [groundEdgeMeshes, setGroundEdgeMeshes] = useState<Mesh[]>([]);\n    const [edgeMeshes, setEdgeMeshes] = useState<Mesh[][]>([]);\n    const [animation, setAnimation] = useState<World.World[]>([]);\n    const [worldStart, setWorldStart] = useState<World.World>(World.newWorld());\n    const [worldEnd, setWorldEnd] = useState<World.World>(World.newWorld());\n    const [selectedExample, setSelectedExample] = useState<number | undefined>(undefined);\n\n    const updateWorld = (time: number) => {\n        animation[time].bots.map((bot, i) => {\n            botMeshes[i].position.set(...bot.pos);\n        });\n        animation[time].bots.map((bot, i) => {\n            scene.remove(groundEdgeMeshes[i]);\n            const strength = World.edgeStrength(bot.pos[1] + 0.5);\n            if (strength < 0.01) return;\n            scene.add(groundEdgeMeshes[i]);\n            updateCylinder(\n                bot.pos,\n                Vec3.newVec3(bot.pos[0], 0, bot.pos[2]),\n                Math.sqrt(strength) * 0.3\n            )(groundEdgeMeshes[i]);\n        });\n        animation[time].bots.map((from, i) =>\n            animation[time].bots.map((to, j) => {\n                if (i >= j) return;\n                scene.remove(edgeMeshes[i][j]);\n                const strength = World.edgeStrength(Vec3.length(Vec3.sub(to.pos, from.pos)));\n                if (strength < 0.01) return;\n                scene.add(edgeMeshes[i][j]);\n                updateCylinder(from.pos, to.pos, Math.sqrt(strength) * 0.3)(edgeMeshes[i][j]);\n            })\n        );\n    };\n\n    useEffect(() => {\n        if (animation.length === 0) return;\n        setBotMeshes(\n            animation[0].bots.map(bot => newSphere(bot.pos, bot.fixed ? new Color(0, 0, 1) : new Color(0, 1, 0)))\n        );\n        setGroundEdgeMeshes(\n            animation[0].bots.map(bot =>\n                newCylinder(bot.pos, Vec3.newVec3(bot.pos[0], 0, bot.pos[2]), 1, new Color(1, 0, 0))\n            )\n        );\n        setEdgeMeshes(\n            animation[0].bots.map(a => animation[0].bots.map(b => newCylinder(a.pos, b.pos, 1, new Color(1, 0, 0))))\n        );\n    }, [animation]);\n\n    useEffect(() => {\n        const scn = newScene();\n        botMeshes.map(mesh => scn.add(mesh));\n        groundEdgeMeshes.map(mesh => scn.add(mesh));\n        edgeMeshes.map((row, i) =>\n            row.map((mesh, j) => {\n                if (i >= j) return;\n                scn.add(mesh);\n            })\n        );\n        setScene(scn);\n    }, [botMeshes, groundEdgeMeshes, edgeMeshes]);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && camera && scene) renderer.render(scene, camera);\n    }, [controls, renderer, camera, frame, scene]);\n\n    useEffect(() => {\n        if (botMeshes.length === 0) return;\n        const pauseFrac = 0.1;\n        const pauseFrames = Math.round(pauseFrac * animation.length);\n        let t = time % (2 * (animation.length + pauseFrames));\n        if (t < pauseFrames) {\n            updateWorld(0);\n            return;\n        }\n        t -= pauseFrames;\n        if (t < animation.length) {\n            updateWorld(t);\n            return;\n        }\n        t -= animation.length;\n        if (t < pauseFrames) {\n            updateWorld(animation.length - 1);\n            return;\n        }\n        t -= pauseFrames;\n        updateWorld(animation.length - 1 - t);\n    }, [time, scene]);\n\n    useEffect(() => {\n        if (!animate) return;\n        const t = setInterval(() => setTime(time => time + 1), 10);\n        return () => clearInterval(t);\n    }, [animate]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <b>Microbots</b>\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Select an example</b>\n                                    </ListItem>\n                                </List>\n                                {examples.map((example, i) => (\n                                    <Button\n                                        key={i}\n                                        variant=\"contained\"\n                                        color={selectedExample === i ? \"primary\" : \"default\"}\n                                        onClick={() => {\n                                            const rng = new Prando(123);\n                                            const [ws, we] = loadExample(i);\n                                            const rand = () =>\n                                                Vec3.multiplyScalar(\n                                                    Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5),\n                                                    0.0001\n                                                );\n                                            ws.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                                            we.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                                            setWorldStart(ws);\n                                            setWorldEnd(we);\n                                            setAnimation([ws, we]);\n                                            setAnimate(false);\n                                            setSelectedExample(i);\n                                        }}>\n                                        {example.title} ({example.data[0].length} bots)\n                                    </Button>\n                                ))}\n                                <br />\n                                <br />\n                            </Paper>\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Compute the animation</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button\n                                            variant=\"contained\"\n                                            onClick={() => {\n                                                setAnimation(Animation.createAnimation(worldStart, worldEnd, 8));\n                                                setAnimate(true);\n                                            }}>\n                                            Generate animation\n                                        </Button>\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Extra options</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button variant=\"contained\" onClick={() => setTime(time + 1)}>\n                                            Time: {time}\n                                        </Button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button variant=\"contained\" onClick={() => setAnimate(!animate)}>\n                                            Animate: {animate ? \"true\" : \"false\"}\n                                        </Button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button variant=\"contained\" onClick={() => saveImage()}>\n                                            Save screenshot\n                                        </Button>\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}