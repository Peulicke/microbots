{"version":3,"sources":["core/Bot.ts","core/utils.ts","core/World.ts","core/matrix.ts","App.tsx","draw.ts","index.tsx"],"names":["newBot","pos","Vector3","weight","fixed","setPos","bot","setWeight","setFixed","outerProduct","a","b","Matrix3","set","x","y","z","addMatrix3","result","elements","map","e","i","zeros","height","width","Array","numberArrayFromVector3Array","vec","length","k","getComponent","numberArrayFromMatrix3Array","mat","row","element","j","l","newWorld","bots","edges","setBots","world","initEdges","list","array","_","stiffness","d","multiplyScalar","dot","stiffnessDerivative","dim","setComponent","de","clone","transpose","stiffnessPair","edge","sub","stiffnessPairDerivative","derivative","removeFixedFromVector","vector","filter","removeFixedFromMatrix","assembleMatrix","fun","forEach","s","subMatrix3","stiffnessMatrix","stiffnessMatrixDerivativeBot","forceMatrix","compliance","A","f","linear","mult","multiply","complianceDerivative","func","matrix","dk","ft","kInv","inv","pipe","complianceDerivativeBot","objective","resolveCollisionStep","oneFixed","dist","n","add","resolveCollision","updateEdges","Math","exp","optimizeStepNumericalBotDim","stepSize","val","plus","minus","move","abs","sign","optimizeStepNumericalBot","optimizeStepNumerical","rng","Prando","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","randomBot","Bot","next","World","App","useWindowSize","windowWidth","windowHeight","classes","mount","useRef","useState","controls","setControls","scene","setScene","camera","setCamera","renderer","setRenderer","frame","setFrame","iterations","setIterations","useEffect","mc","current","cam","PerspectiveCamera","position","lookAt","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","t","window","setInterval","clearInterval","removeChild","update","render","setTimeout","scn","color","Color","Matrix4","setPosition","scale","geom","SphereGeometry","applyMatrix4","computeVertexNormals","faces","face","vertexColors","fill","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","Mesh","MeshPhongMaterial","geometry","matrixAutoUpdate","updateMatrix","reduce","fn","Scene","AmbientLight","light","DirectionalLight","newScene","from","to","radius","direction","subVectors","orientation","Object3D","up","edgeGeometry","CylinderGeometry","addCylinder","sqrt","clearTimeout","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","className","Paper","List","ListItem","ref","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.243c1b30.chunk.js","sourcesContent":["import { Vector3 } from \"three\";\n\nexport type Bot = {\n    pos: Vector3;\n    weight: number;\n    fixed: boolean;\n};\n\nexport const newBot = (): Bot => ({\n    pos: new Vector3(0, 0, 0),\n    weight: 1,\n    fixed: false\n});\n\nexport const setPos = (pos: Vector3) => (bot: Bot): Bot => {\n    bot.pos = pos;\n    return bot;\n};\n\nexport const setWeight = (weight: number) => (bot: Bot): Bot => {\n    bot.weight = weight;\n    return bot;\n};\n\nexport const setFixed = (fixed: boolean) => (bot: Bot): Bot => {\n    bot.fixed = fixed;\n    return bot;\n};\n","import { Vector3, Matrix3 } from \"three\";\n\nexport const dot = (a: number[], b: number[]): number => {\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) result += a[i] * b[i];\n    return result;\n};\n\nexport const outerProduct = (a: Vector3, b: Vector3): Matrix3 =>\n    new Matrix3().set(\n        a.x * b.x,\n        a.x * b.y,\n        a.x * b.z,\n        a.y * b.x,\n        a.y * b.y,\n        a.y * b.z,\n        a.z * b.x,\n        a.z * b.y,\n        a.z * b.z\n    );\n\nexport const addMatrix3 = (a: Matrix3, b: Matrix3): Matrix3 => {\n    const result = new Matrix3();\n    result.elements = a.elements.map((e, i) => e + b.elements[i]);\n    return result;\n};\n\nexport const subMatrix3 = (a: Matrix3, b: Matrix3): Matrix3 => {\n    const result = new Matrix3();\n    result.elements = a.elements.map((e, i) => e - b.elements[i]);\n    return result;\n};\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n\nexport const numberArrayFromVector3Array = (vec: Vector3[]): number[] => {\n    const result = [...Array(3 * vec.length)].map(() => 0);\n    vec.map((e, i) => {\n        for (let k = 0; k < 3; ++k) {\n            result[3 * i + k] = e.getComponent(k);\n        }\n    });\n    return result;\n};\n\nexport const numberArrayToVector3Array = (vec: number[]): Vector3[] =>\n    [...Array(vec.length / 3)]\n        .map(() => new Vector3())\n        .map((e, i) => {\n            for (let k = 0; k < 3; ++k) {\n                e.setComponent(k, vec[3 * i + k]);\n            }\n            return e;\n        });\n\nexport const numberArrayFromMatrix3Array = (mat: Matrix3[][]): number[][] => {\n    const result = zeros(3 * mat.length, 3 * mat[0]?.length || 0);\n    mat.map((row, i) =>\n        row.map((element, j) => {\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k][3 * j + l] = mat[i][j].elements[k + 3 * l];\n                }\n            }\n        })\n    );\n    return result;\n};\n\nexport const numberArrayToMatrix3Array = (mat: number[][]): Matrix3[][] =>\n    zeros(mat.length / 3, (mat[0]?.length || 0) / 3).map((row, i) =>\n        row.map((element, j) => {\n            const res = new Matrix3();\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    res.elements[k + 3 * l] = mat[3 * i + k][3 * j + l];\n                }\n            }\n            return res;\n        })\n    );\n","import { pipe } from \"ts-pipe-compose\";\nimport { matrix, Matrix, transpose, multiply, inv } from \"mathjs\";\nimport { Vector3, Matrix3 } from \"three\";\nimport {\n    dot,\n    outerProduct,\n    addMatrix3,\n    subMatrix3,\n    numberArrayFromVector3Array,\n    numberArrayFromMatrix3Array\n} from \"./utils\";\nimport { ldiv } from \"./matrix\";\nimport { Bot } from \"./Bot\";\n\nexport type World = { bots: Bot[]; edges: number[][] };\n\nexport const newWorld = (): World => ({ bots: [], edges: [] });\n\nexport const setBots = (bots: Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nexport const initEdges = (world: World): World => {\n    const list = [...Array(world.bots.length)].map(() => 1);\n    const array = list.map((_, i) => list.map((_, j) => (i === j ? 0 : 1)));\n    world.edges = array;\n    return world;\n};\n\nexport const stiffness = (d: Vector3): Matrix3 => outerProduct(d, d).multiplyScalar(-1 / d.dot(d));\n\nexport const stiffnessDerivative = (dim: number) => (d: Vector3): Matrix3 => {\n    const e = new Vector3(0, 0, 0).setComponent(dim, 1);\n    const de = outerProduct(e, d);\n    const k = stiffness(d);\n    return addMatrix3(addMatrix3(de, de.clone().transpose()), k.multiplyScalar(2 * d.getComponent(dim))).multiplyScalar(\n        -1 / d.dot(d)\n    );\n};\n\nexport const stiffnessPair = (a: Bot, b: Bot, edge: number): Matrix3 =>\n    stiffness(b.pos.clone().sub(a.pos)).multiplyScalar(edge);\n\nexport const stiffnessPairDerivative = (bot: Bot) => (dim: number) => (a: Bot, b: Bot, edge: number): Matrix3 => {\n    if (a !== bot && b !== bot) return new Matrix3().set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n    const derivative = stiffnessDerivative(dim)(b.pos.clone().sub(a.pos)).multiplyScalar(edge);\n    if (a === bot) return derivative.multiplyScalar(-1);\n    return derivative;\n};\n\nexport const removeFixedFromVector = (world: World) => (vector: Vector3[]): Vector3[] =>\n    vector.filter((_, i) => !world.bots[i].fixed);\n\nexport const removeFixedFromMatrix = (world: World) => (mat: Matrix3[][]): Matrix3[][] =>\n    mat.filter((_, i) => !world.bots[i].fixed).map(vector => vector.filter((_, j) => !world.bots[j].fixed));\n\nexport const assembleMatrix = (world: World, fun: (a: Bot, b: Bot, edge: number) => Matrix3): Matrix3[][] => {\n    const result = world.edges.map(() => world.edges.map(() => new Matrix3().multiplyScalar(0)));\n    result.forEach((row, i) => {\n        row.forEach((edge, j) => {\n            if (i === j) return;\n            const s = fun(world.bots[i], world.bots[j], world.edges[i][j]);\n            result[i][i] = subMatrix3(result[i][i], s);\n            result[i][j] = addMatrix3(result[i][j], s);\n        });\n    });\n    return removeFixedFromMatrix(world)(result);\n};\n\nexport const stiffnessMatrix = (world: World): Matrix3[][] => assembleMatrix(world, stiffnessPair);\n\nexport const stiffnessMatrixDerivativeBot = (bot: Bot) => (dim: number) => (world: World): Matrix3[][] =>\n    assembleMatrix(world, stiffnessPairDerivative(bot)(dim));\n\nexport const forceMatrix = (world: World): Vector3[] =>\n    removeFixedFromVector(world)(world.bots.map(bot => new Vector3(0, -bot.weight, 0)));\n\nexport const compliance = (world: World): number => {\n    const f = numberArrayFromVector3Array(forceMatrix(world));\n    const k = numberArrayFromMatrix3Array(stiffnessMatrix(world));\n    const u = ldiv(k, f);\n    return dot(f, u);\n};\n\nconst mult = (b: Matrix) => (a: Matrix) => multiply(a, b);\n\nexport const complianceDerivative = (func: (world: World) => Matrix3[][]) => (world: World): number => {\n    const f = matrix(numberArrayFromVector3Array(forceMatrix(world)));\n    const dk = matrix(numberArrayFromMatrix3Array(func(world)));\n    const k = matrix(numberArrayFromMatrix3Array(stiffnessMatrix(world)));\n    const ft = transpose(f);\n    const kInv = inv(k);\n    return -((pipe(ft, mult(kInv), mult(dk), mult(kInv), mult(f)) as unknown) as number);\n};\n\nexport const complianceDerivativeBot = (bot: Bot) => (dim: number) => (world: World): number =>\n    complianceDerivative(stiffnessMatrixDerivativeBot(bot)(dim))(world);\n\nexport const objective = (world: World): number => compliance(world);\n\nexport const resolveCollisionStep = (world: World): World => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (world.bots[i].fixed && world.bots[j].fixed) continue;\n            const oneFixed = world.bots[i].fixed || world.bots[j].fixed;\n            const d = world.bots[j].pos.clone().sub(world.bots[i].pos);\n            const dist = d.length();\n            if (dist > 1) continue;\n            const n = d.multiplyScalar((1 - dist) / (oneFixed ? 1 : 2) / dist);\n            if (!world.bots[i].fixed) world.bots[i].pos = world.bots[i].pos.clone().sub(n);\n            if (!world.bots[j].fixed) world.bots[j].pos = world.bots[j].pos.clone().add(n);\n        }\n    }\n    return world;\n};\n\nexport const resolveCollision = (world: World): World => {\n    let result = world;\n    for (let i = 0; i < 10; ++i) result = resolveCollisionStep(result);\n    return result;\n};\n\nconst slack = 1.5;\n\nconst updateEdges = (world: World) => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = 0; j < world.bots.length; ++j) {\n            if (i === j) continue;\n            const d = world.bots[j].pos.clone().sub(world.bots[i].pos).length();\n            world.edges[i][j] = 1 / (1 + Math.exp(4 * (d - slack)));\n        }\n    }\n};\n\nexport const optimizeStepNumericalBotDim = (stepSize: number) => (world: World) => (bot: Bot) => (\n    dim: number\n): World => {\n    const epsilon = 0.001;\n    const val = bot.pos.getComponent(dim);\n    bot.pos.setComponent(dim, val + epsilon);\n    updateEdges(world);\n    const plus = compliance(world);\n    bot.pos.setComponent(dim, val - epsilon);\n    updateEdges(world);\n    const minus = compliance(world);\n    bot.pos.setComponent(dim, val);\n    let move = -(plus - minus) * stepSize;\n    const maxMove = 0.5;\n    if (Math.abs(move) > maxMove) move = maxMove * Math.sign(move);\n    bot.pos.setComponent(dim, val + move);\n    updateEdges(world);\n    return world;\n};\n\nexport const optimizeStepNumericalBot = (stepSize: number) => (world: World) => (bot: Bot): World => {\n    if (bot.fixed) return world;\n    const fun = optimizeStepNumericalBotDim(stepSize)(world)(bot);\n    [0, 1, 2].map(dim => fun(dim));\n    return world;\n};\n\nexport const optimizeStepNumerical = (stepSize: number) => (world: World): World => {\n    const fun = optimizeStepNumericalBot(stepSize)(world);\n    world.bots.map(bot => fun(bot));\n    return resolveCollision(world);\n};\n","import * as linear from \"linear-solve\";\n\nexport const ldiv = (A: number[][], b: number[]): number[] => linear.solve(A, b);\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Vector3, PerspectiveCamera, WebGLRenderer, Scene, Color } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { pipe } from \"ts-pipe-compose\";\nimport Prando from \"prando\";\nconst rng = new Prando(123);\nimport { Bot, World } from \"./core\";\nimport { newScene, addSphere, addCylinder } from \"./draw\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst randomBot = () => Bot.setPos(new Vector3(...[rng.next(), rng.next(), rng.next()].map(x => x * 10)))(Bot.newBot());\n\nconst bot1 = Bot.setFixed(true)(Bot.newBot());\nconst bot2 = Bot.setFixed(true)(Bot.setPos(new Vector3(3, 0, 0))(Bot.newBot()));\nconst bot3 = Bot.setFixed(true)(Bot.setPos(new Vector3(0, 0, 2))(Bot.newBot()));\nconst bots = [\n    bot1,\n    bot2,\n    bot3,\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot()\n];\nlet world = pipe(World.newWorld(), World.setBots(bots), World.initEdges);\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [scene, setScene] = useState<Scene>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n    const [iterations, setIterations] = useState(0);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && scene && camera) renderer.render(scene, camera);\n    }, [controls, renderer, scene, camera, frame]);\n\n    useEffect(() => {\n        if (iterations >= 50) return;\n        const t = setTimeout(() => {\n            setIterations(iterations + 1);\n            if (iterations % 1 === 0) {\n                let scn = world.bots\n                    .map(bot => addSphere(bot.pos, bot.fixed ? new Color(0, 0, 1) : new Color(0, 1, 0)))\n                    .reduce((x, fn) => fn(x), newScene());\n                world.bots.map((from, i) =>\n                    world.bots.map((to, j) => {\n                        if (i >= j) return;\n                        scn = addCylinder(\n                            from.pos,\n                            to.pos,\n                            Math.sqrt(world.edges[i][j]) * 0.3,\n                            new Color(1, 0, 0)\n                        )(scn);\n                    })\n                );\n                setScene(scn);\n            }\n            world = World.optimizeStepNumerical(1)(world);\n        }, 10);\n        return () => clearTimeout(t);\n    }, [controls, renderer, scene, camera, iterations]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Microbots</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <b>iterations: </b>\n                                        {iterations}\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D\n} from \"three\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const addSphere = (pos: Vector3, color: Color) => (scene: Scene): Scene => {\n    const mat = new Matrix4().setPosition(pos).scale(new Vector3(0.5, 0.5, 0.5));\n    const geom = new SphereGeometry(1, 16, 16).applyMatrix4(mat);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.matrixAutoUpdate = false;\n    mesh.matrix = mat;\n    mesh.updateMatrix();\n    scene.add(mesh);\n    return scene;\n};\n\nexport const addCylinder = (from: Vector3, to: Vector3, radius: number, color: Color) => (scene: Scene): Scene => {\n    const direction = new Vector3().subVectors(to, from);\n    const orientation = new Matrix4();\n    orientation.lookAt(from, to, new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    const edgeGeometry = new CylinderGeometry(radius, radius, direction.length(), 8, 1);\n    const edge = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    edge.applyMatrix4(orientation);\n    edge.position.x = (to.x + from.x) / 2;\n    edge.position.y = (to.y + from.y) / 2;\n    edge.position.z = (to.z + from.z) / 2;\n    scene.add(edge);\n    return scene;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}