{"version":3,"sources":["core/Bot.ts","core/World.ts","App.tsx","draw.ts","index.tsx"],"names":["newBot","pos","matrix","weight","fixed","setPos","bot","update","$set","setWeight","setFixed","newWorld","bots","edges","setBots","world","initEdges","list","Array","length","map","array","_","i","j","outerProduct","a","b","multiply","transpose","toArray","stiffness","d","divide","dot","stiffnessDerivative","dim","dir","e","de","k","add","get","stiffnessPair","edge","subtract","stiffnessPairDerivative","derivative","removeFixedFromVector","vector","filter","Math","floor","removeFixedFromMatrix","mat","assembleMatrix","fun","size","result","zeros","forEach","row","s","ri","range","rj","ii","index","ij","subset","stiffnessMatrix","stiffnessMatrixDerivativeBot","stiffnessMatrixDerivativeEdge","w","forceMatrix","flat","compliance","f","ft","kInv","inv","mult","complianceDerivative","func","dk","pipe","complianceDerivativeBot","complianceDerivativeEdge","distancePenalty","distancePenaltyDerivative","distancePenaltyPair","distancePenaltyPairDerivative","distancePenaltyTotal","sum","distancePenaltyTotalDerivativeBot","distancePenaltyTotalDerivativeEdge","objective","objectiveDerivativeBot","objectiveDerivativeEdge","optimizeStepBots","stepSize","newBots","move","moveDist","sqrt","optimizeStepEdges","newEdges","max","min","resolveCollisionStep","oneFixed","dist","n","resolveCollision","optimizeStep","optimize","console","log","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","randomBot","Bot","random","x","World","App","useWindowSize","windowWidth","windowHeight","width","height","classes","mount","useRef","useState","controls","setControls","scene","setScene","camera","setCamera","renderer","setRenderer","frame","setFrame","useEffect","mc","current","cam","PerspectiveCamera","position","set","lookAt","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","t","window","setInterval","clearInterval","removeChild","render","Matrix4","setPosition","Vector3","scale","geom","SphereGeometry","applyMatrix4","computeVertexNormals","color","Color","faces","face","vertexColors","fill","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","Mesh","MeshPhongMaterial","geometry","matrixAutoUpdate","updateMatrix","reduce","fn","Scene","AmbientLight","light","DirectionalLight","newScene","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","direction","className","Paper","List","ListItem","ref","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.570bec71.chunk.js","sourcesContent":["import update from \"immutability-helper\";\nimport { matrix, Matrix } from \"mathjs\";\n\nexport type Bot = {\n    readonly pos: Matrix;\n    readonly weight: number;\n    readonly fixed: boolean;\n};\n\nexport const newBot = (): Bot => ({\n    pos: matrix([0, 0, 0]),\n    weight: 1,\n    fixed: false\n});\n\nexport const setPos = (pos: Matrix) => (bot: Bot): Bot => update(bot, { pos: { $set: pos } });\n\nexport const setWeight = (weight: number) => (bot: Bot): Bot => update(bot, { weight: { $set: weight } });\n\nexport const setFixed = (fixed: boolean) => (bot: Bot): Bot => update(bot, { fixed: { $set: fixed } });\n","import update from \"immutability-helper\";\nimport { pipe } from \"ts-pipe-compose\";\nimport {\n    matrix,\n    Matrix,\n    transpose,\n    subtract,\n    dot,\n    multiply,\n    divide,\n    subset,\n    index,\n    zeros,\n    range,\n    add,\n    inv\n} from \"mathjs\";\nimport { Bot, setPos } from \"./Bot\";\n\nexport type World = { readonly bots: Bot[]; readonly edges: Matrix };\n\nexport const newWorld = (): World => ({ bots: [], edges: matrix([]) });\n\nexport const setBots = (bots: Bot[]) => (world: World): World => update(world, { bots: { $set: bots } });\n\nexport const initEdges = (world: World): World => {\n    const list = [...Array(world.bots.length)].map(() => 1);\n    const array = list.map((_, i) => list.map((_, j) => (i === j ? 0 : 1)));\n    return update(world, {\n        edges: { $set: matrix(array) }\n    });\n};\n\nexport const outerProduct = (a: Matrix, b: Matrix): Matrix =>\n    multiply(transpose(matrix([a.toArray() as number[]])), matrix([b.toArray() as number[]]));\n\nexport const stiffness = (d: Matrix): Matrix => divide(outerProduct(d, d), -dot(d, d)) as Matrix;\n\nexport const stiffnessDerivative = (dim: number) => (d: Matrix): Matrix => {\n    const dir = [0, 0, 0];\n    dir[dim] = 1;\n    const e = transpose(matrix([dir]));\n    const de = multiply(e, matrix([d.toArray() as number[]]));\n    const k = stiffness(d);\n    return divide(add(add(de, transpose(de)), multiply(k, 2 * d.get([dim]))), -dot(d, d)) as Matrix;\n};\n\nexport const stiffnessPair = (a: Bot, b: Bot, edge: number): Matrix =>\n    multiply(stiffness(subtract(b.pos, a.pos) as Matrix), edge);\n\nexport const stiffnessPairDerivative = (bot: Bot) => (dim: number) => (a: Bot, b: Bot, edge: number): Matrix => {\n    if (a !== bot && b !== bot)\n        return matrix([\n            [0, 0, 0],\n            [0, 0, 0],\n            [0, 0, 0]\n        ]);\n    const derivative = multiply(stiffnessDerivative(dim)(subtract(b.pos, a.pos) as Matrix), edge);\n    if (a === bot) return multiply(derivative, -1);\n    return derivative;\n};\n\nexport const removeFixedFromVector = (world: World) => (vector: Matrix): Matrix =>\n    matrix((vector.toArray() as number[]).filter((_, i) => !world.bots[Math.floor(i / 3)].fixed));\n\nexport const removeFixedFromMatrix = (world: World) => (mat: Matrix): Matrix =>\n    matrix(\n        (mat.toArray() as number[][])\n            .filter((_, i) => !world.bots[Math.floor(i / 3)].fixed)\n            .map(vector => removeFixedFromVector(world)(matrix(vector)).toArray() as number[])\n    );\n\nexport const assembleMatrix = (world: World, fun: (a: Bot, b: Bot, edge: number) => Matrix): Matrix => {\n    const size = 3 * world.edges.size()[0];\n    let result = matrix(zeros(size, size));\n    (world.edges.toArray() as number[][]).forEach((row, i) => {\n        row.forEach((edge, j) => {\n            if (i === j) return;\n            const s = fun(world.bots[i], world.bots[j], edge);\n            const ri = range(3 * i, 3 * i + 3);\n            const rj = range(3 * j, 3 * j + 3);\n            const ii = index(ri, ri);\n            const ij = index(ri, rj);\n            result = subset(result, ii, subtract(subset(result, ii), s));\n            result = subset(result, ij, add(subset(result, ij), s));\n        });\n    });\n    return removeFixedFromMatrix(world)(result);\n};\n\nexport const stiffnessMatrix = (world: World): Matrix => assembleMatrix(world, stiffnessPair);\n\nexport const stiffnessMatrixDerivativeBot = (bot: Bot) => (dim: number) => (world: World): Matrix =>\n    assembleMatrix(world, stiffnessPairDerivative(bot)(dim));\n\nexport const stiffnessMatrixDerivativeEdge = (i: number, j: number) => (world: World): Matrix => {\n    const list = [...Array(world.bots.length)].map(() => 0);\n    const edges = list.map(() => list);\n    edges[i][j] = edges[j][i] = 1;\n    const w = update(world, {\n        edges: { $set: matrix(edges) }\n    });\n    return stiffnessMatrix(w);\n};\n\nexport const forceMatrix = (world: World): Matrix =>\n    removeFixedFromVector(world)(matrix(world.bots.map(bot => [0, -bot.weight, 0]).flat()));\n\nexport const compliance = (world: World): number => {\n    const f = forceMatrix(world);\n    const k = stiffnessMatrix(world);\n    const ft = transpose(f);\n    const kInv = inv(k);\n    return (multiply(multiply(ft, kInv), f) as unknown) as number;\n};\n\nconst mult = (b: Matrix) => (a: Matrix) => multiply(a, b);\n\nexport const complianceDerivative = (func: (world: World) => Matrix) => (world: World): number => {\n    const f = forceMatrix(world);\n    const dk = func(world);\n    const k = stiffnessMatrix(world);\n    const ft = transpose(f);\n    const kInv = inv(k);\n    return -((pipe(ft, mult(kInv), mult(dk), mult(kInv), mult(f)) as unknown) as number);\n};\n\nexport const complianceDerivativeBot = (bot: Bot) => (dim: number) => (world: World): number =>\n    complianceDerivative(stiffnessMatrixDerivativeBot(bot)(dim))(world);\n\nexport const complianceDerivativeEdge = (i: number, j: number) => (world: World): number =>\n    complianceDerivative(stiffnessMatrixDerivativeEdge(i, j))(world);\n\nexport const distancePenalty = (d: Matrix): number => (dot(d, d) - 1) ** 2;\n\nexport const distancePenaltyDerivative = (dim: number) => (d: Matrix): number => 4 * (dot(d, d) - 1) * d.get([dim]);\n\nexport const distancePenaltyPair = (a: Bot, b: Bot, edge: number): number =>\n    multiply(distancePenalty(subtract(b.pos, a.pos) as Matrix), edge);\n\nexport const distancePenaltyPairDerivative = (dim: number) => (a: Bot, b: Bot, edge: number): number =>\n    multiply(distancePenaltyDerivative(dim)(subtract(b.pos, a.pos) as Matrix), edge);\n\nexport const distancePenaltyTotal = (world: World): number => {\n    let sum = 0;\n    (world.edges.toArray() as number[][]).forEach((row, i) => {\n        row.forEach((edge, j) => {\n            if (i >= j) return;\n            sum += distancePenaltyPair(world.bots[i], world.bots[j], edge);\n        });\n    });\n    return sum;\n};\n\nexport const distancePenaltyTotalDerivativeBot = (bot: Bot) => (dim: number) => (world: World): number => {\n    let sum = 0;\n    (world.edges.toArray() as number[][]).forEach((row, i) => {\n        row.forEach((edge, j) => {\n            if (world.bots[j] !== bot) return;\n            sum += distancePenaltyPairDerivative(dim)(world.bots[i], world.bots[j], edge);\n        });\n    });\n    return sum;\n};\n\nexport const distancePenaltyTotalDerivativeEdge = (i: number, j: number) => (world: World): number =>\n    distancePenaltyPair(world.bots[i], world.bots[j], 1);\n\nexport const objective = (world: World): number => compliance(world) + distancePenaltyTotal(world);\n\nexport const objectiveDerivativeBot = (w: number) => (bot: Bot) => (dim: number) => (world: World): number =>\n    complianceDerivativeBot(bot)(dim)(world) * (1 - w) + distancePenaltyTotalDerivativeBot(bot)(dim)(world) * w;\n\nexport const objectiveDerivativeEdge = (w: number) => (i: number, j: number) => (world: World): number =>\n    complianceDerivativeEdge(i, j)(world) * (1 - w) + distancePenaltyTotalDerivativeEdge(i, j)(world) * w;\n\nexport const optimizeStepBots = (stepSize: number) => (w: number) => (world: World): World => {\n    const maxDist = 0.3;\n    const newBots = world.bots.map(bot => {\n        if (bot.fixed) return bot;\n        const d = [0, 1, 2].map(dim => objectiveDerivativeBot(w)(bot)(dim)(world));\n        let move = multiply(matrix(d), stepSize);\n        const moveDist = Math.sqrt(dot(move, move));\n        if (moveDist > maxDist) move = multiply(move, maxDist / moveDist);\n        return setPos(subtract(bot.pos, move) as Matrix)(bot);\n    });\n    return setBots(newBots)(world);\n};\n\nexport const optimizeStepEdges = (stepSize: number) => (w: number) => (world: World): World => {\n    const newEdges = world.edges.toArray() as number[][];\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = 0; j < world.bots.length; ++j) {\n            if (i === j) continue;\n            const d = objectiveDerivativeEdge(w)(i, j)(world);\n            newEdges[i][j] = world.edges.get([i, j]) - d * stepSize;\n            newEdges[i][j] = Math.max(newEdges[i][j], 0.001);\n            newEdges[i][j] = Math.min(newEdges[i][j], 1);\n        }\n    }\n    return update(world, {\n        edges: { $set: matrix(newEdges) }\n    });\n};\n\nexport const resolveCollisionStep = (world: World): World => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (world.bots[i].fixed && world.bots[j].fixed) continue;\n            const oneFixed = world.bots[i].fixed || world.bots[j].fixed;\n            const d = subtract(world.bots[j].pos, world.bots[i].pos) as Matrix;\n            const dist = Math.sqrt(dot(d, d));\n            if (dist > 1) continue;\n            const n = multiply(divide(d, dist), (1 - dist) / (oneFixed ? 1 : 2));\n            if (!world.bots[i].fixed)\n                world.bots[i] = update(world.bots[i], { pos: { $set: subtract(world.bots[i].pos, n) as Matrix } });\n            if (!world.bots[j].fixed)\n                world.bots[j] = update(world.bots[j], { pos: { $set: add(world.bots[j].pos, n) as Matrix } });\n        }\n    }\n    return world;\n};\n\nexport const resolveCollision = (world: World): World => {\n    let result = world;\n    for (let i = 0; i < 10; ++i) result = resolveCollisionStep(result);\n    return result;\n};\n\nexport const optimizeStep = (stepSize: number) => (w: number) => (world: World): World => {\n    return pipe(world, optimizeStepBots(stepSize)(w), optimizeStepEdges(stepSize)(w), resolveCollision);\n};\n\nexport const optimize = (world: World): World => {\n    let result = world;\n    for (let i = 0; i < 100; ++i) {\n        result = optimizeStep(0.01)(0.5)(result);\n        console.log(result.bots[3].pos.toArray());\n        console.log(result.edges.toArray());\n    }\n    return result;\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { PerspectiveCamera, WebGLRenderer, Scene } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { pipe } from \"ts-pipe-compose\";\nimport { matrix } from \"mathjs\";\nimport { Bot, World } from \"./core\";\nimport { newScene, addSphere } from \"./draw\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst randomBot = () => Bot.setPos(matrix([Math.random(), Math.random(), Math.random()].map(x => x * 3)))(Bot.newBot());\n\nconst bot1 = Bot.setFixed(true)(Bot.newBot());\nconst bot2 = Bot.setFixed(true)(Bot.setPos(matrix([2, 0, 0]))(Bot.newBot()));\nconst bot3 = Bot.setFixed(true)(Bot.setPos(matrix([0, 0, 2]))(Bot.newBot()));\nconst bots = [bot1, bot2, bot3, randomBot(), randomBot(), randomBot(), randomBot()];\nlet world = pipe(World.newWorld(), World.setBots(bots), World.initEdges);\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [scene, setScene] = useState<Scene>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && scene && camera) renderer.render(scene, camera);\n        if (Math.random() < 0.9) return;\n        setScene(world.bots.map(bot => addSphere(bot.pos)).reduce((x, fn) => fn(x), newScene()));\n        world = World.optimizeStep(0.1)(0.9)(world);\n    }, [controls, renderer, scene, camera, frame]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Microbots</b>\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import { Matrix } from \"mathjs\";\nimport {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial\n} from \"three\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const addSphere = (pos: Matrix) => (scene: Scene): Scene => {\n    const mat = new Matrix4()\n        .setPosition(new Vector3(...(pos.toArray() as number[])))\n        .scale(new Vector3(0.5, 0.5, 0.5));\n    const geom = new SphereGeometry(1, 16, 16).applyMatrix4(mat);\n    geom.computeVertexNormals();\n    const color = new Color(0, 1, 0);\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.matrixAutoUpdate = false;\n    mesh.matrix = mat;\n    mesh.updateMatrix();\n    scene.add(mesh);\n    return scene;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}