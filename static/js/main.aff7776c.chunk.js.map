{"version":3,"sources":["core/Animation.ts","core/Vec3.ts","core/Bot.ts","core/BoundingBox.ts","core/Mat3.ts","core/conjugateGradientSparse.ts","core/delaunay.ts","core/utils.ts","core/World.ts","core/PriorityQueue.ts","core/aStar.ts","core/resolveOverlap.ts","Gui/Dynamic.tsx","assets/grass.jpg","Gui/draw.ts","Gui/Canvas.tsx","examples/arc.ts","Gui/Scene.tsx","examples/utils/index.ts","examples/bigArc.ts","examples/brachiation.ts","examples/bigCube.ts","examples/box.ts","examples/bridgeToPyramid1000.ts","examples/crane.ts","examples/floorTransport.ts","examples/frameTransport.ts","examples/planeToBridge1000.ts","examples/platform.ts","examples/platforms.ts","examples/platformsTall.ts","examples/pyramidToPlane1000.ts","examples/rollingBox.ts","examples/stack.ts","examples/towersShort.ts","examples/towersTall.ts","examples/transformer.ts","examples/transport.ts","examples/verticalTransport.ts","examples/wall.ts","examples/planeToBridge10000.ts","examples/index.ts","Gui/SelectExample.tsx","Gui/Static.tsx","Gui/index.tsx","index.tsx"],"names":["ContractionType","newVec3","x","y","z","clone","a","add","b","addEq","sub","subEq","multiplyScalar","s","dot","length","Math","sqrt","dist","normalize","dir","min","max","bot","pos","Vec3","fixed","boundingBox","r","merge","i","j","apply","result","addVecMultNum","c","matMultVec","A","v","conditionVector","sum","floor","ldiv","bCopy","Array","fill","preconditioner","conditionMatrix","Ap","p","pOld","rsold","alpha","rsnew","cg","orient","m","Simplex","vertices","adjacent","boundary","lastVisited","this","t","u","GlueFacet","cell","index","Triangulation","simplices","interior","tuple","filter","point","n","verts","toVisit","pop","undefined","cellAdj","neighbor","nv","vv","o","push","initIndex","cellVerts","prev","tovisit","indexOf","glueFacets","indexOfN","indexOfNeg1","na","vverts","slice","vadj","ncell","opposite","flip","uu","nface","nptr","k","sort","l1","m1","d","l0","m0","compareCells","ai","bi","walk","handleBoundaryDegeneracy","addPeaks","cells","nc","bcell","cv","ptr","parity","LiftedPoint","triangulate","points","lifted","upper","l","dpoints","dindex","h","hull","Error","initialSimplex","initialCoords","initialCell","list","adj","triangles","insert","incrementalConvexHull","outerProduct","minAcc","v1","v2","v4","v5","q1","q2","q4","q5","newWorld","bots","world","map","Bot","edgeStrength","offset","slack","stiffness","stiffnessGround","edgeStrengthGround","stiffnessDerivative","dim","epsilon","val","dPlus","dMinus","plus","Mat3","stiffnessMatrix","friction","neigh","sx","sy","sz","forEach","stiffnessPair","displacement","before","after","dt","g","f","_","acc","forceMatrix","neighbors","neighborRadius","con","gradient","overlapPenalty","uBefore","uAfter","beforeBefore","afterAfter","udku","vi","stiffnessPairDerivative","vj","svisvj","diff","dest","connections","positions","rng","Prando","tri","Object","keys","key","Number","delaunay","next","BoundingBox","PriorityQueue","comparator","elements","first","peek","last","size","current","largest","left","right","compare","swap","element","parent","aux","backtrack","halfDist","prevCell","d1","w","round","grid","start","end","e","exactMidpoint","checked","check","distEstimate","iter","midpoint","createGrid","bb","World","ceil","addToGrid","dx","dy","dz","value","prevPos","dLength","anyObstacles","some","average","ao","aStar","avg","optimize","animation","iterations","vel","grad","displacements","contract","type","validConnections","Delaunay","Mst","shift","includes","isValidConnection","resolveOverlap","minimizeAcceleration","createAnimation","config","t1","t2","t3","time","Date","now","range","botsToGrid","tooFast","maxAcc","resultPrev","tf","console","log","contractIterations","contractionType","optimizeIterations","gravity","botMass","minimizeAccelerationIterations","subdivideIterations","Dynamic","props","useState","pause","setPause","path","setPath","step","worldPrev","worldEnd","setWorldPrev","setWorld","Animation","useEffect","setInterval","clearInterval","worldStart","List","ListItem","Button","variant","onClick","update","$set","newScene","scene","Scene","geo","PlaneBufferGeometry","textureGrass","TextureLoader","load","grass","wrapS","RepeatWrapping","wrapT","repeat","set","mat","MeshPhongMaterial","color","Color","plane","Mesh","rotateX","PI","castShadow","receiveShadow","AmbientLight","light","DirectionalLight","position","shadowCameraRight","shadowCameraLeft","shadowCameraTop","shadowCameraBottom","shadowMapWidth","shadowMapHeight","screenshotWidth","screenshotHeight","screenshotRenderer","WebGLRenderer","antialias","setClearColor","setSize","shadowMapEnabled","shadowMapType","PCFSoftShadowMap","Canvas","width","useWindowWidth","height","fov","setFov","mount","useRef","controls","setControls","camera","setCamera","renderer","setRenderer","zoom","setZoom","saveScreenshots","setSaveScreenshots","align","setAlign","saveImage","cam","aspect","updateProjectionMatrix","document","createElement","render","href","domElement","toDataURL","replace","download","click","mc","PerspectiveCamera","lookAt","ren","appendChild","ctrls","OrbitControls","enableDamping","dampingFactor","removeChild","window","ref","center","target","object","input","prompt","parseFloat","TextField","label","onChange","zoomNew","fovNew","Select","MenuItem","join","FormControlLabel","control","Switch","setScene","botMeshes","setBotMeshes","renderedWorld","setRenderedWorld","geom","SphereGeometry","computeVertexNormals","faces","face","vertexColors","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","geometry","scale","newSphere","scn","createBots","coords","createWorld","createExample","title","fixedBots","startBots","endBots","arc","angle","cos","sin","flat","pillar","barZ","platform","bar","h1","h2","box","parabola","from","to","dh","pryramid","d2","d3","abs","frame","tower","space","bridge","examples","bigArc","bigCube","brachiation","bridgeToPyramid1000","crane","floorTransport","frameTransport","planeToBridge1000","platforms","platformsTall","pyramidToPlane1000","rollingBox","stack","towersShort","towersTall","transformer","transport","verticalTransport","wall","SelectExample","selectedExample","setSelectedExample","exampleButton","example","loadExample","ws","we","rand","onSelect","examplesNoFixed","examplesFixed","Static","setTime","setAnimation","pauseFrames","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","App","classes","setWorldStart","setWorldEnd","dynamic","setDynamic","Fibers","setConfig","worldCenter","Grid","container","item","xs","style","overflowX","overflowY","direction","fontSize","className","entries","isNaN","ReactDOM","StrictMode","Gui","getElementById"],"mappings":"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","file":"static/js/main.aff7776c.chunk.js","sourcesContent":["import * as Bot from \"./Bot\";\nimport * as Vec3 from \"./Vec3\";\nimport * as World from \"./World\";\n\nimport aStar, { Grid, botsToGrid } from \"./aStar\";\nimport resolveOverlap from \"./resolveOverlap\";\nimport { minAcc } from \"./utils\";\n\nconst anyObstacles = (world: World.World): boolean => world.bots.some(bot => bot.fixed);\n\nconst average = (grid: Grid, start: World.World, end: World.World): World.World => {\n    const ao = anyObstacles(start);\n    const avg = (a: Bot.Bot, b: Bot.Bot): Bot.Bot => {\n        const result = Bot.clone(a);\n        if (ao) result.pos = aStar(grid, a.pos, b.pos);\n        else result.pos = Vec3.multiplyScalar(Vec3.add(a.pos, b.pos), 0.5);\n        return result;\n    };\n    const result = World.newWorld();\n    result.bots = start.bots.map((b, i) => avg(b, end.bots[i]));\n    return result;\n};\n\nconst gradient = (\n    offset: number,\n    slack: number,\n    friction: number,\n    overlapPenalty: number,\n    animation: World.World[],\n    dt: number,\n    g: number,\n    m: number,\n    neighbors: number[][][]\n): Vec3.Vec3[][] => {\n    const result = [...Array(animation.length)].map(() =>\n        [...Array(animation[0].bots.length)].map(() => Vec3.newVec3(0, 0, 0))\n    );\n    const displacements = animation.map(() => [...Array(3 * animation[0].bots.length)].map(() => 0));\n    for (let i = 0; i < animation.length; ++i) {\n        const before = animation[Math.max(i - 1, 0)];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        displacements[i] = World.displacement(\n            offset,\n            slack,\n            friction,\n            before,\n            after,\n            dt,\n            g,\n            m,\n            animation[i],\n            neighbors[i]\n        );\n    }\n    for (let i = 1; i < animation.length; ++i) {\n        const beforeBefore = animation[Math.max(i - 2, 0)];\n        const before = animation[i - 1];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        const afterAfter = animation[Math.min(i + 2, animation.length - 1)];\n        result[i] = World.gradient(\n            offset,\n            slack,\n            friction,\n            overlapPenalty,\n            displacements[i - 1],\n            displacements[i],\n            displacements[Math.min(i + 1, animation.length - 1)],\n            beforeBefore,\n            before,\n            after,\n            afterAfter,\n            dt,\n            animation[i],\n            neighbors[i],\n            i / (animation.length - 1)\n        );\n    }\n    return result;\n};\n\nconst optimize = (\n    offset: number,\n    slack: number,\n    friction: number,\n    overlapPenalty: number,\n    animation: World.World[],\n    dt: number,\n    g: number,\n    m: number,\n    iterations: number\n): void => {\n    const acc = 0.01;\n    const vel = animation.map(world => world.bots.map(() => Vec3.newVec3(0, 0, 0)));\n    const connections = animation.map(world => World.connections(world.bots.map(bot => bot.pos)));\n    const neighbors = animation.map((world, i) =>\n        world.bots.map((_, j) => World.neighbors(offset + slack / 2, world, connections[i], j))\n    );\n    for (let iter = 0; iter < iterations; ++iter) {\n        let grad = gradient(offset, slack, friction, overlapPenalty, animation, dt, g, m, neighbors);\n        grad = grad.map(world => world.map(v => Vec3.multiplyScalar(v, -acc / (1e-4 + Vec3.length(v)))));\n        animation.forEach((world, i) => {\n            if (i <= 1 || i >= animation.length - 2) return;\n            world.bots.forEach((bot, j) => {\n                if (bot.fixed) return;\n                vel[i][j] = Vec3.add(vel[i][j], grad[i][j]);\n                vel[i][j] = Vec3.multiplyScalar(vel[i][j], 0.9);\n                bot.pos = Vec3.add(bot.pos, vel[i][j]);\n            });\n        });\n    }\n};\n\nconst dist = (a: Bot.Bot, b: Bot.Bot): number => Vec3.length(Vec3.sub(b.pos, a.pos));\n\nexport enum ContractionType {\n    Mst,\n    Fibers,\n    Delaunay\n}\n\nconst isValidConnection = (\n    world: World.World,\n    connections: number[][],\n    i: number,\n    j: number,\n    type: ContractionType\n): boolean => {\n    if (type === ContractionType.Delaunay) return true;\n    if (type === ContractionType.Mst) {\n        if (j === -1) {\n            const d = world.bots[i].pos[1] + 0.5;\n            const checked = [...Array(world.bots.length)].map(() => false);\n            const check: number[] = [];\n            for (let k = 0; k < world.bots.length; ++k) {\n                if (world.bots[k].pos[1] + 0.5 < d) check.push(k);\n            }\n            while (check.length > 0) {\n                const k = check.shift();\n                if (k === undefined) break;\n                if (checked[k]) continue;\n                checked[k] = true;\n                for (let c = 0; c < connections[k].length; ++c) {\n                    const l = connections[k][c];\n                    if (l === -1) continue;\n                    if (Vec3.dist(world.bots[k].pos, world.bots[l].pos) < d) check.push(l);\n                }\n            }\n            return !checked[i];\n        }\n        const d = Vec3.dist(world.bots[i].pos, world.bots[j].pos);\n        const checked = [...Array(world.bots.length)].map(() => false);\n        const check: number[] = [];\n        for (let k = 0; k < world.bots.length; ++k) {\n            if (world.bots[k].pos[1] + 0.5 < d) check.push(k);\n        }\n        while (check.length > 0) {\n            const k = check.shift();\n            if (k === undefined) break;\n            if (checked[k]) continue;\n            checked[k] = true;\n            for (let c = 0; c < connections[k].length; ++c) {\n                const l = connections[k][c];\n                if (l === -1) continue;\n                if (Vec3.dist(world.bots[k].pos, world.bots[l].pos) < d) check.push(l);\n            }\n        }\n        return !(checked[i] && checked[j]);\n    }\n    if (j === -1) {\n        const a = world.bots[i];\n        return !connections[i].some(k => {\n            if (k === -1) return false;\n            const b = world.bots[k];\n            return (\n                Vec3.dist(b.pos, [a.pos[0], -0.5, b.pos[2]]) < a.pos[1] + 0.5 &&\n                Vec3.dist(a.pos, b.pos) < a.pos[1] + 0.5\n            );\n        });\n    }\n    for (let c = 0; c < connections[i].length; ++c) {\n        const k = connections[i][c];\n        if (!connections[j].includes(k)) continue;\n        if (k === -1) continue;\n        if (k === i) continue;\n        if (k === j) continue;\n        if (\n            dist(world.bots[i], world.bots[j]) > world.bots[i].pos[1] + 0.5 &&\n            dist(world.bots[i], world.bots[j]) > world.bots[j].pos[1] + 0.5\n        )\n            return false;\n        if (\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[i], world.bots[k]) &&\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[k], world.bots[j])\n        )\n            return false;\n        if (\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[j], world.bots[k]) &&\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[i], world.bots[k])\n        )\n            return false;\n    }\n    return true;\n};\n\nconst contract = (world: World.World, iterations: number, type: ContractionType): void => {\n    const connections = World.connections(world.bots.map(bot => bot.pos));\n    const validConnections: [number, number][] = [];\n    connections.forEach((list, i) => {\n        list.forEach(j => {\n            if (j !== -1 && i >= j) return;\n            if (!isValidConnection(world, connections, i, j, type)) return;\n            validConnections.push([i, j]);\n        });\n    });\n    const frac = 1;\n    for (let iter = 0; iter < iterations; ++iter) {\n        validConnections.forEach(([i, j]) => {\n            if (j === -1) {\n                world.bots[i].pos[1] += frac * (0.5 - world.bots[i].pos[1]);\n                return;\n            }\n            const d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const dLength = Vec3.length(d);\n            if (dLength < 1) return;\n            const n = Vec3.multiplyScalar(d, frac * ((1 - dLength) / dLength / 2));\n            if (world.bots[j].fixed) Vec3.subEq(world.bots[i].pos, n);\n            else Vec3.addEq(world.bots[j].pos, n);\n            if (world.bots[i].fixed) Vec3.addEq(world.bots[j].pos, n);\n            else Vec3.subEq(world.bots[i].pos, n);\n        });\n    }\n    resolveOverlap(world.bots);\n};\n\nconst minimizeAcceleration = (animation: World.World[], dt: number): void => {\n    const frac = 0.5;\n    for (let i = 2; i < animation.length - 2; ++i) {\n        animation[i].bots.forEach((bot, j) => {\n            if (bot.fixed) return;\n            const p = minAcc(\n                animation[i - 2].bots[j].pos,\n                animation[i - 1].bots[j].pos,\n                animation[i + 1].bots[j].pos,\n                animation[i + 2].bots[j].pos\n            );\n            bot.pos = Vec3.add(Vec3.multiplyScalar(bot.pos, 1 - frac), Vec3.multiplyScalar(p, frac));\n        });\n    }\n    animation.forEach(world => resolveOverlap(world.bots));\n};\n\nconst maxAcc = (prev: World.World, now: World.World, next: World.World, dt: number): number => {\n    let result = 0;\n    for (let i = 0; i < now.bots.length; ++i) {\n        const v1 = Vec3.multiplyScalar(Vec3.sub(now.bots[i].pos, prev.bots[i].pos), 1 / dt);\n        const v2 = Vec3.multiplyScalar(Vec3.sub(next.bots[i].pos, now.bots[i].pos), 1 / dt);\n        const a = Vec3.multiplyScalar(Vec3.sub(v2, v1), 1 / dt);\n        result = Math.max(result, Vec3.length(a));\n    }\n    return result;\n};\n\nexport type Config = {\n    subdivideIterations: number;\n    optimizeIterations: number;\n    contractionType: ContractionType;\n    contractIterations: number;\n    minimizeAccelerationIterations: number;\n    offset: number;\n    slack: number;\n    friction: number;\n    overlapPenalty: number;\n    gravity: number;\n    botMass: number;\n    dt: number;\n};\n\nexport const createAnimation = (\n    beforeBefore: World.World,\n    before: World.World,\n    after: World.World,\n    afterAfter: World.World,\n    config: Config\n): World.World[] => {\n    const ao = anyObstacles(before);\n    let t1 = 0;\n    let t2 = 0;\n    let t3 = 0;\n    const time = Date.now();\n    let result = [World.clone(beforeBefore), World.clone(before), World.clone(after), World.clone(afterAfter)];\n    const maxAccLimit = 0.2;\n    const fixed = before.bots.filter(bot => bot.fixed);\n    const grid = botsToGrid(fixed);\n    for (let iter = 0; iter < config.subdivideIterations; ++iter) {\n        const tooFast = result.map((world, i) => {\n            if (i <= 1 || i >= result.length - 1) return false;\n            return maxAcc(result[i - 1], world, result[i + 1], config.dt) > maxAccLimit;\n        });\n        if (!tooFast.some(x => x)) break;\n        const resultPrev = [...result];\n        result = [result[0]];\n        tooFast.forEach((tf, i) => {\n            if (i === 0) return;\n            if (tf) result.push(average(grid, result[result.length - 1], resultPrev[i]));\n            result.push(resultPrev[i]);\n        });\n        console.log(\"Iteration:\", iter);\n        console.log(\"Time slices:\", result.length);\n        let t = Date.now();\n        for (let i = 2; i < result.length - 2; ++i)\n            contract(result[i], config.contractIterations, config.contractionType);\n        t1 += Date.now() - t;\n        t = Date.now();\n        if (config.optimizeIterations > 0)\n            optimize(\n                config.offset,\n                config.slack,\n                config.friction,\n                config.overlapPenalty,\n                result,\n                config.dt,\n                config.gravity,\n                config.botMass,\n                config.optimizeIterations\n            );\n        t2 += Date.now() - t;\n        t = Date.now();\n        if (iter > 3) {\n            for (let i = 0; i < config.minimizeAccelerationIterations; ++i) {\n                minimizeAcceleration(result, config.dt);\n            }\n        }\n        t3 += Date.now() - t;\n        console.log(t1 / 1000, t2 / 1000, t3 / 1000);\n        result.forEach(world =>\n            world.bots.forEach((bot, i) => {\n                if (bot.fixed) bot.pos = Vec3.clone(before.bots[i].pos);\n            })\n        );\n        console.log(\"Time:\", (Date.now() - time) / 1000, \"seconds\");\n    }\n    console.log(\"done\");\n    return result.slice(1, result.length - 1);\n};\n","export type Vec3 = [number, number, number];\n\nexport const newVec3 = (x: number, y: number, z: number): Vec3 => [x, y, z];\n\nexport const clone = (a: Vec3): Vec3 => [a[0], a[1], a[2]];\n\nexport const add = (a: Vec3, b: Vec3): Vec3 => [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n\nexport const addEq = (a: Vec3, b: Vec3): void => {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n};\n\nexport const sub = (a: Vec3, b: Vec3): Vec3 => [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n\nexport const subEq = (a: Vec3, b: Vec3): void => {\n    a[0] -= b[0];\n    a[1] -= b[1];\n    a[2] -= b[2];\n};\n\nexport const multiplyScalar = (a: Vec3, s: number): Vec3 => [a[0] * s, a[1] * s, a[2] * s];\n\nexport const dot = (a: Vec3, b: Vec3): number => a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\nexport const length = (a: Vec3): number => Math.sqrt(dot(a, a));\n\nexport const dist = (a: Vec3, b: Vec3): number => length(sub(a, b));\n\nexport const normalize = (a: Vec3): Vec3 => multiplyScalar(a, 1 / length(a));\n\nexport const dir = (a: Vec3, b: Vec3): Vec3 => normalize(sub(a, b));\n\nexport const min = (a: Vec3, b: Vec3): Vec3 => [Math.min(a[0], b[0]), Math.min(a[1], b[1]), Math.min(a[2], b[2])];\n\nexport const max = (a: Vec3, b: Vec3): Vec3 => [Math.max(a[0], b[0]), Math.max(a[1], b[1]), Math.max(a[2], b[2])];\n","import * as BoundingBox from \"./BoundingBox\";\nimport * as Vec3 from \"./Vec3\";\n\nexport type Bot = {\n    pos: Vec3.Vec3;\n    fixed: boolean;\n};\n\nexport const clone = (bot: Bot): Bot => ({ pos: Vec3.clone(bot.pos), fixed: bot.fixed });\n\nexport const boundingBox = (bot: Bot): BoundingBox.BoundingBox => {\n    const r: Vec3.Vec3 = [0.5, 0.5, 0.5];\n    return {\n        min: Vec3.sub(bot.pos, r),\n        max: Vec3.add(bot.pos, r)\n    };\n};\n","import * as Vec3 from \"./Vec3\";\n\nexport type BoundingBox = {\n    min: Vec3.Vec3;\n    max: Vec3.Vec3;\n};\n\nexport const merge = (a: BoundingBox, b: BoundingBox): BoundingBox => ({\n    min: Vec3.min(a.min, b.min),\n    max: Vec3.max(a.max, b.max)\n});\n","import * as Vec3 from \"./Vec3\";\n\nexport type Mat3 = [Vec3.Vec3, Vec3.Vec3, Vec3.Vec3];\n\nexport const newMat3 = (x: Vec3.Vec3, y: Vec3.Vec3, z: Vec3.Vec3): Mat3 => [x, y, z];\n\nexport const add = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] += b[i][j];\n        }\n    }\n};\n\nexport const sub = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] -= b[i][j];\n        }\n    }\n};\n\nexport const multiplyScalar = (a: Mat3, s: number): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] *= s;\n        }\n    }\n};\n\nexport const apply = (a: Mat3, b: Vec3.Vec3): Vec3.Vec3 => {\n    const result: Vec3.Vec3 = [0, 0, 0];\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            result[i] += a[i][j] * b[j];\n        }\n    }\n    return result;\n};\n","export type SparseSymmetric = [number, number][][];\n\nconst clone = (a: number[], result: number[]): void => {\n    for (let i = 0; i < a.length; ++i) result[i] = a[i];\n};\n\nconst dot = (a: number[], b: number[]): number => {\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) {\n        result += a[i] * b[i];\n    }\n    return result;\n};\n\nconst addVecMultNum = (a: number[], b: number[], c: number): void => {\n    for (let i = 0; i < a.length; ++i) a[i] += b[i] * c;\n};\n\nconst matMultVec = (A: SparseSymmetric, b: number[], result: number[]): void => {\n    for (let i = 0; i < result.length; ++i) result[i] = 0;\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            const v = A[i][c][1];\n            result[i] += v * b[j];\n            if (i === j) continue;\n            result[j] += v * b[i];\n        }\n    }\n};\n\nconst cg = (A: SparseSymmetric, b: number[]): number[] => {\n    const x = Array(b.length).fill(0);\n    const r = Array(b.length);\n    clone(b, r);\n    const Ap = Array(b.length);\n    matMultVec(A, x, Ap);\n    addVecMultNum(r, Ap, -1);\n    const p = Array(r.length);\n    const pOld = Array(p.length);\n    clone(r, p);\n    let rsold = dot(r, r);\n    for (let i = 0; i < 20; ++i) {\n        matMultVec(A, p, Ap);\n        const alpha = rsold / dot(p, Ap);\n        addVecMultNum(x, p, alpha);\n        addVecMultNum(r, Ap, -alpha);\n        const rsnew = dot(r, r);\n        clone(p, pOld);\n        clone(r, p);\n        addVecMultNum(p, pOld, rsnew / rsold);\n        rsold = rsnew;\n    }\n    return x;\n};\n\nconst preconditioner = (A: SparseSymmetric, b: number[]): number[] => {\n    const sum = Array(b.length / 3).fill(0);\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const [j, v] = A[i][c];\n            if (Math.floor(i / 3) !== Math.floor(j / 3)) continue;\n            sum[Math.floor(i / 3)] += v;\n            if (i === j) continue;\n            sum[Math.floor(j / 3)] += v;\n        }\n    }\n    for (let i = 0; i < sum.length; ++i) sum[i] = Math.sqrt(Math.sqrt(3 / sum[i]));\n    return sum;\n};\n\nconst conditionMatrix = (sum: number[], A: SparseSymmetric): void => {\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            A[i][c][1] *= sum[Math.floor(i / 3)];\n            A[i][c][1] *= sum[Math.floor(j / 3)];\n        }\n    }\n};\n\nconst conditionVector = (sum: number[], b: number[]): void => {\n    for (let i = 0; i < b.length; ++i) {\n        b[i] *= sum[Math.floor(i / 3)];\n    }\n};\n\nexport const ldiv = (A: SparseSymmetric, b: number[]): number[] => {\n    const bCopy = Array(b.length);\n    clone(b, bCopy);\n    const sum = preconditioner(A, bCopy);\n    conditionMatrix(sum, A);\n    conditionVector(sum, bCopy);\n    const x = cg(A, bCopy);\n    conditionVector(sum, x);\n    return x;\n};\n","const orient = (m: number[][]) =>\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[2][2] +\n        (m[2][1] * m[4][0] - m[4][1] * m[2][0]) * -m[3][2] +\n        (m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[4][2]) *\n        m[1][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[3][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[4][2]) *\n        -m[2][3] +\n    ((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[2][2] +\n        (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[4][2]) *\n        m[3][3] +\n    ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[1][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * -m[2][2] +\n        (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[3][2]) *\n        -m[4][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[3][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[4][2]) *\n        m[0][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[0][2] +\n        (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[3][2] +\n        (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * m[4][2]) *\n        -m[1][3] +\n    (((m[1][1] * m[4][0] - m[4][1] * m[1][0]) * m[0][2] +\n        (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[1][2] +\n        (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[4][2]) *\n        m[3][3] +\n        ((m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[3][2]) *\n            -m[4][3] +\n        ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[1][2] +\n            (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * -m[2][2] +\n            (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[3][2]) *\n            m[0][3] +\n        ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[2][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[3][2]) *\n            -m[1][3] +\n        ((m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[3][2]) *\n            m[2][3] +\n        ((m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[2][2]) *\n            -m[3][3]) -\n    (((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[2][2] +\n        (m[2][1] * m[4][0] - m[4][1] * m[2][0]) * -m[3][2] +\n        (m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[4][2]) *\n        m[0][3] +\n        ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[0][2] +\n            (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[3][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * m[4][2]) *\n            -m[2][3] +\n        (((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[0][2] +\n            (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[2][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[4][2]) *\n            m[3][3] +\n            ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[0][2] +\n                (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[2][2] +\n                (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[3][2]) *\n                -m[4][3]) +\n        (((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[1][2] +\n            (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[2][2] +\n            (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[4][2]) *\n            m[0][3] +\n            ((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[0][2] +\n                (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[2][2] +\n                (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[4][2]) *\n                -m[1][3] +\n            (((m[1][1] * m[4][0] - m[4][1] * m[1][0]) * m[0][2] +\n                (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[1][2] +\n                (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[4][2]) *\n                m[2][3] +\n                ((m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[0][2] +\n                    (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * -m[1][2] +\n                    (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[2][2]) *\n                    -m[4][3])));\n\n//Ranks a pair of cells up to permutation\nconst compareCells = (a: number[], b: number[]) => {\n    const l1 = a[0] + a[1];\n    const m1 = b[0] + b[1];\n    let d = l1 + a[2] - (m1 + b[2]);\n    if (d) return d;\n    const l0 = Math.min(a[0], a[1]);\n    const m0 = Math.min(b[0], b[1]);\n    d = Math.min(l0, a[2]) - Math.min(m0, b[2]);\n    if (d) return d;\n    return Math.min(l0 + a[2], l1) - Math.min(m0 + b[2], m1);\n};\n\nclass Simplex {\n    vertices: number[];\n    adjacent: Simplex[];\n    boundary: boolean;\n    lastVisited: number;\n    constructor(vertices: number[], adjacent: Simplex[], boundary: boolean) {\n        this.vertices = vertices;\n        this.adjacent = adjacent;\n        this.boundary = boundary;\n        this.lastVisited = -1;\n    }\n    flip() {\n        const t = this.vertices[0];\n        this.vertices[0] = this.vertices[1];\n        this.vertices[1] = t;\n        const u = this.adjacent[0];\n        this.adjacent[0] = this.adjacent[1];\n        this.adjacent[1] = u;\n    }\n}\n\nclass GlueFacet {\n    vertices: number[];\n    cell: Simplex;\n    index: number;\n    constructor(vertices: number[], cell: Simplex, index: number) {\n        this.vertices = vertices;\n        this.cell = cell;\n        this.index = index;\n    }\n}\n\nclass Triangulation {\n    vertices: number[][];\n    simplices: Simplex[];\n    interior: Simplex[];\n    tuple: number[][];\n    orient: () => number;\n    constructor(vertices: number[][], simplices: Simplex[]) {\n        this.vertices = vertices;\n        this.simplices = simplices;\n        this.interior = simplices.filter(c => !c.boundary);\n        this.tuple = [...this.vertices];\n        this.orient = () => orient(this.tuple);\n    }\n    handleBoundaryDegeneracy(cell: Simplex, point: number[]) {\n        const d = 4;\n        const n = this.vertices.length - 1;\n        const tuple = this.tuple;\n        const verts = this.vertices;\n        const toVisit = [cell];\n        cell.lastVisited = -n;\n        while (toVisit.length > 0) {\n            const c = toVisit.pop();\n            if (c === undefined) break;\n            const cellAdj = c.adjacent;\n            for (let i = 0; i <= d; ++i) {\n                const neighbor = cellAdj[i];\n                if (!neighbor.boundary || neighbor.lastVisited <= -n) continue;\n                const nv = neighbor.vertices;\n                for (let j = 0; j <= d; ++j) {\n                    const vv = nv[j];\n                    if (vv < 0) tuple[j] = point;\n                    else tuple[j] = verts[vv];\n                }\n                const o = this.orient();\n                if (o > 0) return neighbor;\n                neighbor.lastVisited = -n;\n                if (o === 0) toVisit.push(neighbor);\n            }\n        }\n        return null;\n    }\n    walk(point: number[]) {\n        //Alias local properties\n        const n = this.vertices.length - 1;\n        const verts = this.vertices;\n        const tuple = this.tuple;\n\n        //Compute initial jump cell\n        const initIndex = this.interior.length - 1;\n        let cell = this.interior[initIndex];\n\n        //Start walking\n        while (!cell.boundary) {\n            const cellVerts = cell.vertices;\n            const cellAdj = cell.adjacent;\n\n            for (let i = 0; i <= 4; ++i) {\n                tuple[i] = verts[cellVerts[i]];\n            }\n            cell.lastVisited = n;\n\n            //Find farthest adjacent cell\n            for (let i = 0; i <= 4; ++i) {\n                const neighbor = cellAdj[i];\n                if (neighbor.lastVisited >= n) continue;\n                const prev = tuple[i];\n                tuple[i] = point;\n                const o = this.orient();\n                tuple[i] = prev;\n                if (o < 0) {\n                    cell = neighbor;\n                    break;\n                }\n                if (neighbor.boundary) neighbor.lastVisited = -n;\n                else neighbor.lastVisited = n;\n            }\n        }\n\n        return cell;\n    }\n    addPeaks(point: number[], cell: Simplex) {\n        const n = this.vertices.length - 1;\n        const verts = this.vertices;\n        const tuple = this.tuple;\n        const interior = this.interior;\n        const simplices = this.simplices;\n\n        //Walking finished at boundary, time to add peaks\n        const tovisit = [cell];\n\n        //Stretch initial boundary cell into a peak\n        cell.lastVisited = n;\n        cell.vertices[cell.vertices.indexOf(-1)] = n;\n        cell.boundary = false;\n        interior.push(cell);\n\n        //Record a list of all new boundaries created by added peaks so we can glue them together when we are all done\n        const glueFacets = [];\n\n        //Do a traversal of the boundary walking outward from starting peak\n        while (tovisit.length > 0) {\n            const c = tovisit.pop();\n            if (c === undefined) break;\n            //Pop off peak and walk over adjacent cells\n            const cellVerts = c.vertices;\n            const cellAdj = c.adjacent;\n            const indexOfN = cellVerts.indexOf(n);\n            if (indexOfN < 0) continue;\n\n            for (let i = 0; i <= 4; ++i) {\n                if (i === indexOfN) continue;\n\n                //For each boundary neighbor of the cell\n                const neighbor = cellAdj[i];\n                if (!neighbor.boundary || neighbor.lastVisited >= n) continue;\n\n                const nv = neighbor.vertices;\n\n                //Test if neighbor is a peak\n                if (neighbor.lastVisited !== -n) {\n                    //Compute orientation of p relative to each boundary peak\n                    let indexOfNeg1 = 0;\n                    for (let j = 0; j <= 4; ++j) {\n                        if (nv[j] < 0) {\n                            indexOfNeg1 = j;\n                            tuple[j] = point;\n                        } else tuple[j] = verts[nv[j]];\n                    }\n                    const o = this.orient();\n\n                    //Test if neighbor cell is also a peak\n                    if (o > 0) {\n                        nv[indexOfNeg1] = n;\n                        neighbor.boundary = false;\n                        interior.push(neighbor);\n                        tovisit.push(neighbor);\n                        neighbor.lastVisited = n;\n                        continue;\n                    }\n                    neighbor.lastVisited = -n;\n                }\n\n                const na = neighbor.adjacent;\n\n                //Otherwise, replace neighbor with new face\n                const vverts = cellVerts.slice();\n                const vadj = cellAdj.slice();\n                const ncell = new Simplex(vverts, vadj, true);\n                simplices.push(ncell);\n\n                //Connect to neighbor\n                const opposite = na.indexOf(c);\n                if (opposite < 0) continue;\n\n                na[opposite] = ncell;\n                vadj[indexOfN] = neighbor;\n\n                //Connect to cell\n                vverts[i] = -1;\n                vadj[i] = c;\n                cellAdj[i] = ncell;\n\n                //Flip facet\n                ncell.flip();\n\n                //Add to glue list\n                for (let j = 0; j <= 4; ++j) {\n                    const uu = vverts[j];\n                    if (uu < 0 || uu === n) continue;\n                    const nface = new Array(3);\n                    let nptr = 0;\n                    for (let k = 0; k <= 4; ++k) {\n                        const vv = vverts[k];\n                        if (vv < 0 || k === j) continue;\n                        nface[nptr++] = vv;\n                    }\n                    glueFacets.push(new GlueFacet(nface, ncell, j));\n                }\n            }\n        }\n\n        //Glue boundary facets together\n        glueFacets.sort((a, b) => compareCells(a.vertices, b.vertices));\n\n        for (let i = 0; i + 1 < glueFacets.length; i += 2) {\n            const a = glueFacets[i];\n            const b = glueFacets[i + 1];\n            const ai = a.index;\n            const bi = b.index;\n            if (ai < 0 || bi < 0) continue;\n            a.cell.adjacent[a.index] = b.cell;\n            b.cell.adjacent[b.index] = a.cell;\n        }\n    }\n    insert(point: number[]) {\n        //Add point\n        const verts = this.vertices;\n        verts.push(point);\n\n        let cell = this.walk(point);\n        if (!cell) return;\n\n        //Alias local properties\n        const tuple = this.tuple;\n\n        //Degenerate case: If point is coplanar to cell, then walk until we find a non-degenerate boundary\n        for (let i = 0; i <= 4; ++i) {\n            const vv = cell.vertices[i];\n            if (vv < 0) tuple[i] = point;\n            else tuple[i] = verts[vv];\n        }\n        const o = this.orient();\n        if (o < 0) return;\n        if (o === 0) {\n            const c = this.handleBoundaryDegeneracy(cell, point);\n            if (!c) return;\n            cell = c;\n        }\n\n        //Add peaks\n        this.addPeaks(point, cell);\n    }\n    boundary() {\n        const d = 4;\n        const boundary = [];\n        const cells = this.simplices;\n        const nc = cells.length;\n        for (let i = 0; i < nc; ++i) {\n            const c = cells[i];\n            if (c.boundary) {\n                const bcell = new Array(d);\n                const cv = c.vertices;\n                let ptr = 0;\n                let parity = 0;\n                for (let j = 0; j <= d; ++j) {\n                    if (cv[j] >= 0) {\n                        bcell[ptr++] = cv[j];\n                    } else {\n                        parity = j && 1;\n                    }\n                }\n                if (parity === (d && 1)) {\n                    const t = bcell[0];\n                    bcell[0] = bcell[1];\n                    bcell[1] = t;\n                }\n                boundary.push(bcell);\n            }\n        }\n        return boundary;\n    }\n}\n\nconst incrementalConvexHull = (points: number[][]) => {\n    const n = points.length;\n    if (n === 0) {\n        throw new Error(\"Must have at least d+1 points\");\n    }\n    const d = points[0].length;\n    if (n <= d) {\n        throw new Error(\"Must input at least d+1 points\");\n    }\n\n    const initialSimplex = points.slice(0, d + 1);\n\n    //Make sure initial simplex is positively oriented\n    const o = orient(initialSimplex);\n    if (o === 0) {\n        throw new Error(\"Input not in general position\");\n    }\n    const initialCoords = new Array(d + 1);\n    for (let i = 0; i <= d; ++i) {\n        initialCoords[i] = i;\n    }\n    if (o < 0) {\n        initialCoords[0] = 1;\n        initialCoords[1] = 0;\n    }\n\n    //Create initial topological index, glue pointers together (kind of messy)\n    const initialCell = new Simplex(initialCoords, new Array(d + 1), false);\n    const boundary = initialCell.adjacent;\n    const list = new Array(d + 2);\n    for (let i = 0; i <= d; ++i) {\n        const verts = initialCoords.slice();\n        for (let j = 0; j <= d; ++j) {\n            if (j === i) verts[j] = -1;\n        }\n        const t = verts[0];\n        verts[0] = verts[1];\n        verts[1] = t;\n        const cell = new Simplex(verts, new Array(d + 1), true);\n        boundary[i] = cell;\n        list[i] = cell;\n    }\n    list[d + 1] = initialCell;\n    for (let i = 0; i <= d; ++i) {\n        const verts = boundary[i].vertices;\n        const adj = boundary[i].adjacent;\n        for (let j = 0; j <= d; ++j) {\n            const v = verts[j];\n            if (v < 0) {\n                adj[j] = initialCell;\n                continue;\n            }\n            for (let k = 0; k <= d; ++k) {\n                if (boundary[k].vertices.indexOf(v) < 0) {\n                    adj[j] = boundary[k];\n                }\n            }\n        }\n    }\n\n    //Initialize triangles\n    const triangles = new Triangulation(initialSimplex, list);\n\n    //Insert remaining points\n    for (let i = d + 1; i < n; ++i) {\n        triangles.insert(points[i]);\n    }\n\n    //Extract boundary cells\n    return triangles.boundary();\n};\n\nclass LiftedPoint {\n    point: number[];\n    index: number;\n    constructor(p: number[], i: number) {\n        this.point = p;\n        this.index = i;\n    }\n}\n\nconst triangulate = (points: number[][]) => {\n    let n = points.length;\n    if (n === 0) return [];\n\n    //Lift points, sort\n    const lifted = new Array(n);\n    let upper = 1.0;\n    for (let i = 0; i < n; ++i) {\n        const p = points[i];\n        const x = new Array(3 + 1);\n        let l = 0.0;\n        for (let j = 0; j < 3; ++j) {\n            const v = p[j];\n            x[j] = v;\n            l += v * v;\n        }\n        x[3] = l;\n        lifted[i] = new LiftedPoint(x, i);\n        upper = Math.max(l, upper);\n    }\n    lifted.sort((a, b) => {\n        for (let i = 0; i < 5; ++i) {\n            const s = b.point[i] - a.point[i];\n            if (s) return s;\n        }\n        return 0;\n    });\n\n    //Double points\n    n = lifted.length;\n\n    //Create new list of points\n    const dpoints = new Array(n + 3 + 1);\n    const dindex = new Array(n + 3 + 1);\n\n    //Add steiner points at top\n    const u = (3 + 1) * (3 + 1) * upper;\n    const y = new Array(3 + 1);\n    for (let i = 0; i <= 3; ++i) {\n        y[i] = 0.0;\n    }\n    y[3] = u;\n\n    dpoints[0] = y.slice();\n    dindex[0] = -1;\n\n    for (let i = 0; i <= 3; ++i) {\n        const x = y.slice();\n        x[i] = 1;\n        dpoints[i + 1] = x;\n        dindex[i + 1] = -1;\n    }\n\n    //Copy rest of the points over\n    for (let i = 0; i < n; ++i) {\n        const h = lifted[i];\n        dpoints[i + 3 + 1] = h.point;\n        dindex[i + 3 + 1] = h.index;\n    }\n\n    //Construct convex hull\n    let hull = incrementalConvexHull(dpoints);\n    hull = hull.filter(cell => {\n        for (let i = 0; i <= 3; ++i) {\n            const v = dindex[cell[i]];\n            if (v < 0) {\n                return false;\n            }\n            cell[i] = v;\n        }\n        return true;\n    });\n\n    for (let i = 0; i < hull.length; ++i) {\n        const h = hull[i];\n        const x = h[0];\n        h[0] = h[1];\n        h[1] = x;\n    }\n\n    return hull;\n};\n\ntype Connection = {\n    [key: number]: boolean;\n};\n\nexport default (points: number[][]): number[][] => {\n    const tri = triangulate(points);\n    const connections: Connection[] = points.map(() => ({}));\n    tri.forEach(t => {\n        for (let i = 0; i < 4; ++i) {\n            for (let j = i + 1; j < 4; ++j) {\n                connections[t[i]][t[j]] = true;\n                connections[t[j]][t[i]] = true;\n            }\n        }\n    });\n    return connections.map(con => Object.keys(con).map(key => Number(key)));\n};\n","import * as Mat3 from \"./Mat3\";\nimport * as Vec3 from \"./Vec3\";\n\nexport const outerProduct = (a: Vec3.Vec3, b: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.newMat3(\n        Vec3.newVec3(a[0] * b[0], a[0] * b[1], a[0] * b[2]),\n        Vec3.newVec3(a[1] * b[0], a[1] * b[1], a[1] * b[2]),\n        Vec3.newVec3(a[2] * b[0], a[2] * b[1], a[2] * b[2])\n    );\n\nexport const minAcc = (v1: Vec3.Vec3, v2: Vec3.Vec3, v4: Vec3.Vec3, v5: Vec3.Vec3): Vec3.Vec3 => {\n    const q1 = Vec3.multiplyScalar(v1, -1 / 6);\n    const q2 = Vec3.multiplyScalar(v2, 4 / 6);\n    const q4 = Vec3.multiplyScalar(v4, 4 / 6);\n    const q5 = Vec3.multiplyScalar(v5, -1 / 6);\n    const p3 = Vec3.add(Vec3.add(Vec3.add(q1, q2), q4), q5);\n    return p3;\n};\n","import * as Bot from \"./Bot\";\nimport * as BoundingBox from \"./BoundingBox\";\nimport * as Mat3 from \"./Mat3\";\nimport * as Vec3 from \"./Vec3\";\n\nimport { SparseSymmetric, ldiv } from \"./conjugateGradientSparse\";\n\nimport Prando from \"prando\";\nimport delaunay from \"./delaunay\";\nimport { outerProduct } from \"./utils\";\nimport { minAcc } from \"./utils\";\n\nexport type World = { bots: Bot.Bot[] };\n\nexport const newWorld = (): World => ({ bots: [] });\n\nexport const clone = (world: World): World => ({ bots: world.bots.map(bot => Bot.clone(bot)) });\n\nconst edgeStrength = (offset: number, slack: number, d: number): number => {\n    if (d < offset - slack / 2) return 1;\n    if (d > offset + slack / 2) return 0;\n    return (2 * (d + slack - offset) * (offset + slack / 2 - d) ** 2) / slack ** 3;\n};\n\nconst edgeStrengthGround = (offset: number, slack: number, d: number): number => edgeStrength(offset, slack, d) + 1e-4;\n\nconst stiffness = (offset: number, slack: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const l = Vec3.length(d);\n    const s = Vec3.multiplyScalar(d, Math.sqrt(edgeStrength(offset, slack, l)) / l);\n    return outerProduct(s, s);\n};\n\nconst stiffnessGround = (offset: number, slack: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const l = Vec3.length(d);\n    const s = Vec3.multiplyScalar(d, Math.sqrt(edgeStrengthGround(offset, slack, l)) / l);\n    return outerProduct(s, s);\n};\n\nconst stiffnessDerivative = (offset: number, slack: number, dim: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const epsilon = 0.00001;\n    const val = d[dim];\n    const dPlus = Vec3.clone(d);\n    dPlus[dim] = val + epsilon;\n    const dMinus = Vec3.clone(d);\n    dMinus[dim] = val - epsilon;\n    const plus = stiffness(offset, slack, dPlus);\n    const minus = stiffness(offset, slack, dMinus);\n    Mat3.sub(plus, minus);\n    Mat3.multiplyScalar(plus, 1 / (2 * epsilon));\n    return plus;\n};\n\nconst stiffnessPair = (offset: number, slack: number, a: Bot.Bot, b: Bot.Bot): Mat3.Mat3 => {\n    const d = Vec3.sub(b.pos, a.pos);\n    return stiffness(offset, slack, d);\n};\n\nconst stiffnessPairDerivative = (offset: number, slack: number, a: Bot.Bot, dim: number, b: Bot.Bot): Mat3.Mat3 =>\n    stiffnessDerivative(offset, slack, dim, Vec3.sub(a.pos, b.pos));\n\nconst stiffnessMatrix = (\n    offset: number,\n    slack: number,\n    friction: number,\n    world: World,\n    neigh: number[][]\n): SparseSymmetric => {\n    const result: SparseSymmetric = [...Array(world.bots.length * 3)].map(() => []);\n    for (let i = 0; i < world.bots.length; ++i) {\n        const sx = stiffnessGround(offset, slack, Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n        const sy = stiffnessGround(offset, slack, Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n        const sz = stiffnessGround(offset, slack, Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n        for (let k = 0; k < 3; ++k) {\n            for (let l = k; l < 3; ++l) {\n                result[3 * i + k].push([3 * i + l, (sx[k][l] + sz[k][l]) * friction + sy[k][l]]);\n            }\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        neigh[i].forEach(j => {\n            const s = stiffnessPair(offset, slack, world.bots[i], world.bots[j]);\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k].push([3 * j + l, -s[k][l]]);\n                    if (k > l) continue;\n                    result[3 * i + k][l - k][1] += s[k][l];\n                    result[3 * j + k][l - k][1] += s[k][l];\n                }\n            }\n        });\n    }\n    return result;\n};\n\nconst forceMatrix = (before: World, after: World, dt: number, g: number, m: number, world: World): number[] => {\n    const result = [...Array(world.bots.length * 3)].map(() => 0);\n    world.bots.forEach((_, i) => {\n        for (let j = 0; j < 3; ++j) {\n            const v1 = (world.bots[i].pos[j] - before.bots[i].pos[j]) / dt;\n            const v2 = (after.bots[i].pos[j] - world.bots[i].pos[j]) / dt;\n            const acc = (v2 - v1) / dt;\n            result[3 * i + j] = ((j === 1 ? -1 : 0) - acc) * g * m;\n        }\n    });\n    return result;\n};\n\nexport const displacement = (\n    offset: number,\n    slack: number,\n    friction: number,\n    before: World,\n    after: World,\n    dt: number,\n    g: number,\n    m: number,\n    world: World,\n    neigh: number[][]\n): number[] => {\n    const f = forceMatrix(before, after, dt, g, m, world);\n    const k = stiffnessMatrix(offset, slack, friction, world, neigh);\n    return ldiv(k, f);\n};\n\nexport const neighbors = (neighborRadius: number, world: World, con: number[][], n: number): number[] =>\n    con[n]\n        .filter(i => i > n)\n        .filter(i => {\n            const d = Vec3.dist(world.bots[n].pos, world.bots[i].pos);\n            return d < neighborRadius;\n        });\n\nexport const gradient = (\n    offset: number,\n    slack: number,\n    friction: number,\n    overlapPenalty: number,\n    uBefore: number[],\n    u: number[],\n    uAfter: number[],\n    beforeBefore: World,\n    before: World,\n    after: World,\n    afterAfter: World,\n    dt: number,\n    world: World,\n    neigh: number[][],\n    t: number\n): Vec3.Vec3[] => {\n    const udku = [...Array(world.bots.length)].map(() => [0, 1, 2].map(() => 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const sx = stiffnessDerivative(offset, slack, dim, Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n            Mat3.multiplyScalar(sx, friction);\n            const sy = stiffnessDerivative(offset, slack, dim, Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n            const sz = stiffnessDerivative(offset, slack, dim, Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n            Mat3.multiplyScalar(sz, friction);\n            const vi = Vec3.newVec3(u[3 * i], u[3 * i + 1], u[3 * i + 2]);\n            Mat3.add(sx, sy);\n            Mat3.add(sx, sz);\n            const d = Vec3.dot(vi, Mat3.apply(sx, vi));\n            udku[i][dim] += d;\n            neigh[i].forEach(j => {\n                const s = stiffnessPairDerivative(offset, slack, world.bots[i], dim, world.bots[j]);\n                const vj = Vec3.newVec3(u[3 * j], u[3 * j + 1], u[3 * j + 2]);\n                Vec3.subEq(vj, vi);\n                const svisvj = Mat3.apply(s, vj);\n                const diff = Vec3.dot(vj, svisvj);\n                udku[i][dim] += diff;\n                udku[j][dim] -= diff;\n            });\n        }\n    }\n    const result = [...Array(world.bots.length)].map(() => Vec3.newVec3(0, 0, 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            result[i][dim] =\n                -udku[i][dim] + 2 * ((-uBefore[3 * i + dim] + 2 * u[3 * i + dim] - uAfter[3 * i + dim]) / dt ** 2);\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].pos[1] > 0.5) continue;\n        const l = world.bots[i].pos[1] + 0.5;\n        result[i][1] -= 2 * overlapPenalty * (1 - l);\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        neigh[i].forEach(j => {\n            let d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const l = Vec3.length(d);\n            if (l > 1) return;\n            d = Vec3.multiplyScalar(d, (overlapPenalty * (1 - l)) / l);\n            Vec3.addEq(result[i], d);\n            Vec3.subEq(result[j], d);\n        });\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        const dest = minAcc(beforeBefore.bots[i].pos, before.bots[i].pos, after.bots[i].pos, afterAfter.bots[i].pos);\n        const d = Vec3.sub(dest, world.bots[i].pos);\n        Vec3.addEq(result[i], Vec3.multiplyScalar(d, -0.1));\n    }\n    return result;\n};\n\nexport const connections = (positions: Vec3.Vec3[]): number[][] => {\n    const rng = new Prando(123);\n    const rand = () => Vec3.multiplyScalar(Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5), 0.1);\n    return delaunay(\n        [...positions, ...positions.map((pos): Vec3.Vec3 => [pos[0], -0.5, pos[2]])].map(pos => Vec3.add(pos, rand()))\n    )\n        .map(con => con.map(c => (c >= positions.length ? -1 : c)))\n        .slice(0, positions.length);\n};\n\nexport const boundingBox = (world: World): BoundingBox.BoundingBox => {\n    if (world.bots.length === 0)\n        return {\n            min: [0, 0, 0],\n            max: [0, 0, 0]\n        };\n    let result = Bot.boundingBox(world.bots[0]);\n    world.bots.forEach(bot => {\n        result = BoundingBox.merge(result, Bot.boundingBox(bot));\n    });\n    return result;\n};\n","type Element<Type> = Type;\n\ntype Compare<Type> = (a: Element<Type>, b: Element<Type>) => number;\n\nclass PriorityQueue<Type> {\n    comparator: Compare<Type>;\n    elements: Element<Type>[];\n    constructor(comparator: Compare<Type>) {\n        this.comparator = comparator;\n        this.elements = [];\n    }\n\n    peek(): Element<Type> | undefined {\n        return this.elements[0];\n    }\n\n    pop(): Element<Type> | undefined {\n        const first = this.peek();\n        if (first === undefined) return undefined;\n        const last = this.elements.pop();\n        if (last === undefined) return undefined;\n        const size = this.size();\n\n        if (size === 0) return first;\n\n        this.elements[0] = last;\n        let current = 0;\n\n        while (current < size) {\n            let largest = current;\n            const left = 2 * current + 1;\n            const right = 2 * current + 2;\n\n            if (left < size && this.compare(left, largest) >= 0) {\n                largest = left;\n            }\n\n            if (right < size && this.compare(right, largest) >= 0) {\n                largest = right;\n            }\n\n            if (largest === current) break;\n\n            this.swap(largest, current);\n            current = largest;\n        }\n\n        return first;\n    }\n\n    push(element: Element<Type>): void {\n        const size = this.elements.push(element);\n        let current = size - 1;\n\n        while (current > 0) {\n            const parent = Math.floor((current - 1) / 2);\n\n            if (this.compare(current, parent) <= 0) break;\n\n            this.swap(parent, current);\n            current = parent;\n        }\n    }\n\n    size(): number {\n        return this.elements.length;\n    }\n\n    compare(a: number, b: number): number {\n        return this.comparator(this.elements[a], this.elements[b]);\n    }\n\n    swap(a: number, b: number): void {\n        const aux = this.elements[a];\n        this.elements[a] = this.elements[b];\n        this.elements[b] = aux;\n    }\n}\n\nexport default PriorityQueue;\n","import { Vec3, add, length, multiplyScalar, sub } from \"./Vec3\";\n\nimport { Bot } from \"./Bot\";\nimport PriorityQueue from \"./PriorityQueue\";\n\nexport type Grid = {\n    [i: number]: {\n        [j: number]: {\n            [k: number]: boolean;\n        };\n    };\n};\n\ntype Cell = {\n    dist: number;\n    distEstimate: number;\n    pos: Vec3;\n    prev: Cell | undefined;\n};\n\ntype Solution = {\n    [i: number]: {\n        [j: number]: {\n            [k: number]: Cell;\n        };\n    };\n};\n\nconst equals = (a: Vec3, b: Vec3): boolean => a[0] === b[0] && a[1] === b[1] && a[2] === b[2];\n\nconst backtrack = (c: Cell): Vec3 => {\n    const halfDist = c.dist / 2;\n    let cell: Cell = c;\n    for (; cell.prev !== undefined && cell.prev.dist > halfDist; cell = cell.prev);\n    if (cell.prev === undefined) return cell.pos;\n    const prevCell = cell.prev;\n    const d1 = halfDist - prevCell.dist;\n    const d2 = cell.dist - halfDist;\n    const w = d1 / (d1 + d2);\n    return add(multiplyScalar(prevCell.pos, 1 - w), multiplyScalar(cell.pos, w));\n};\n\nconst round = (v: Vec3): Vec3 => [Math.round(v[0]), Math.round(v[1]), Math.round(v[2])];\n\nconst resolution = 3;\n\nconst midpoint = (grid: Grid, s: Vec3, e: Vec3): Vec3 => {\n    const exactMidpoint = multiplyScalar(add(s, e), 0.5);\n    if (length(sub(e, s)) < 1) return exactMidpoint;\n    const start = round(s);\n    const end = round(e);\n    const checked: Solution = {};\n    const check = new PriorityQueue<Cell>((a: Cell, b: Cell): number => b.distEstimate - a.distEstimate);\n    check.push({ dist: 0, distEstimate: 0, pos: start, prev: undefined });\n    let iter = 0;\n    for (; iter < 10000; ) {\n        const c = check.pop();\n        if (c === undefined) break;\n        const [x, y, z] = c.pos;\n        if (y < 0.5 * resolution) continue;\n        if (((grid[x] || {})[y] || {})[z] === true) continue;\n        if (((checked[x] || {})[y] || {})[z] !== undefined) continue;\n        if (checked[x] === undefined) checked[x] = {};\n        if (checked[x][y] === undefined) checked[x][y] = {};\n        checked[x][y][z] = c;\n        if (equals(c.pos, end)) return backtrack(c);\n        ++iter;\n        for (let i = -1; i <= 1; ++i) {\n            for (let j = -1; j <= 1; ++j) {\n                for (let k = -1; k <= 1; ++k) {\n                    if (i === 0 && j === 0 && k === 0) continue;\n                    const p: Vec3 = [i, j, k];\n                    const pos = add(c.pos, p);\n                    const dist = c.dist + length(p);\n                    check.push({\n                        dist,\n                        distEstimate: dist + length(sub(end, pos)),\n                        pos,\n                        prev: c\n                    });\n                }\n            }\n        }\n    }\n    return exactMidpoint;\n};\n\nexport const botsToGrid = (bots: Bot[]): Grid => {\n    const range = [...Array(2 * resolution + 1)].map((_, i) => (i / resolution - 1) * resolution * 0.5);\n    const result: Grid = {};\n    bots.forEach(bot => {\n        range.forEach(a => {\n            range.forEach(b => {\n                range.forEach(c => {\n                    const [i, j, k] = round(add(multiplyScalar(bot.pos, resolution), [a, b, c]));\n                    if (result[i] === undefined) result[i] = {};\n                    if (result[i][j] === undefined) result[i][j] = {};\n                    result[i][j][k] = true;\n                });\n            });\n        });\n    });\n    return result;\n};\n\nexport default (grid: Grid, start: Vec3, end: Vec3): Vec3 =>\n    multiplyScalar(midpoint(grid, multiplyScalar(start, resolution), multiplyScalar(end, resolution)), 1 / resolution);\n","import * as World from \"./World\";\nimport { Vec3, addEq, clone, length, multiplyScalar, sub, subEq } from \"./Vec3\";\nimport { Bot } from \"./Bot\";\n\ntype Element = {\n    value: number;\n    next: Element | null;\n};\n\ntype Grid = {\n    min: Vec3;\n    max: Vec3;\n    bots: {\n        [i: number]: {\n            [j: number]: {\n                [k: number]: Element | null;\n            };\n        };\n    };\n};\n\nconst floor = (v: Vec3): Vec3 => [Math.floor(v[0]), Math.floor(v[1]), Math.floor(v[2])];\n\nconst round = (v: Vec3): Vec3 => [Math.round(v[0]), Math.round(v[1]), Math.round(v[2])];\n\nconst ceil = (v: Vec3): Vec3 => [Math.ceil(v[0]), Math.ceil(v[1]), Math.ceil(v[2])];\n\nconst createGrid = (bots: Bot[]): Grid => {\n    const bb = World.boundingBox({ bots });\n    bb.min = floor(bb.min);\n    bb.max = ceil(bb.max);\n    return {\n        min: bb.min,\n        max: bb.max,\n        bots: [...Array(bb.max[0] - bb.min[0] + 1)].map(() =>\n            [...Array(bb.max[1] - bb.min[1] + 1)].map(() => [...Array(bb.max[2] - bb.min[2] + 1)].map(() => null))\n        )\n    };\n};\n\nconst addToGrid = (grid: Grid, pos: Vec3, i: number): void => {\n    const [x, y, z] = round(sub(pos, [0.5, 0.5, 0.5]));\n    for (let dx = 0; dx <= 1; ++dx) {\n        for (let dy = 0; dy <= 1; ++dy) {\n            for (let dz = 0; dz <= 1; ++dz) {\n                const a = x + dx - grid.min[0];\n                const b = y + dy - grid.min[1];\n                const c = z + dz - grid.min[2];\n                if (a < 0) continue;\n                if (b < 0) continue;\n                if (c < 0) continue;\n                if (a > grid.max[0] - grid.min[0]) continue;\n                if (b > grid.max[1] - grid.min[1]) continue;\n                if (c > grid.max[2] - grid.min[2]) continue;\n                const e = grid.bots[a][b][c];\n                grid.bots[a][b][c] = {\n                    value: i,\n                    next: e\n                };\n            }\n        }\n    }\n};\n\nexport default (bots: Bot[]): void => {\n    for (let iter = 0; iter < 1; ++iter) {\n        const prevPos = bots.map(bot => clone(bot.pos));\n        const grid = createGrid(bots);\n        for (let i = 0; i < bots.length; ++i) {\n            addToGrid(grid, bots[i].pos, i);\n        }\n        for (let i = 0; i < bots.length; ++i) {\n            const [x, y, z] = sub(round(prevPos[i]), grid.min);\n            for (let e = grid.bots[x][y][z]; e !== null; e = e.next) {\n                const j = e.value;\n                const b = bots[j];\n                if (bots[i] === b) continue;\n                const d = sub(b.pos, bots[i].pos);\n                const dLength = length(d);\n                if (dLength > 1) continue;\n                const n = multiplyScalar(d, (1 - dLength) / dLength / 2);\n                if (bots[i].fixed) addEq(b.pos, n);\n                else subEq(bots[i].pos, n);\n                if (b.fixed) subEq(bots[i].pos, n);\n                else addEq(b.pos, n);\n            }\n        }\n        for (let i = 0; i < bots.length; ++i) {\n            bots[i].pos[1] = Math.max(bots[i].pos[1], 0.5);\n        }\n    }\n};\n","import { Animation, Vec3, World } from \"../core\";\nimport { Button, List, ListItem } from \"@material-ui/core\";\nimport React, { FC, useEffect, useState } from \"react\";\n\nimport Prando from \"prando\";\nimport update from \"immutability-helper\";\n\nconst rng = new Prando(123);\n\nconst rand = () => Vec3.multiplyScalar(Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5), 2);\n\ntype Props = {\n    worldStart: World.World | undefined;\n    world: World.World | undefined;\n    worldPrev: World.World | undefined;\n    setWorld: (world: World.World) => void;\n    setWorldPrev: (world: World.World) => void;\n    worldEnd: World.World | undefined;\n    config: Animation.Config;\n};\n\nconst Dynamic: FC<Props> = props => {\n    const [pause, setPause] = useState(true);\n    const [path, setPath] = useState<World.World[]>([]);\n\n    const step = () => {\n        if (props.world === undefined || props.worldPrev === undefined || props.worldEnd === undefined) return;\n        if (path.length === 0) {\n            setPath(\n                Animation.createAnimation(props.worldPrev, props.world, props.worldEnd, props.worldEnd, props.config)\n            );\n            return;\n        }\n        let p = path;\n        if (p.length > 1) p = p.slice(1);\n        props.setWorldPrev(props.world);\n        props.setWorld(p[0]);\n        setPath(p);\n    };\n\n    useEffect(() => {\n        if (pause) return undefined;\n        const i = setInterval(step, 1000 / 30);\n        return () => clearInterval(i);\n    }, [props, pause, path]);\n\n    useEffect(() => {\n        setPause(true);\n        if (props.worldStart === undefined) return;\n        props.setWorld(props.worldStart);\n        setPath([]);\n    }, [props.worldStart]);\n\n    return (\n        <List>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        setPause(!pause);\n                    }}>\n                    paused: {pause ? \"yes\" : \"no\"}\n                </Button>\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        if (props.world === undefined) return;\n                        props.setWorld(\n                            update(props.world, {\n                                bots: {\n                                    $set: props.world.bots.map(bot =>\n                                        update(bot, { pos: { $set: Vec3.add(bot.pos, rand()) } })\n                                    )\n                                }\n                            })\n                        );\n                        setPath([]);\n                    }}>\n                    Disturb\n                </Button>\n            </ListItem>\n        </List>\n    );\n};\n\nexport default Dynamic;\n","export default __webpack_public_path__ + \"static/media/grass.75422b3f.jpg\";","import * as Vec3 from \"../core/Vec3\";\n\nimport {\n    AmbientLight,\n    BufferGeometry,\n    Color,\n    DirectionalLight,\n    Mesh,\n    MeshPhongMaterial,\n    PlaneBufferGeometry,\n    RepeatWrapping,\n    Scene,\n    SphereGeometry,\n    TextureLoader\n} from \"three\";\n\nimport grass from \"../assets/grass.jpg\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n\n    const geo = new PlaneBufferGeometry(2000, 2000, 8, 8);\n    const textureGrass = new TextureLoader().load(grass);\n    textureGrass.wrapS = RepeatWrapping;\n    textureGrass.wrapT = RepeatWrapping;\n    textureGrass.repeat.set(100, 100);\n    const mat = new MeshPhongMaterial({ color: new Color(\"#ffffff\") });\n    const plane = new Mesh(geo, mat);\n    plane.rotateX(-Math.PI / 2);\n    plane.castShadow = false;\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.62);\n    light.position.set(10, 50, 10);\n    light.castShadow = true;\n    light.shadowCameraRight = 100;\n    light.shadowCameraLeft = -100;\n    light.shadowCameraTop = 100;\n    light.shadowCameraBottom = -100;\n    light.shadowMapWidth = 1024;\n    light.shadowMapHeight = 1024;\n    scene.add(light);\n\n    return scene;\n};\n\nexport const newSphere = (pos: Vec3.Vec3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color }));\n    mesh.geometry = bg;\n    mesh.position.set(...pos);\n    mesh.scale.set(0.5, 0.5, 0.5);\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n    return mesh;\n};\n","import { Button, FormControlLabel, MenuItem, Select, Switch, TextField } from \"@material-ui/core\";\nimport { PCFSoftShadowMap, PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Vec3, World } from \"../core\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport update from \"immutability-helper\";\nimport { useWindowWidth } from \"@react-hook/window-size\";\n\ntype Props = {\n    scene: Scene;\n    center: Vec3.Vec3;\n    world: World.World | undefined;\n};\n\nconst screenshotWidth = 1920;\nconst screenshotHeight = 1080;\nconst screenshotRenderer = new WebGLRenderer({ antialias: true });\nscreenshotRenderer.setClearColor(\"#ffffff\");\nscreenshotRenderer.setSize(screenshotWidth, screenshotHeight);\nscreenshotRenderer.shadowMapEnabled = true;\nscreenshotRenderer.shadowMapType = PCFSoftShadowMap;\n\nconst Canvas: FC<Props> = props => {\n    const windowWidth = useWindowWidth();\n    const width = windowWidth * 0.65;\n    const height = width * (screenshotHeight / screenshotWidth);\n    const [fov, setFov] = useState(30);\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [zoom, setZoom] = useState(10);\n    const [saveScreenshots, setSaveScreenshots] = useState(false);\n\n    const [align, setAlign] = useState<Vec3.Vec3>([0, 0, 1]);\n\n    const saveImage = () => {\n        if (camera === undefined) return;\n        const cam = camera.clone();\n        cam.aspect = screenshotWidth / screenshotHeight;\n        cam.updateProjectionMatrix();\n        const a = document.createElement(\"a\");\n        screenshotRenderer.render(props.scene, cam);\n        a.href = screenshotRenderer.domElement.toDataURL().replace(\"image/png\", \"image/octet-stream\");\n        a.download = \"image.png\";\n        a.click();\n    };\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return undefined;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#ffffff\");\n        ren.setSize(width, height);\n        ren.shadowMapEnabled = true;\n        ren.shadowMapType = PCFSoftShadowMap;\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n\n        return () => {\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount]);\n\n    useEffect(() => {\n        if (camera === undefined) return;\n        if (renderer === undefined) return;\n        camera.aspect = width / height;\n        camera.updateProjectionMatrix();\n        renderer.setSize(width, height);\n    }, [camera, renderer, width, height]);\n\n    useEffect(() => {\n        if (!controls || !renderer || !camera || !props.scene) return undefined;\n        const i = window.setInterval(() => {\n            controls.update();\n            renderer.render(props.scene, camera);\n        }, 1000 / 30);\n        return () => {\n            window.clearInterval(i);\n        };\n    }, [controls, renderer, camera, props.scene]);\n\n    useEffect(() => {\n        if (saveScreenshots) saveImage();\n    }, [props.world]);\n\n    return (\n        <>\n            <div ref={mount} />\n            <Button\n                variant=\"contained\"\n                onClick={() => {\n                    if (controls === undefined) return;\n                    const dx = props.center[0] - controls.target.x;\n                    const dy = props.center[1] - controls.target.y;\n                    const dz = props.center[2] - controls.target.z;\n                    controls.object.position.set(\n                        controls.object.position.x + dx,\n                        controls.object.position.y + dy,\n                        controls.object.position.z + dz\n                    );\n                    controls.target.set(props.center[0], props.center[1], props.center[2]);\n                }}>\n                Center camera\n            </Button>\n            <Button\n                variant=\"contained\"\n                onClick={() => {\n                    if (controls === undefined) return;\n                    const input = window.prompt(\"0\");\n                    if (input === null) return;\n                    const h = parseFloat(input);\n                    const dx = -controls.target.x;\n                    const dy = h - controls.target.y;\n                    const dz = -controls.target.z;\n                    controls.object.position.set(\n                        controls.object.position.x + dx,\n                        controls.object.position.y + dy,\n                        controls.object.position.z + dz\n                    );\n                    controls.target.set(0, h, 0);\n                }}>\n                Set camera height\n            </Button>\n            <br />\n            <TextField\n                type=\"number\"\n                label=\"Camera distance\"\n                value={zoom}\n                onChange={e => {\n                    const zoomNew = Math.max(parseFloat(e.target.value), 1);\n                    setZoom(zoomNew);\n                    if (camera === undefined) return;\n                    if (controls === undefined) return;\n                    const p: Vec3.Vec3 = [\n                        controls.object.position.x,\n                        controls.object.position.y,\n                        controls.object.position.z\n                    ];\n                    const t: Vec3.Vec3 = [controls.target.x, controls.target.y, controls.target.z];\n                    const d = Vec3.sub(p, t);\n                    const n = Vec3.normalize(d);\n                    const m = Vec3.multiplyScalar(n, zoomNew);\n                    const pos = Vec3.add(t, m);\n                    controls.object.position.set(pos[0], pos[1], pos[2]);\n                    camera.updateProjectionMatrix();\n                }}\n            />\n            <TextField\n                type=\"number\"\n                label=\"FOV\"\n                value={fov}\n                onChange={e => {\n                    const fovNew = Math.min(Math.max(parseFloat(e.target.value), 1), 179);\n                    setFov(fovNew);\n                    if (camera !== undefined) {\n                        camera.fov = fovNew;\n                        camera.updateProjectionMatrix();\n                    }\n                }}\n            />\n            {align.map((value, i) => (\n                <Select\n                    key={i}\n                    value={value}\n                    onChange={e => {\n                        setAlign(update(align, { [i]: { $set: parseFloat(e.target.value as string) } }));\n                    }}>\n                    {[-1, 0, 1].map(v => (\n                        <MenuItem key={v} value={v}>\n                            {v}\n                        </MenuItem>\n                    ))}\n                </Select>\n            ))}\n            <Button\n                variant=\"contained\"\n                onClick={() => {\n                    if (controls === undefined) return;\n                    const t: Vec3.Vec3 = [controls.target.x, controls.target.y, controls.target.z];\n                    const d = Vec3.multiplyScalar(align, zoom);\n                    const pos = Vec3.add(t, d);\n                    controls.object.position.set(pos[0], pos[1], pos[2]);\n                }}>\n                Align ({align.join(\",\")})\n            </Button>\n            <br />\n            <FormControlLabel\n                control={<Switch checked={saveScreenshots} onChange={e => setSaveScreenshots(e.target.checked)} />}\n                label=\"Save screenshot on every frame\"\n            />\n            {!saveScreenshots && (\n                <Button variant=\"contained\" onClick={saveImage}>\n                    Save screenshot for this frame\n                </Button>\n            )}\n        </>\n    );\n};\n\nexport default Canvas;\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst n = 10;\n\nconst arc = [Vec3.newVec3(0, 0, 0)];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push(Vec3.newVec3(arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0));\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push(Vec3.newVec3(-arc[i][0], arc[i][1], 0));\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nconst s = [\n    ...[...Array(n + 1)].map((_, i) => Vec3.newVec3(Math.ceil(i / 2) + 4, 0.5, (i % 2) - 0.5)),\n    ...[...Array(n)].map((_, i) => Vec3.newVec3(-Math.floor(i / 2) - 1 - 4, 0.5, (i % 2) - 0.5))\n];\n\nexport default createExample(\"Arc\", [], s, arc);\n","import { Color, Mesh } from \"three\";\nimport React, { FC, useEffect, useState } from \"react\";\nimport { Vec3, World } from \"../core\";\nimport { newScene, newSphere } from \"./draw\";\n\nimport Canvas from \"./Canvas\";\n\ntype Props = {\n    worldStart: World.World | undefined;\n    world: World.World | undefined;\n    center: Vec3.Vec3;\n};\n\nconst Scene: FC<Props> = props => {\n    const [scene, setScene] = useState(newScene());\n    const [botMeshes, setBotMeshes] = useState<Mesh[]>([]);\n    const [renderedWorld, setRenderedWorld] = useState<World.World | undefined>();\n\n    useEffect(() => {\n        const w = props.world;\n        if (w === undefined) return;\n        if (botMeshes.length !== w.bots.length) return;\n        w.bots.forEach((bot, i) => {\n            botMeshes[i].position.set(...bot.pos);\n        });\n        setRenderedWorld(props.world);\n    }, [props.world, botMeshes]);\n\n    useEffect(() => {\n        const w = props.worldStart;\n        if (w === undefined) return;\n        setBotMeshes(w.bots.map(bot => newSphere(bot.pos, new Color(bot.fixed ? \"#808080\" : \"#fa8072\"))));\n    }, [props.worldStart]);\n\n    useEffect(() => {\n        const scn = newScene();\n        botMeshes.forEach(mesh => scn.add(mesh));\n        setScene(scn);\n    }, [botMeshes]);\n\n    return <Canvas scene={scene} center={props.center} world={renderedWorld} />;\n};\n\nexport default Scene;\n","import { Bot, Vec3, World } from \"../../core\";\n\nexport type Example = {\n    title: string;\n    start: World.World;\n    end: World.World;\n};\n\nconst createBots = (coords: Vec3.Vec3[], fixed: boolean): Bot.Bot[] =>\n    coords.map(\n        (pos): Bot.Bot => ({\n            pos,\n            fixed\n        })\n    );\n\nconst createWorld = (bots: Bot.Bot[]): World.World => ({ bots });\n\nexport const coordsToWorld = (coords: Vec3.Vec3[], fixed: boolean): World.World =>\n    createWorld(createBots(coords, fixed));\n\nexport const createExample = (title: string, fixed: Vec3.Vec3[], start: Vec3.Vec3[], end: Vec3.Vec3[]): Example => {\n    const fixedBots = createBots(fixed, true);\n    const startBots = createBots(start, false);\n    const endBots = createBots(end, false);\n    return {\n        title,\n        start: createWorld([...fixedBots, ...startBots]),\n        end: createWorld([...fixedBots, ...endBots])\n    };\n};\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst n = 40;\n\nconst arc = [Vec3.newVec3(0, 0, 0)];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push(Vec3.newVec3(arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0));\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push(Vec3.newVec3(-arc[i][0], arc[i][1], 0));\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nconst s = [\n    ...[...Array(n + 1)].map((_, i) => Vec3.newVec3(Math.ceil(i / 2) + 4, 0.5, (i % 2) - 0.5)),\n    ...[...Array(n)].map((_, i) => Vec3.newVec3(-Math.floor(i / 2) - 1 - 4, 0.5, (i % 2) - 0.5))\n];\n\nexport default createExample(\"Big arc\", [], s, arc);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst r = 10;\nconst h1 = 7;\nconst h2 = 12;\n\nconst pillar = (pos: Vec3.Vec3, height: number): Vec3.Vec3[] =>\n    [...Array(height)].map((_, i) => Vec3.add(pos, [0, i, 0]));\n\nconst bar = (pos: Vec3.Vec3, width: number): Vec3.Vec3[] => [...Array(width)].map((_, i) => Vec3.add(pos, [i, 0, 0]));\n\nconst barZ = (pos: Vec3.Vec3, width: number): Vec3.Vec3[] => [...Array(width)].map((_, i) => Vec3.add(pos, [0, 0, i]));\n\nconst platform = (pos: Vec3.Vec3, w: number, h: number): Vec3.Vec3[] => [\n    ...pillar(Vec3.add(pos, [-w, 0, 0]), h),\n    ...pillar(Vec3.add(pos, [w, 0, 0]), h),\n    ...bar(Vec3.add(pos, [-w + 1, h - 1, 0]), 2 * w - 1)\n];\n\nconst platformZ = (pos: Vec3.Vec3, w: number, h: number): Vec3.Vec3[] => [\n    ...pillar(Vec3.add(pos, [0, 0, -w]), h),\n    ...pillar(Vec3.add(pos, [0, 0, w]), h),\n    ...barZ(Vec3.add(pos, [0, h - 1, -w + 1]), w - 1),\n    ...barZ(Vec3.add(pos, [0, h - 1, 1]), w - 1)\n];\n\nconst f: Vec3.Vec3[] = [\n    ...platform([-r, 0.5, 0], 1, h1),\n    ...platform([r, 0.5, 0], 1, h1),\n    ...platform([0, h1 + 0.5, 0], r + 1, h2 - h1),\n    ...platformZ([0, 0.5, 0], 2, h2)\n];\n\nconst s: Vec3.Vec3[] = pillar([-r, h1 + 0.5, 0], h2 - h1 - 2);\nconst e: Vec3.Vec3[] = pillar([r, h1 + 0.5, 0], h2 - h1 - 2);\n\nexport default createExample(\"Brachiation\", f, s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s = [...Array(8)].map((_, i) => [...Array(8)].map((_, j) => Vec3.newVec3(i - 3.5, 0.5, j - 3.5))).flat();\nconst e = [...Array(4)]\n    .map((_, i) => [...Array(4)].map((_, j) => [...Array(4)].map((_, k) => Vec3.newVec3(i - 1.5, k + 0.5, j - 1.5))))\n    .flat()\n    .flat();\n\nexport default createExample(\"Big cube\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [-1.5, 0.5, -1.5],\n    [-0.5, 0.5, -1.5],\n    [0.5, 0.5, -1.5],\n    [1.5, 0.5, -1.5],\n    [-1.5, 0.5, -0.5],\n    [-0.5, 0.5, -0.5],\n    [0.5, 0.5, -0.5],\n    [1.5, 0.5, -0.5],\n    [-1.5, 0.5, 0.5],\n    [-0.5, 0.5, 0.5],\n    [0.5, 0.5, 0.5],\n    [1.5, 0.5, 0.5],\n    [-1.5, 0.5, 1.5],\n    [-0.5, 0.5, 1.5],\n    [0.5, 0.5, 1.5],\n    [1.5, 0.5, 1.5]\n];\n\nconst e: Vec3.Vec3[] = [\n    [-0.5, 0.5, -0.5],\n    [0.5, 0.5, -0.5],\n    [0.5, 0.5, 0.5],\n    [-0.5, 0.5, 0.5],\n    [-0.5, 1.5, -0.5],\n    [0.5, 1.5, -0.5],\n    [0.5, 1.5, 0.5],\n    [-0.5, 1.5, 0.5],\n    [-0.5, 2.5, -0.5],\n    [0.5, 2.5, -0.5],\n    [0.5, 2.5, 0.5],\n    [-0.5, 2.5, 0.5],\n    [-0.5, 3.5, -0.5],\n    [0.5, 3.5, -0.5],\n    [0.5, 3.5, 0.5],\n    [-0.5, 3.5, 0.5]\n];\n\nexport default createExample(\"Box\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst pryramid = (m: number, pos: Vec3.Vec3): Vec3.Vec3[] => {\n    if (m === 0) return [Vec3.clone(pos)];\n    const n = m - 1;\n    const a = 3 ** n;\n    const d1 = Vec3.multiplyScalar([1, 0, 0], a);\n    const d2 = Vec3.multiplyScalar([1 / 2, 0, Math.sqrt(3) / 2], a);\n    const d3 = Vec3.multiplyScalar([1 / 2, Math.sqrt(2 / 3), 1 / (2 * Math.sqrt(3))], a);\n    const c = Vec3.multiplyScalar(Vec3.add(d1, d2), 2 / 3);\n    const p = Vec3.sub(pos, c);\n    return [\n        ...pryramid(n, p),\n        ...pryramid(n, Vec3.add(p, d1)),\n        ...pryramid(n, Vec3.add(p, d2)),\n        ...pryramid(n, Vec3.add(p, d3)),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d1, d1))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d1, d2))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d2, d2))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d1, d3))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d2, d3))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d3, d3)))\n    ];\n};\n\nconst box = (pos: Vec3.Vec3, size: Vec3.Vec3): Vec3.Vec3[] =>\n    [...Array(size[0])]\n        .map((_, i) =>\n            [...Array(size[1])].map((_, j) =>\n                [...Array(size[2])].map((_, k) => Vec3.add(pos, [i - (size[0] - 1) / 2, j, k - (size[2] - 1) / 2]))\n            )\n        )\n        .flat()\n        .flat();\n\nconst parabola = (from: Vec3.Vec3, to: Vec3.Vec3): Vec3.Vec3[] => {\n    const d = Vec3.sub(to, from);\n    if (Vec3.length(d) < 1) return [to];\n    const dh: Vec3.Vec3 = [d[0], 0, d[2]];\n    const diff = Vec3.normalize(Vec3.add(Vec3.normalize(dh), [0, 2 * (d[1] / Vec3.length(dh)), 0]));\n    return [to, ...parabola(from, Vec3.sub(to, diff))];\n};\n\nconst bridge = (): Vec3.Vec3[] => {\n    const h1 = 6;\n    const h2 = 13;\n    const r = 12;\n    const w = 7;\n    const xw = 2;\n    const zw = 1;\n    return [\n        ...box([-2 * r - xw * (3 / 2), 0.5, 0], [xw, h1, w]),\n        ...box([-r - xw / 2, 0.5, 0], [xw, h1, w]),\n        ...box([-r - xw / 2, 0.5 + h1 + 1, (w - zw) / 2], [xw, h2 - 1, zw]),\n        ...box([-r - xw / 2, 0.5 + h1 + 1, -(w - zw) / 2], [xw, h2 - 1, zw]),\n        ...box([-r - xw / 2, 0.5 + h1 + h2, 0], [xw, 1, w]),\n        ...box([2 * r + xw * (3 / 2), 0.5, 0], [xw, h1, w]),\n        ...box([r + xw / 2, 0.5, 0], [xw, h1, w]),\n        ...box([r + xw / 2, 0.5 + h1 + 1, (w - zw) / 2], [xw, h2 - 1, zw]),\n        ...box([r + xw / 2, 0.5 + h1 + 1, -(w - zw) / 2], [xw, h2 - 1, zw]),\n        ...box([r + xw / 2, 0.5 + h1 + h2, 0], [xw, 1, w]),\n        ...box([0, 0.5 + h1, 0], [4 * (r + xw), 1, w]),\n        ...parabola([0, 0.5 + h1 + 1, (w - 1) / 2], [r - 0.5, h1 + h2 + 0.5, (w - 1) / 2]),\n        ...parabola([0, 0.5 + h1 + 1, (w - 1) / 2], [-r + 0.5, h1 + h2 + 0.5, (w - 1) / 2]),\n        ...parabola(\n            [-2 * r - xw * (3 / 2) - 1, 0.5 + h1 + 1, (w - 1) / 2],\n            [-r - xw - 0.5, h1 + h2 + 0.5, (w - 1) / 2]\n        ),\n        ...parabola([2 * r + xw * (3 / 2) + 1, 0.5 + h1 + 1, (w - 1) / 2], [r + xw + 0.5, h1 + h2 + 0.5, (w - 1) / 2]),\n        ...parabola([0, 0.5 + h1 + 1, -(w - 1) / 2], [r - 0.5, h1 + h2 + 0.5, -(w - 1) / 2]),\n        ...parabola([0, 0.5 + h1 + 1, -(w - 1) / 2], [-r + 0.5, h1 + h2 + 0.5, -(w - 1) / 2]),\n        ...parabola(\n            [-2 * r - xw * (3 / 2) - 1, 0.5 + h1 + 1, -(w - 1) / 2],\n            [-r - xw - 0.5, h1 + h2 + 0.5, -(w - 1) / 2]\n        ),\n        ...parabola([2 * r + xw * (3 / 2) + 1, 0.5 + h1 + 1, -(w - 1) / 2], [r + xw + 0.5, h1 + h2 + 0.5, -(w - 1) / 2])\n    ];\n};\n\nconst s = bridge();\n\nconst e = pryramid(3, [0, 0.5, 0]);\n\nexport default createExample(\n    \"Bridge to pryramid\",\n    [],\n    s.sort((a, b) => a[0] - b[0]),\n    e.sort((a, b) => a[0] - b[0])\n);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [1, 0.5, 0],\n    [0, 0.5, 0],\n    [-1, 0.5, 0],\n    [0, 1.5, 0],\n    [0, 2.5, 0],\n    [0, 3.5, 0],\n    [1, 3.5, 0],\n    [2, 3.5, 0],\n    [3, 3.5, 0],\n    [3, 0.5, 0]\n];\nconst e: Vec3.Vec3[] = [\n    [1, 0.5, 0],\n    [0, 0.5, 0],\n    [-1, 0.5, 0],\n    [0, 1.5, 0],\n    [0, 2.5, 0],\n    [0, 3.5, 0],\n    [1, 3.5, 0],\n    [2, 3.5, 0],\n    [3, 3.5, 0],\n    [3, 2.5, 0]\n];\n\nexport default createExample(\"Crane\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst r = 6;\nconst h = 3;\nconst w = 2;\n\nconst floor = () =>\n    [...Array(2 * r + 1)]\n        .map((_, i) => [...Array(2 * r + 1)].map((_, j): [number, number, number] => [i - r, 0.5, j - r]))\n        .flat()\n        .filter(p => Math.abs(p[0] + p[2]) < w);\n\nconst s: Vec3.Vec3[] = [\n    ...floor(),\n    ...[...Array(h)].map((_, i): [number, number, number] => [-r, i + 1.5, r]),\n    ...[...Array(h)].map((_, i): [number, number, number] => [r, i + 1.5, -r]),\n    [-r, h + 1.5, r]\n];\n\nconst e: Vec3.Vec3[] = [\n    ...floor(),\n    ...[...Array(h)].map((_, i): [number, number, number] => [-r, i + 1.5, r]),\n    ...[...Array(h)].map((_, i): [number, number, number] => [r, i + 1.5, -r]),\n    [r, h + 1.5, -r]\n];\n\nexport default createExample(\"Floor transport\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst r = 1;\nconst d = 5;\n\nconst frame = (pos: Vec3.Vec3) =>\n    [...Array(2 * r + 1)]\n        .map((_, i) =>\n            [...Array(2 * r + 1)].map((_, j) =>\n                [...Array(2 * r + 1)].map((_, k): [number, number, number] => [i - r, j - r, k - r])\n            )\n        )\n        .flat()\n        .flat()\n        .filter(\n            p => (Math.abs(p[0]) === r ? 1 : 0) + (Math.abs(p[1]) === r ? 1 : 0) + (Math.abs(p[2]) === r ? 1 : 0) >= 2\n        )\n        .map(p => Vec3.newVec3(p[0], p[1] + 0.5 + r, p[2]))\n        .map(p => Vec3.add(p, pos));\n\nconst s: Vec3.Vec3[] = [\n    ...frame([0, 0, d]),\n    ...frame([0, 2 * r + 1, d]),\n    ...frame([-d, 0, d]),\n    ...frame([d, 0, -d]),\n    ...frame([-d, 2 * r + 1, d])\n];\n\nconst e: Vec3.Vec3[] = [\n    ...frame([0, 0, d]),\n    ...frame([0, 2 * r + 1, d]),\n    ...frame([-d, 0, -d]),\n    ...frame([d, 0, d]),\n    ...frame([d, 2 * r + 1, d])\n];\n\nexport default createExample(\"Frame transport\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst box = (pos: Vec3.Vec3, size: Vec3.Vec3): Vec3.Vec3[] =>\n    [...Array(size[0])]\n        .map((_, i) =>\n            [...Array(size[1])].map((_, j) =>\n                [...Array(size[2])].map((_, k) => Vec3.add(pos, [i - (size[0] - 1) / 2, j, k - (size[2] - 1) / 2]))\n            )\n        )\n        .flat()\n        .flat();\n\nconst parabola = (from: Vec3.Vec3, to: Vec3.Vec3): Vec3.Vec3[] => {\n    const d = Vec3.sub(to, from);\n    if (Vec3.length(d) < 1) return [to];\n    const dh: Vec3.Vec3 = [d[0], 0, d[2]];\n    const diff = Vec3.normalize(Vec3.add(Vec3.normalize(dh), [0, 2 * (d[1] / Vec3.length(dh)), 0]));\n    return [to, ...parabola(from, Vec3.sub(to, diff))];\n};\n\nconst bridge = (): Vec3.Vec3[] => {\n    const h1 = 6;\n    const h2 = 13;\n    const r = 12;\n    const w = 7;\n    const xw = 2;\n    const zw = 1;\n    return [\n        ...box([-2 * r - xw * (3 / 2), 0.5, 0], [xw, h1, w]),\n        ...box([-r - xw / 2, 0.5, 0], [xw, h1, w]),\n        ...box([-r - xw / 2, 0.5 + h1 + 1, (w - zw) / 2], [xw, h2 - 1, zw]),\n        ...box([-r - xw / 2, 0.5 + h1 + 1, -(w - zw) / 2], [xw, h2 - 1, zw]),\n        ...box([-r - xw / 2, 0.5 + h1 + h2, 0], [xw, 1, w]),\n        ...box([2 * r + xw * (3 / 2), 0.5, 0], [xw, h1, w]),\n        ...box([r + xw / 2, 0.5, 0], [xw, h1, w]),\n        ...box([r + xw / 2, 0.5 + h1 + 1, (w - zw) / 2], [xw, h2 - 1, zw]),\n        ...box([r + xw / 2, 0.5 + h1 + 1, -(w - zw) / 2], [xw, h2 - 1, zw]),\n        ...box([r + xw / 2, 0.5 + h1 + h2, 0], [xw, 1, w]),\n        ...box([0, 0.5 + h1, 0], [4 * (r + xw), 1, w]),\n        ...parabola([0, 0.5 + h1 + 1, (w - 1) / 2], [r - 0.5, h1 + h2 + 0.5, (w - 1) / 2]),\n        ...parabola([0, 0.5 + h1 + 1, (w - 1) / 2], [-r + 0.5, h1 + h2 + 0.5, (w - 1) / 2]),\n        ...parabola(\n            [-2 * r - xw * (3 / 2) - 1, 0.5 + h1 + 1, (w - 1) / 2],\n            [-r - xw - 0.5, h1 + h2 + 0.5, (w - 1) / 2]\n        ),\n        ...parabola([2 * r + xw * (3 / 2) + 1, 0.5 + h1 + 1, (w - 1) / 2], [r + xw + 0.5, h1 + h2 + 0.5, (w - 1) / 2]),\n        ...parabola([0, 0.5 + h1 + 1, -(w - 1) / 2], [r - 0.5, h1 + h2 + 0.5, -(w - 1) / 2]),\n        ...parabola([0, 0.5 + h1 + 1, -(w - 1) / 2], [-r + 0.5, h1 + h2 + 0.5, -(w - 1) / 2]),\n        ...parabola(\n            [-2 * r - xw * (3 / 2) - 1, 0.5 + h1 + 1, -(w - 1) / 2],\n            [-r - xw - 0.5, h1 + h2 + 0.5, -(w - 1) / 2]\n        ),\n        ...parabola([2 * r + xw * (3 / 2) + 1, 0.5 + h1 + 1, -(w - 1) / 2], [r + xw + 0.5, h1 + h2 + 0.5, -(w - 1) / 2])\n    ];\n};\n\nconst s = box([0, 0.5, 0], [50, 1, 20]);\n\nconst e = bridge();\n\nexport default createExample(\n    \"Plane to bridge\",\n    [],\n    s.sort((a, b) => a[0] - b[0]),\n    e.sort((a, b) => a[0] - b[0])\n);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst h = 4;\n\nconst pillar = (pos: Vec3.Vec3, height: number): Vec3.Vec3[] =>\n    [...Array(height)].map((_, i) => Vec3.add(pos, [0, i + 0.5, 0]));\n\nconst p = (pos: Vec3.Vec3): Vec3.Vec3[] => {\n    const coords: Vec3.Vec3[] = [\n        [0, 0.5, 1],\n        [0, 0.5, 0],\n        [0, 0.5, -1],\n        [1, 0.5, 1],\n        [1, 0.5, 0],\n        [1, 0.5, -1],\n        [-1, 0.5, 1],\n        [-1, 0.5, 0],\n        [-1, 0.5, -1]\n    ];\n    return coords.map(v => Vec3.add(v, pos));\n};\n\nconst c = (pos: Vec3.Vec3, height: number): Vec3.Vec3[] => [\n    ...pillar(Vec3.add(pos, [1, 0, 1]), height),\n    ...pillar(Vec3.add(pos, [1, 0, -1]), height),\n    ...pillar(Vec3.add(pos, [-1, 0, -1]), height),\n    ...pillar(Vec3.add(pos, [-1, 0, 1]), height)\n];\n\nconst platform = (pos: Vec3.Vec3): Vec3.Vec3[] => [...c(pos, h), ...p(Vec3.add(pos, [0, h, 0]))];\n\nconst f: Vec3.Vec3[] = [...platform([0, 0, 0])];\n\nconst s: Vec3.Vec3[] = pillar([0, 0, 0], h);\nconst e: Vec3.Vec3[] = pillar([0, h + 1, 0], h);\n\nexport default createExample(\"Platform\", f, s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst r = 6;\nconst h = 5;\n\nconst pillar = (pos: Vec3.Vec3, height: number): Vec3.Vec3[] =>\n    [...Array(height)].map((_, i) => Vec3.add(pos, [0, i, 0]));\n\nconst p = (pos: Vec3.Vec3): Vec3.Vec3[] => {\n    const coords: Vec3.Vec3[] = [\n        [0, 0.5, 1],\n        [0, 0.5, 0],\n        [0, 0.5, -1],\n        [1, 0.5, 1],\n        [1, 0.5, 0],\n        [1, 0.5, -1],\n        [-1, 0.5, 1],\n        [-1, 0.5, 0],\n        [-1, 0.5, -1]\n    ];\n    return coords.map(v => Vec3.add(v, pos));\n};\n\nconst c = (pos: Vec3.Vec3): Vec3.Vec3[] => {\n    const coords: Vec3.Vec3[] = [\n        [1, 0.5, 1],\n        [1, 0.5, -1],\n        [-1, 0.5, 1],\n        [-1, 0.5, -1]\n    ];\n    return coords.map(v => Vec3.add(v, pos));\n};\n\nconst platform = (pos: Vec3.Vec3): Vec3.Vec3[] => [\n    ...c(pos),\n    ...c(Vec3.add(pos, [0, 1, 0])),\n    ...p(Vec3.add(pos, [0, 2, 0]))\n];\n\nconst f: Vec3.Vec3[] = [...platform([-r, 0, 0]), ...platform([r, 0, 0])];\n\nconst s: Vec3.Vec3[] = pillar([-r, 3.5, 0], h);\nconst e: Vec3.Vec3[] = pillar([r, 3.5, 0], h);\n\nexport default createExample(\"Platforms\", f, s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst r = 3;\nconst h = 5;\n\nconst pillar = (pos: Vec3.Vec3, height: number): Vec3.Vec3[] =>\n    [...Array(height)].map((_, i) => Vec3.add(pos, [0, i, 0]));\n\nconst p = (pos: Vec3.Vec3): Vec3.Vec3[] => {\n    const coords: Vec3.Vec3[] = [\n        [0, 0.5, 1],\n        [0, 0.5, 0],\n        [0, 0.5, -1],\n        [1, 0.5, 1],\n        [1, 0.5, 0],\n        [1, 0.5, -1],\n        [-1, 0.5, 1],\n        [-1, 0.5, 0],\n        [-1, 0.5, -1]\n    ];\n    return coords.map(v => Vec3.add(v, pos));\n};\n\nconst c = (pos: Vec3.Vec3): Vec3.Vec3[] => {\n    const coords: Vec3.Vec3[] = [\n        [1, 0.5, 1],\n        [1, 0.5, -1],\n        [-1, 0.5, 1],\n        [-1, 0.5, -1]\n    ];\n    return coords.map(v => Vec3.add(v, pos));\n};\n\nconst platform = (pos: Vec3.Vec3): Vec3.Vec3[] => [\n    ...c(pos),\n    ...c(Vec3.add(pos, [0, 1, 0])),\n    ...c(Vec3.add(pos, [0, 2, 0])),\n    ...c(Vec3.add(pos, [0, 3, 0])),\n    ...c(Vec3.add(pos, [0, 4, 0])),\n    ...p(Vec3.add(pos, [0, 5, 0]))\n];\n\nconst f: Vec3.Vec3[] = [...platform([-r, 0, 0]), ...platform([r, 0, 0])];\n\nconst s: Vec3.Vec3[] = pillar([-r, 6.5, 0], h);\nconst e: Vec3.Vec3[] = pillar([r, 6.5, 0], h);\n\nexport default createExample(\"Tall platforms\", f, s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst pryramid = (m: number, pos: Vec3.Vec3): Vec3.Vec3[] => {\n    if (m === 0) return [Vec3.clone(pos)];\n    const n = m - 1;\n    const a = 3 ** n;\n    const d1 = Vec3.multiplyScalar([1, 0, 0], a);\n    const d2 = Vec3.multiplyScalar([1 / 2, 0, Math.sqrt(3) / 2], a);\n    const d3 = Vec3.multiplyScalar([1 / 2, Math.sqrt(2 / 3), 1 / (2 * Math.sqrt(3))], a);\n    const c = Vec3.multiplyScalar(Vec3.add(d1, d2), 2 / 3);\n    const p = Vec3.sub(pos, c);\n    return [\n        ...pryramid(n, p),\n        ...pryramid(n, Vec3.add(p, d1)),\n        ...pryramid(n, Vec3.add(p, d2)),\n        ...pryramid(n, Vec3.add(p, d3)),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d1, d1))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d1, d2))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d2, d2))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d1, d3))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d2, d3))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d3, d3)))\n    ];\n};\n\nconst box = (pos: Vec3.Vec3, size: Vec3.Vec3): Vec3.Vec3[] =>\n    [...Array(size[0])]\n        .map((_, i) =>\n            [...Array(size[1])].map((_, j) =>\n                [...Array(size[2])].map((_, k) => Vec3.add(pos, [i - (size[0] - 1) / 2, j, k - (size[2] - 1) / 2]))\n            )\n        )\n        .flat()\n        .flat();\n\nconst s = pryramid(3, [0, 0.5, 0]);\n\nconst e = box([0, 0.5, 0], [50, 1, 20]);\n\nexport default createExample(\n    \"Pyramid to plane\",\n    [],\n    s.sort((a, b) => a[0] - b[0]),\n    e.sort((a, b) => a[0] - b[0])\n);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [0, 0, 0],\n    [0, 1, 0],\n    [0, 2, 0],\n    [0, 0, 1],\n    [0, 1, 1],\n    [0, 2, 1],\n    [-1, 0, 0],\n    [-1, 1, 0],\n    [-1, 2, 0],\n    [-1, 0, 1],\n    [-1, 1, 1],\n    [-1, 2, 1]\n];\n\nconst e: Vec3.Vec3[] = [\n    [0, 0, 0],\n    [1, 0, 0],\n    [2, 0, 0],\n    [0, 0, 1],\n    [1, 0, 1],\n    [2, 0, 1],\n    [0, 1, 0],\n    [1, 1, 0],\n    [2, 1, 0],\n    [0, 1, 1],\n    [1, 1, 1],\n    [2, 1, 1]\n];\n\nexport default createExample(\n    \"Rolling box\",\n    [],\n    s.map(v => Vec3.add(v, [0, 0.5, 0])),\n    e.map(v => Vec3.add(v, [0, 0.5, 0]))\n);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s = [...[...Array(5)].map((_, i): Vec3.Vec3 => [i, 0.5, 0])];\n\nconst e = [...[...Array(5)].map((_, i): Vec3.Vec3 => [0, 0.5 + i, 0])];\n\nexport default createExample(\"Stack\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst r = 5;\nconst h = 5;\n\nconst tower = (pos: Vec3.Vec3): Vec3.Vec3[] => [...Array(h)].map((_, i) => Vec3.add(pos, [0, i, 0]));\n\nconst s: Vec3.Vec3[] = [...tower([r, 0.5, 0]), ...tower([-r, 0.5, 0]), [r, h + 0.5, 0]];\n\nconst e: Vec3.Vec3[] = [...tower([r, 0.5, 0]), ...tower([-r, 0.5, 0]), [-r, h + 0.5, 0]];\n\nexport default createExample(\"Short towers\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst r = 5;\nconst h = 7;\n\nconst tower = (pos: Vec3.Vec3): Vec3.Vec3[] => [...Array(h)].map((_, i) => Vec3.add(pos, [0, i, 0]));\n\nconst s: Vec3.Vec3[] = [...tower([r, 0.5, 0]), ...tower([-r, 0.5, 0]), [r, h + 0.5, 0]];\n\nconst e: Vec3.Vec3[] = [...tower([r, 0.5, 0]), ...tower([-r, 0.5, 0]), [-r, h + 0.5, 0]];\n\nexport default createExample(\"Tall towers\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [0, 0.5, 1],\n    [0, 0.5, -1],\n\n    [0, 1.5, 1],\n    [0, 1.5, 0],\n    [0, 1.5, -1],\n\n    [1, 1.5, 1],\n    [1, 1.5, 0],\n    [1, 1.5, -1],\n\n    [2, 1.5, 1],\n    [2, 1.5, 0],\n    [2, 1.5, -1],\n\n    [3, 1.5, 1],\n    [3, 1.5, 0],\n    [3, 1.5, -1],\n\n    [3, 0.5, 1],\n    [3, 0.5, -1]\n];\n\nconst e: Vec3.Vec3[] = [\n    [0, 0.5, 1],\n    [0, 0.5, -1],\n\n    [0, 1.5, 0.8],\n    [0, 3.5, 0],\n    [0, 1.5, -0.8],\n\n    [0, 2.5, 0.6],\n    [0, 4.5, 0],\n    [0, 2.5, -0.6],\n\n    [0, 5.5, 1],\n    [0, 5.5, 0],\n    [0, 5.5, -1],\n\n    [0, 4.7, 1.6],\n    [0, 6.5, 0],\n    [0, 4.7, -1.6],\n\n    [0, 3.7, 2],\n    [0, 3.7, -2]\n];\n\nexport default createExample(\"Transformer\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst pillar = (pos: Vec3.Vec3) => {\n    const list: Vec3.Vec3[] = [\n        [0, 0, 0],\n        [1, 0, 0],\n        [-1, 0, 0],\n        [0, 0, 1],\n        [0, 0, -1],\n        [0, 1, 0],\n        [0, 2, 0],\n        [0, 3, 0]\n    ];\n    return list.map((p: Vec3.Vec3) => Vec3.add(p, pos));\n};\n\nconst space = 3;\n\nconst s: Vec3.Vec3[] = [\n    ...pillar([space * 2, 0.5, -space * 2]),\n    ...pillar([space, 0.5, -space]),\n    ...pillar([0, 0.5, 0]),\n    ...pillar([-space, 0.5, space]),\n    ...pillar([-space * 2, 0.5, space * 2]),\n    [-space * 2, 4.5, space * 2]\n];\n\nconst e: Vec3.Vec3[] = [\n    ...pillar([space * 2, 0.5, -space * 2]),\n    ...pillar([space, 0.5, -space]),\n    ...pillar([0, 0.5, 0]),\n    ...pillar([-space, 0.5, space]),\n    ...pillar([-space * 2, 0.5, space * 2]),\n    [space * 2, 4.5, -space * 2]\n];\n\nexport default createExample(\"Transport\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [-3, 0.5, 0],\n    [-3, 1.5, 0],\n    [-3, 2.5, 0],\n    [-2, 2.5, 0],\n    [-1, 2.5, 0],\n    [-3, 3.5, 0],\n    [-3, 4.5, 0],\n    [-3, 5.5, 0],\n    [-3, 6.5, 0],\n    [-2, 6.5, 0],\n    [-1, 6.5, 0],\n    [-3, 7.5, 0],\n    [-3, 8.5, 0],\n    [-3, 9.5, 0],\n    [-3, 10.5, 0],\n    [-2, 10.5, 0],\n    [-1, 10.5, 0],\n\n    [3, 0.5, 0],\n    [3, 1.5, 0],\n    [3, 2.5, 0],\n    [3, 3.5, 0],\n    [3, 4.5, 0],\n    [2, 4.5, 0],\n    [1, 4.5, 0],\n    [3, 5.5, 0],\n    [3, 6.5, 0],\n    [3, 7.5, 0],\n    [3, 8.5, 0],\n    [2, 8.5, 0],\n    [1, 8.5, 0],\n    [3, 9.5, 0],\n    [3, 10.5, 0],\n    [3, 11.5, 0],\n    [3, 12.5, 0],\n    [3, 13.5, 0],\n    [2, 13.5, 0],\n    [1, 13.5, 0],\n    [0, 13.5, 0],\n    [-1, 13.5, 0],\n    [-2, 13.5, 0],\n    [-3, 13.5, 0],\n    [-3, 12.5, 0],\n    [-3, 11.5, 0],\n\n    [0, 0.5, 0]\n];\n\nconst e: Vec3.Vec3[] = [\n    [-3, 0.5, 0],\n    [-3, 1.5, 0],\n    [-3, 2.5, 0],\n    [-2, 2.5, 0],\n    [-1, 2.5, 0],\n    [-3, 3.5, 0],\n    [-3, 4.5, 0],\n    [-3, 5.5, 0],\n    [-3, 6.5, 0],\n    [-2, 6.5, 0],\n    [-1, 6.5, 0],\n    [-3, 7.5, 0],\n    [-3, 8.5, 0],\n    [-3, 9.5, 0],\n    [-3, 10.5, 0],\n    [-2, 10.5, 0],\n    [-1, 10.5, 0],\n\n    [3, 0.5, 0],\n    [3, 1.5, 0],\n    [3, 2.5, 0],\n    [3, 3.5, 0],\n    [3, 4.5, 0],\n    [2, 4.5, 0],\n    [1, 4.5, 0],\n    [3, 5.5, 0],\n    [3, 6.5, 0],\n    [3, 7.5, 0],\n    [3, 8.5, 0],\n    [2, 8.5, 0],\n    [1, 8.5, 0],\n    [3, 9.5, 0],\n    [3, 10.5, 0],\n    [3, 11.5, 0],\n    [3, 12.5, 0],\n    [3, 13.5, 0],\n    [2, 13.5, 0],\n    [1, 13.5, 0],\n    [0, 13.5, 0],\n    [-1, 13.5, 0],\n    [-2, 13.5, 0],\n    [-3, 13.5, 0],\n    [-3, 12.5, 0],\n    [-3, 11.5, 0],\n\n    [0, 12.5, 0]\n];\n\nexport default createExample(\"Vertical transport\", [], s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst f: Vec3.Vec3[] = [\n    [0, 0.5, 1],\n    [0, 0.5, 0],\n    [0, 0.5, -1],\n    [0, 1.5, 1],\n    [0, 1.5, 0],\n    [0, 1.5, -1],\n    [0, 2.5, 1],\n    [0, 2.5, 0],\n    [0, 2.5, -1]\n];\n\nconst s: Vec3.Vec3[] = [[2, 0.5, 0]];\n\nconst e: Vec3.Vec3[] = [[-2, 0.5, 0]];\n\nexport default createExample(\"Wall\", f, s, e);\n","import { Vec3 } from \"../core\";\nimport { createExample } from \"./utils\";\n\nconst pryramid = (n: number, pos: Vec3.Vec3): Vec3.Vec3[] => {\n    if (n === 0) return [Vec3.clone(pos)];\n    --n;\n    const a = 3 ** n;\n    const d1 = Vec3.multiplyScalar([1, 0, 0], a);\n    const d2 = Vec3.multiplyScalar([1 / 2, 0, Math.sqrt(3) / 2], a);\n    const d3 = Vec3.multiplyScalar([1 / 2, Math.sqrt(2 / 3), 1 / (2 * Math.sqrt(3))], a);\n    const c = Vec3.multiplyScalar(Vec3.add(d1, d2), 2 / 3);\n    const p = Vec3.sub(pos, c);\n    return [\n        ...pryramid(n, p),\n        ...pryramid(n, Vec3.add(p, d1)),\n        ...pryramid(n, Vec3.add(p, d2)),\n        ...pryramid(n, Vec3.add(p, d3)),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d1, d1))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d1, d2))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d2, d2))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d1, d3))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d2, d3))),\n        ...pryramid(n, Vec3.add(p, Vec3.add(d3, d3)))\n    ];\n};\n\nconst box = (pos: Vec3.Vec3, size: Vec3.Vec3): Vec3.Vec3[] =>\n    [...Array(size[0])]\n        .map((_, i) =>\n            [...Array(size[1])].map((_, j) =>\n                [...Array(size[2])].map((_, k) => Vec3.add(pos, [i - (size[0] - 1) / 2, j, k - (size[2] - 1) / 2]))\n            )\n        )\n        .flat()\n        .flat();\n\nconst parabola = (from: Vec3.Vec3, to: Vec3.Vec3): Vec3.Vec3[] => {\n    const d = Vec3.sub(to, from);\n    if (Vec3.length(d) < 1) return [to];\n    const dh: Vec3.Vec3 = [d[0], 0, d[2]];\n    const diff = Vec3.normalize(Vec3.add(Vec3.normalize(dh), [0, 2 * (d[1] / Vec3.length(dh)), 0]));\n    return [to, ...parabola(from, Vec3.sub(to, diff))];\n};\n\nconst bridge = (): Vec3.Vec3[] => {\n    const h1 = 11;\n    const h2 = 31;\n    const r = 45;\n    const w = 18;\n    const xw = 5;\n    const zw = 3;\n    return [\n        ...box([-2 * r - xw * (3 / 2), 0.5, 0], [xw, h1, w]),\n        ...box([-r - xw / 2, 0.5, 0], [xw, h1, w]),\n        ...box([-r - xw / 2, 0.5 + h1 + 1, (w - zw) / 2], [xw, h2 - 1, zw]),\n        ...box([-r - xw / 2, 0.5 + h1 + 1, -(w - zw) / 2], [xw, h2 - 1, zw]),\n        ...box([-r - xw / 2, 0.5 + h1 + h2, 0], [xw, 1, w]),\n        ...box([2 * r + xw * (3 / 2), 0.5, 0], [xw, h1, w]),\n        ...box([r + xw / 2, 0.5, 0], [xw, h1, w]),\n        ...box([r + xw / 2, 0.5 + h1 + 1, (w - zw) / 2], [xw, h2 - 1, zw]),\n        ...box([r + xw / 2, 0.5 + h1 + 1, -(w - zw) / 2], [xw, h2 - 1, zw]),\n        ...box([r + xw / 2, 0.5 + h1 + h2, 0], [xw, 1, w]),\n        ...box([0, 0.5 + h1, 0], [4 * (r + xw), 1, w]),\n        ...parabola([0, 0.5 + h1 + 1, (w - 1) / 2], [r - 0.5, h1 + h2 + 0.5, (w - 1) / 2]),\n        ...parabola([0, 0.5 + h1 + 1, (w - 1) / 2], [-r + 0.5, h1 + h2 + 0.5, (w - 1) / 2]),\n        ...parabola(\n            [-2 * r - xw * (3 / 2) - 1, 0.5 + h1 + 1, (w - 1) / 2],\n            [-r - xw - 0.5, h1 + h2 + 0.5, (w - 1) / 2]\n        ),\n        ...parabola([2 * r + xw * (3 / 2) + 1, 0.5 + h1 + 1, (w - 1) / 2], [r + xw + 0.5, h1 + h2 + 0.5, (w - 1) / 2]),\n        ...parabola([0, 0.5 + h1 + 1, -(w - 1) / 2], [r - 0.5, h1 + h2 + 0.5, -(w - 1) / 2]),\n        ...parabola([0, 0.5 + h1 + 1, -(w - 1) / 2], [-r + 0.5, h1 + h2 + 0.5, -(w - 1) / 2]),\n        ...parabola(\n            [-2 * r - xw * (3 / 2) - 1, 0.5 + h1 + 1, -(w - 1) / 2],\n            [-r - xw - 0.5, h1 + h2 + 0.5, -(w - 1) / 2]\n        ),\n        ...parabola([2 * r + xw * (3 / 2) + 1, 0.5 + h1 + 1, -(w - 1) / 2], [r + xw + 0.5, h1 + h2 + 0.5, -(w - 1) / 2])\n    ];\n};\n\nconst s = box([0, 0.5, 0], [100, 1, 100]);\n\nconst e = bridge();\n\nexport default createExample(\n    \"Plane to bridge\",\n    [],\n    s.sort((a, b) => a[0] - b[0]),\n    e.sort((a, b) => a[0] - b[0])\n);\n","import { Example as ExampleType } from \"./utils\";\nimport { World } from \"../core\";\nimport arc from \"./arc\";\nimport bigArc from \"./bigArc\";\nimport bigCube from \"./bigCube\";\nimport box from \"./box\";\nimport brachiation from \"./brachiation\";\nimport bridgeToPyramid1000 from \"./bridgeToPyramid1000\";\nimport crane from \"./crane\";\nimport floorTransport from \"./floorTransport\";\nimport frameTransport from \"./frameTransport\";\nimport planeToBridge1000 from \"./planeToBridge1000\";\nimport platform from \"./platform\";\nimport platforms from \"./platforms\";\nimport platformsTall from \"./platformsTall\";\nimport pyramidToPlane1000 from \"./pyramidToPlane1000\";\nimport rollingBox from \"./rollingBox\";\nimport stack from \"./stack\";\nimport towersShort from \"./towersShort\";\nimport towersTall from \"./towersTall\";\nimport transformer from \"./transformer\";\nimport transport from \"./transport\";\nimport verticalTransport from \"./verticalTransport\";\nimport wall from \"./wall\";\nimport planeToBridge10000 from \"./planeToBridge10000\";\nexport type Example = ExampleType;\n\nexport const examples = [\n    arc,\n    bigArc,\n    bigCube,\n    box,\n    brachiation,\n    bridgeToPyramid1000,\n    crane,\n    floorTransport,\n    frameTransport,\n    planeToBridge1000,\n    platform,\n    platforms,\n    platformsTall,\n    pyramidToPlane1000,\n    rollingBox,\n    stack,\n    towersShort,\n    towersTall,\n    transformer,\n    transport,\n    verticalTransport,\n    wall,\n    planeToBridge10000\n].sort((a, b) => {\n    const d = a.start.bots.length - b.start.bots.length;\n    if (d === 0) return a.title > b.title ? 1 : -1;\n    return d;\n});\n\nexport default (example: Example): [World.World, World.World] => [World.clone(example.start), World.clone(example.end)];\n","import React, { FC, useState } from \"react\";\nimport { Vec3, World } from \"../core\";\nimport loadExample, { Example, examples } from \"../examples\";\n\nimport { Button } from \"@material-ui/core\";\nimport Prando from \"prando\";\n\ntype Props = { onSelect: (worldStart: World.World, worldEnd: World.World) => void };\n\nconst SelectExample: FC<Props> = props => {\n    const [selectedExample, setSelectedExample] = useState<number | undefined>(undefined);\n\n    const exampleButton = (example: Example, i: number) => (\n        <Button\n            key={i}\n            variant=\"contained\"\n            color={selectedExample === i ? \"primary\" : \"default\"}\n            onClick={() => {\n                const rng = new Prando(123);\n                const [ws, we] = loadExample(example);\n                console.log(ws, we);\n                const rand = () =>\n                    Vec3.multiplyScalar(Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5), 0.1);\n                ws.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                we.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                props.onSelect(ws, we);\n                setSelectedExample(i);\n            }}>\n            {example.title} ({example.start.bots.length} bots)\n        </Button>\n    );\n\n    const examplesNoFixed = examples.filter(e => !e.start.bots.some(bot => bot.fixed));\n\n    const examplesFixed = examples.filter(e => e.start.bots.some(bot => bot.fixed));\n\n    return (\n        <>\n            <b>Select an example</b>\n            <br />\n            <br />\n            No obstacles\n            <br />\n            <br />\n            {examplesNoFixed.map(exampleButton)}\n            <br />\n            <br />\n            Obstacles\n            <br />\n            <br />\n            {examplesFixed.map((e, i) => exampleButton(e, i + examplesNoFixed.length))}\n        </>\n    );\n};\n\nexport default SelectExample;\n","import { Animation, World } from \"../core\";\nimport { Button, List, ListItem } from \"@material-ui/core\";\nimport React, { FC, useEffect, useState } from \"react\";\n\ntype Props = {\n    worldStart: World.World | undefined;\n    worldEnd: World.World | undefined;\n    setWorld: (world: World.World) => void;\n    config: Animation.Config;\n};\n\nconst Static: FC<Props> = props => {\n    const [time, setTime] = useState(0);\n    const [pause, setPause] = useState(true);\n    const [animation, setAnimation] = useState<World.World[]>([]);\n\n    useEffect(() => {\n        if (animation.length === 0) return;\n        const pauseFrac = 0.1;\n        const pauseFrames = Math.round(pauseFrac * animation.length);\n        let t = time % (2 * (animation.length + pauseFrames));\n        if (t < pauseFrames) {\n            props.setWorld(animation[0]);\n            return;\n        }\n        t -= pauseFrames;\n        if (t < animation.length) {\n            props.setWorld(animation[t]);\n            return;\n        }\n        t -= animation.length;\n        if (t < pauseFrames) {\n            props.setWorld(animation[animation.length - 1]);\n            return;\n        }\n        t -= pauseFrames;\n        props.setWorld(animation[animation.length - 1 - t]);\n    }, [animation, time]);\n\n    useEffect(() => {\n        if (pause) return undefined;\n        const i = setInterval(() => setTime(t => t + 1), 1000 / 30);\n        return () => clearInterval(i);\n    }, [pause]);\n\n    useEffect(() => {\n        setPause(true);\n        if (props.worldStart === undefined) return;\n        props.setWorld(props.worldStart);\n    }, [props.worldStart]);\n\n    return (\n        <List>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        if (props.worldStart === undefined || props.worldEnd === undefined) return;\n                        const t = Date.now();\n                        setAnimation(\n                            Animation.createAnimation(\n                                props.worldStart,\n                                props.worldStart,\n                                props.worldEnd,\n                                props.worldEnd,\n                                props.config\n                            )\n                        );\n                        console.log((Date.now() - t) / 1000);\n                        setPause(false);\n                    }}>\n                    Generate animation\n                </Button>\n            </ListItem>\n            <ListItem>\n                <Button variant=\"contained\" onClick={() => setPause(!pause)}>\n                    paused: {pause ? \"yes\" : \"no\"}\n                </Button>\n                {pause && (\n                    <Button variant=\"contained\" onClick={() => setTime(time + 1)}>\n                        Step\n                    </Button>\n                )}\n            </ListItem>\n        </List>\n    );\n};\n\nexport default Static;\n","import { Animation, BoundingBox, Vec3, World } from \"../core\";\nimport {\n    FormControlLabel,\n    Grid,\n    List,\n    ListItem,\n    MenuItem,\n    Select,\n    Switch,\n    TextField,\n    makeStyles\n} from \"@material-ui/core\";\nimport React, { FC, useState } from \"react\";\n\nimport Dynamic from \"./Dynamic\";\nimport Scene from \"./Scene\";\nimport SelectExample from \"./SelectExample\";\nimport Static from \"./Static\";\nimport update from \"immutability-helper\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst worldCenter = (worldStart: World.World, worldEnd: World.World): Vec3.Vec3 => {\n    const boundingBox = BoundingBox.merge(World.boundingBox(worldStart), World.boundingBox(worldEnd));\n    return Vec3.multiplyScalar(Vec3.add(boundingBox.min, boundingBox.max), 0.5);\n};\n\nconst App: FC = () => {\n    const classes = useStyles();\n    const [worldStart, setWorldStart] = useState<World.World | undefined>(undefined);\n    const [worldEnd, setWorldEnd] = useState<World.World | undefined>(undefined);\n    const [world, setWorld] = useState<World.World | undefined>(undefined);\n    const [worldPrev, setWorldPrev] = useState<World.World | undefined>(undefined);\n    const [dynamic, setDynamic] = useState(false);\n\n    const [config, setConfig] = useState<Animation.Config>({\n        subdivideIterations: 10,\n        optimizeIterations: 15,\n        contractionType: Animation.ContractionType.Fibers,\n        contractIterations: 100,\n        minimizeAccelerationIterations: 100,\n        offset: 1.5,\n        slack: 2,\n        friction: 0.1,\n        overlapPenalty: 1000,\n        gravity: 1,\n        botMass: 1,\n        dt: 1\n    });\n\n    const center: Vec3.Vec3 =\n        worldStart === undefined || worldEnd === undefined ? [0, 0, 0] : worldCenter(worldStart, worldEnd);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid item xs={4} style={{ height: \"97vh\", overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <b style={{ fontSize: 20 }}>Microbots</b>\n                        <Grid item className={classes.gridItem}>\n                            <SelectExample\n                                onSelect={(ws: World.World, we: World.World) => {\n                                    setWorldStart(ws);\n                                    setWorldEnd(we);\n                                    setWorld(ws);\n                                    setWorldPrev(ws);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <b>Animation</b>\n                            <br />\n                            <FormControlLabel\n                                control={<Switch checked={dynamic} onChange={e => setDynamic(e.target.checked)} />}\n                                label=\"Dynamic\"\n                            />\n                            {dynamic ? (\n                                <Dynamic\n                                    worldStart={worldStart}\n                                    worldEnd={worldEnd}\n                                    world={world}\n                                    worldPrev={worldPrev}\n                                    setWorld={setWorld}\n                                    setWorldPrev={setWorldPrev}\n                                    config={config}\n                                />\n                            ) : (\n                                <Static\n                                    worldStart={worldStart}\n                                    worldEnd={worldEnd}\n                                    setWorld={setWorld}\n                                    config={config}\n                                />\n                            )}\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <b>Extra options</b>\n                            <List>\n                                {Object.entries(config).map(([key, value]) => (\n                                    <ListItem key={key}>\n                                        {key === \"contractionType\" ? (\n                                            <Select\n                                                value={value}\n                                                onChange={e => {\n                                                    setConfig(\n                                                        update(config, {\n                                                            [key]: { $set: e.target.value as Animation.ContractionType }\n                                                        })\n                                                    );\n                                                }}>\n                                                {Object.entries(Animation.ContractionType)\n                                                    .filter(([k]) => isNaN(Number(k)))\n                                                    .map(([k, v]) => (\n                                                        <MenuItem key={k} value={v}>\n                                                            {k}\n                                                        </MenuItem>\n                                                    ))}\n                                            </Select>\n                                        ) : (\n                                            <TextField\n                                                type=\"number\"\n                                                label={key}\n                                                value={value}\n                                                onChange={e =>\n                                                    setConfig(\n                                                        update(config, {\n                                                            [key]: { $set: Math.max(parseFloat(e.target.value), 0) }\n                                                        })\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    </ListItem>\n                                ))}\n                            </List>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <Scene worldStart={worldStart} world={world} center={center} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import Gui from \"./Gui\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Gui />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}