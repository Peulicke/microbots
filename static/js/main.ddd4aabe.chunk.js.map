{"version":3,"sources":["core/Vec3.ts","core/Mat3.ts","core/Bot.ts","core/utils.ts","core/World.ts","core/matrix.ts","core/Animation.ts","draw.ts","App.tsx","index.tsx"],"names":["newVec3","x","y","z","clone","a","add","b","sub","multiplyScalar","s","divideScalar","dot","length","Math","sqrt","newMat3","Vec3","apply","newBot","pos","weight","fixed","setPos","bot","setWeight","setFixed","average","result","Error","throwError","i","zeros","height","width","Array","map","numberArrayFromVec3Array","vec","e","k","newWorld","bots","setBots","world","friction","edgeStrength","d","exp","stiffness","Mat3","stiffnessDerivative","dim","epsilon","val","dPlus","dMinus","plus","minus","stiffnessPair","stiffnessPairDerivative","derivative","removeFixedFromVector","vector","v","removeFixedFromMatrix","mat","j","stiffnessMatrix","sx","sy","sz","acceleration","before","after","dt","v1","v2","forceMatrix","acc","displacement","A","f","row","element","l","numberArrayFromMat3Array","linear","resolveCollisionStep","max","oneFixed","dist","n","resolveCollision","gradient","uBefore","u","uAfter","beforeBefore","afterAfter","res","ss","dku","start","end","World","Bot","animation","displacements","min","optimizeStep","stepSize","g","subdivide","createAnimation","c","updateCylinder","from","to","radius","cylinder","orientation","Matrix4","lookAt","Vector3","Object3D","up","multiply","set","setRotationFromMatrix","scale","position","newCylinder","color","edgeGeometry","CylinderGeometry","Mesh","MeshPhongMaterial","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","worldStart","pipe","_","flat","worldEnd","Animation","botMeshes","geom","SphereGeometry","computeVertexNormals","faces","forEach","face","vertexColors","fill","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","geometry","newSphere","Color","groundEdgeMeshes","edgeMeshes","scene","Scene","AmbientLight","light","DirectionalLight","newScene","updateWorld","time","remove","strength","App","useWindowSize","windowWidth","windowHeight","classes","mount","useRef","useState","controls","setControls","camera","setCamera","renderer","setRenderer","frame","setFrame","setTime","animating","setAnimating","useEffect","mc","current","cam","PerspectiveCamera","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","t","window","setInterval","clearInterval","removeChild","update","render","pauseFrames","round","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","direction","className","Paper","List","ListItem","onClick","image","document","getElementsByTagName","toDataURL","createElement","href","replace","download","click","saveImage","ref","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.ddd4aabe.chunk.js","sourcesContent":["export type Vec3 = [number, number, number];\n\nexport const newVec3 = (x: number, y: number, z: number): Vec3 => [x, y, z];\n\nexport const clone = (a: Vec3): Vec3 => [a[0], a[1], a[2]];\n\nexport const add = (a: Vec3, b: Vec3): Vec3 => [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n\nexport const sub = (a: Vec3, b: Vec3): Vec3 => [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n\nexport const multiplyScalar = (a: Vec3, s: number): Vec3 => [a[0] * s, a[1] * s, a[2] * s];\n\nexport const divideScalar = (a: Vec3, s: number): Vec3 => [a[0] / s, a[1] / s, a[2] / s];\n\nexport const dot = (a: Vec3, b: Vec3): number => a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\nexport const length = (a: Vec3): number => Math.sqrt(dot(a, a));\n","import * as Vec3 from \"./Vec3\";\n\nexport type Mat3 = [Vec3.Vec3, Vec3.Vec3, Vec3.Vec3];\n\nexport const newMat3 = (x: Vec3.Vec3, y: Vec3.Vec3, z: Vec3.Vec3): Mat3 => [x, y, z];\n\nexport const clone = (a: Mat3): Mat3 => [Vec3.clone(a[0]), Vec3.clone(a[1]), Vec3.clone(a[2])];\n\nexport const add = (a: Mat3, b: Mat3): Mat3 => [Vec3.add(a[0], b[0]), Vec3.add(a[1], b[1]), Vec3.add(a[2], b[2])];\n\nexport const sub = (a: Mat3, b: Mat3): Mat3 => [Vec3.sub(a[0], b[0]), Vec3.sub(a[1], b[1]), Vec3.sub(a[2], b[2])];\n\nexport const multiplyScalar = (a: Mat3, s: number): Mat3 => [\n    Vec3.multiplyScalar(a[0], s),\n    Vec3.multiplyScalar(a[1], s),\n    Vec3.multiplyScalar(a[2], s)\n];\n\nexport const divideScalar = (a: Mat3, s: number): Mat3 => [\n    Vec3.divideScalar(a[0], s),\n    Vec3.divideScalar(a[1], s),\n    Vec3.divideScalar(a[2], s)\n];\n\nexport const apply = (a: Mat3, b: Vec3.Vec3): Vec3.Vec3 => [Vec3.dot(a[0], b), Vec3.dot(a[1], b), Vec3.dot(a[2], b)];\n","import { Vec3, newVec3, add, divideScalar } from \"./Vec3\";\n\nexport type Bot = {\n    pos: Vec3;\n    weight: number;\n    fixed: boolean;\n};\n\nexport const newBot = (): Bot => ({\n    pos: newVec3(0, 0, 0),\n    weight: 1,\n    fixed: false\n});\n\nexport const setPos = (pos: Vec3) => (bot: Bot): Bot => {\n    bot.pos = pos;\n    return bot;\n};\n\nexport const setWeight = (weight: number) => (bot: Bot): Bot => {\n    bot.weight = weight;\n    return bot;\n};\n\nexport const setFixed = (fixed: boolean) => (bot: Bot): Bot => {\n    bot.fixed = fixed;\n    return bot;\n};\n\nexport const average = (a: Bot, b: Bot): Bot => {\n    const result = newBot();\n    result.pos = divideScalar(add(a.pos, b.pos), 2);\n    result.weight = (a.weight + b.weight) / 2;\n    result.fixed = a.fixed || b.fixed;\n    return result;\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\n\nconst throwError = () => {\n    throw new Error(\"Vectors need to be the same length\");\n};\n\nexport const dot = (a: number[], b: number[]): number => {\n    if (a.length !== b.length) throwError();\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) result += a[i] * b[i];\n    return result;\n};\n\nexport const outerProduct = (a: Vec3.Vec3, b: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.newMat3(\n        Vec3.newVec3(a[0] * b[0], a[0] * b[1], a[0] * b[2]),\n        Vec3.newVec3(a[1] * b[0], a[1] * b[1], a[1] * b[2]),\n        Vec3.newVec3(a[2] * b[0], a[2] * b[1], a[2] * b[2])\n    );\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n\nexport const numberArrayFromVec3Array = (vec: Vec3.Vec3[]): number[] => {\n    const result = [...Array(3 * vec.length)].map(() => 0);\n    vec.map((e, i) => {\n        for (let k = 0; k < 3; ++k) {\n            result[3 * i + k] = e[k];\n        }\n    });\n    return result;\n};\n\nexport const numberArrayToVec3Array = (vec: number[]): Vec3.Vec3[] =>\n    [...Array(vec.length / 3)].map((_, i) => Vec3.newVec3(vec[3 * i], vec[3 * i + 1], vec[3 * i + 2]));\n\nexport const numberArrayFromMat3Array = (mat: Mat3.Mat3[][]): number[][] => {\n    const result = zeros(3 * mat.length, 3 * mat[0]?.length || 0);\n    mat.map((row, i) =>\n        row.map((element, j) => {\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k][3 * j + l] = mat[i][j][k][l];\n                }\n            }\n        })\n    );\n    return result;\n};\n\nexport const numberArrayToMat3Array = (mat: number[][]): Mat3.Mat3[][] =>\n    zeros(mat.length / 3, (mat[0]?.length || 0) / 3).map((row, i) =>\n        row.map((element, j) => {\n            const res = Mat3.newMat3(Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0));\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    res[k][l] = mat[3 * i + k][3 * j + l];\n                }\n            }\n            return res;\n        })\n    );\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\nimport { dot, outerProduct, numberArrayFromVec3Array, numberArrayFromMat3Array } from \"./utils\";\nimport { ldiv } from \"./matrix\";\nimport * as Bot from \"./Bot\";\n\nexport type World = { bots: Bot.Bot[] };\n\nexport const newWorld = (): World => ({ bots: [] });\n\nexport const setBots = (bots: Bot.Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nconst power = 4;\nconst friction = 0.1;\n\nexport const edgeStrength = (d: number): number => 2 / (1 + Math.exp(power * (d - 1)));\n\nexport const stiffness = (d: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.multiplyScalar(outerProduct(d, d), -edgeStrength(Vec3.length(d)) / Vec3.dot(d, d));\n\nexport const stiffnessDerivative = (dim: number) => (d: Vec3.Vec3): Mat3.Mat3 => {\n    const epsilon = 0.00001;\n    const val = d[dim];\n    const dPlus = Vec3.clone(d);\n    dPlus[dim] = val + epsilon;\n    const dMinus = Vec3.clone(d);\n    dMinus[dim] = val - epsilon;\n    const plus = stiffness(dPlus);\n    const minus = stiffness(dMinus);\n    return Mat3.multiplyScalar(Mat3.sub(plus, minus), 1 / (2 * epsilon));\n};\n\nexport const stiffnessPair = (a: Bot.Bot, b: Bot.Bot): Mat3.Mat3 => {\n    const d = Vec3.sub(b.pos, a.pos);\n    return stiffness(d);\n};\n\nexport const stiffnessPairDerivative = (bot: Bot.Bot) => (dim: number) => (a: Bot.Bot, b: Bot.Bot): Mat3.Mat3 => {\n    if (a !== bot && b !== bot)\n        return Mat3.newMat3(Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0));\n    const derivative = stiffnessDerivative(dim)(Vec3.sub(b.pos, a.pos));\n    if (a === bot) return Mat3.multiplyScalar(derivative, -1);\n    return derivative;\n};\n\nexport const removeFixedFromVector = (world: World) => (vector: Vec3.Vec3[]): Vec3.Vec3[] =>\n    vector.map((v, i) => (world.bots[i].fixed ? Vec3.newVec3(0, 0, 0) : v));\n\nexport const removeFixedFromMatrix = (world: World) => (mat: Mat3.Mat3[][]): Mat3.Mat3[][] =>\n    mat.map((vector, i) =>\n        vector.map((v, j) =>\n            world.bots[i].fixed || world.bots[j].fixed\n                ? Mat3.newMat3(Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0))\n                : v\n        )\n    );\n\nexport const stiffnessMatrix = (world: World): Mat3.Mat3[][] => {\n    const result = world.bots.map(() =>\n        world.bots.map(() => Mat3.newMat3(Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0), Vec3.newVec3(0, 0, 0)))\n    );\n    for (let i = 0; i < world.bots.length; ++i) {\n        const sx = Mat3.multiplyScalar(stiffness(Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0)), friction);\n        const sy = stiffness(Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n        const sz = Mat3.multiplyScalar(stiffness(Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5)), friction);\n        result[i][i] = Mat3.sub(result[i][i], sx);\n        result[i][i] = Mat3.sub(result[i][i], sy);\n        result[i][i] = Mat3.sub(result[i][i], sz);\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = 0; j < world.bots.length; ++j) {\n            if (i === j) continue;\n            const s = stiffnessPair(world.bots[i], world.bots[j]);\n            result[i][i] = Mat3.sub(result[i][i], s);\n            result[i][j] = Mat3.add(result[i][j], s);\n        }\n    }\n    return removeFixedFromMatrix(world)(result);\n};\n\nexport const acceleration = (before: World, after: World, dt: number) => (world: World): Vec3.Vec3[] =>\n    world.bots.map((bot, i) => {\n        const v1 = Vec3.divideScalar(Vec3.sub(world.bots[i].pos, before.bots[i].pos), dt);\n        const v2 = Vec3.divideScalar(Vec3.sub(after.bots[i].pos, world.bots[i].pos), dt);\n        return Vec3.divideScalar(Vec3.sub(v2, v1), dt);\n    });\n\nexport const forceMatrix = (before: World, after: World, dt: number) => (world: World): Vec3.Vec3[] => {\n    const acc = acceleration(before, after, dt)(world);\n    return removeFixedFromVector(world)(\n        world.bots.map((bot, i) => Vec3.multiplyScalar(Vec3.sub(Vec3.newVec3(0, -1, 0), acc[i]), bot.weight))\n    );\n};\n\nexport const displacement = (before: World, after: World, dt: number) => (world: World): number[] => {\n    const f = numberArrayFromVec3Array(forceMatrix(before, after, dt)(world));\n    const k = numberArrayFromMat3Array(stiffnessMatrix(world));\n    return ldiv(k, f);\n};\n\nexport const resolveCollisionStep = (world: World): World => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].fixed) continue;\n        world.bots[i].pos[1] = Math.max(world.bots[i].pos[1], 0.5);\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (world.bots[i].fixed && world.bots[j].fixed) continue;\n            const oneFixed = world.bots[i].fixed || world.bots[j].fixed;\n            const d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const dist = Vec3.length(d);\n            if (dist > 1) continue;\n            const n = Vec3.multiplyScalar(d, (1 - dist) / (oneFixed ? 1 : 2) / dist);\n            if (!world.bots[i].fixed) world.bots[i].pos = Vec3.sub(world.bots[i].pos, n);\n            if (!world.bots[j].fixed) world.bots[j].pos = Vec3.add(world.bots[j].pos, n);\n        }\n    }\n    return world;\n};\n\nexport const resolveCollision = (world: World): World => {\n    let result = world;\n    for (let i = 0; i < 10; ++i) result = resolveCollisionStep(result);\n    return result;\n};\n\nexport const gradient = (uBefore: number[], u: number[], uAfter: number[]) => (\n    beforeBefore: World,\n    before: World,\n    after: World,\n    afterAfter: World,\n    dt: number\n) => (world: World): Vec3.Vec3[] => {\n    const result = [...Array(world.bots.length)].map(() => Vec3.newVec3(0, 0, 0));\n    const res = [...Array(world.bots.length)].map(() =>\n        [0, 1, 2].map(() => [...Array(world.bots.length)].map(() => Vec3.newVec3(0, 0, 0)))\n    );\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const sx = Mat3.multiplyScalar(\n                stiffnessDerivative(dim)(Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0)),\n                friction\n            );\n            const sy = stiffnessDerivative(dim)(Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n            const sz = Mat3.multiplyScalar(\n                stiffnessDerivative(dim)(Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5)),\n                friction\n            );\n            const v = Vec3.newVec3(u[3 * i], u[3 * i + 1], u[3 * i + 2]);\n            res[i][dim][i] = Vec3.sub(res[i][dim][i], Mat3.apply(Mat3.add(Mat3.add(sx, sy), sz), v));\n            for (let j = 0; j < world.bots.length; ++j) {\n                if (i >= j) continue;\n                const s = stiffnessPairDerivative(world.bots[i])(dim)(world.bots[i], world.bots[j]);\n                const ss = Mat3.apply(s, Vec3.sub(Vec3.newVec3(u[3 * j], u[3 * j + 1], u[3 * j + 2]), v));\n                res[i][dim][i] = Vec3.add(res[i][dim][i], ss);\n                res[i][dim][j] = Vec3.sub(res[i][dim][j], ss);\n                res[j][dim][j] = Vec3.add(res[j][dim][j], ss);\n                res[j][dim][i] = Vec3.sub(res[j][dim][i], ss);\n            }\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const dku = numberArrayFromVec3Array(removeFixedFromVector(world)(res[i][dim]));\n            result[i][dim] =\n                -dot(u, dku) + 2 * ((2 * u[3 * i + dim] - uBefore[3 * i + dim] - uAfter[3 * i + dim]) / dt ** 2);\n        }\n    }\n    return result;\n};\n","import * as linear from \"linear-solve\";\n\nexport const ldiv = (A: number[][], b: number[]): number[] => linear.solve(A, b);\n","import * as Bot from \"./Bot\";\nimport * as World from \"./World\";\nimport * as Vec3 from \"./Vec3\";\n\nconst average = (start: World.World, end: World.World): World.World => {\n    const result = World.newWorld();\n    result.bots = start.bots.map((b, i) => Bot.average(b, end.bots[i]));\n    return result;\n};\n\nexport const gradient = (animation: World.World[], dt: number): Vec3.Vec3[][] => {\n    const result = [...Array(animation.length)].map(() =>\n        [...Array(animation[0].bots.length)].map(() => Vec3.newVec3(0, 0, 0))\n    );\n    const displacements = [...Array(animation.length)].map(() => [...Array(3 * animation[0].bots.length)].map(() => 0));\n    for (let i = 1; i < animation.length - 1; ++i) {\n        const before = animation[i - 1];\n        const after = animation[i + 1];\n        displacements[i] = World.displacement(before, after, dt)(animation[i]);\n    }\n    for (let i = 1; i < animation.length - 1; ++i) {\n        const beforeBefore = animation[Math.max(i - 2, 0)];\n        const before = animation[i - 1];\n        const after = animation[i + 1];\n        const afterAfter = animation[Math.min(i + 2, animation.length - 1)];\n        result[i] = World.gradient(displacements[i - 1], displacements[i], displacements[i + 1])(\n            beforeBefore,\n            before,\n            after,\n            afterAfter,\n            dt\n        )(animation[i]);\n    }\n    return result;\n};\n\nexport const optimizeStep = (stepSize: number) => (animation: World.World[], dt: number): void => {\n    const g = gradient(animation, dt).map(world =>\n        world.map(v => Vec3.multiplyScalar(v, -stepSize / (1 + Vec3.length(v))))\n    );\n    animation.map((world, i) =>\n        world.bots.map((bot, j) => {\n            if (bot.fixed) return;\n            bot.pos = Vec3.add(bot.pos, g[i][j]);\n        })\n    );\n    animation.map(world => World.resolveCollision(world));\n};\n\nconst subdivide = (animation: World.World[]): World.World[] => {\n    const result = [...Array(animation.length * 2 - 1)];\n    for (let i = 0; i < animation.length; ++i) result[2 * i] = animation[i];\n    for (let i = 1; i < result.length - 1; i += 2) result[i] = average(result[i - 1], result[i + 1]);\n    return result;\n};\n\nexport const createAnimation = (before: World.World, after: World.World, n: number): World.World[] => {\n    let result = [before, after];\n    let dt = 100;\n    let stepSize = 0.1;\n    for (let i = 0; i < n; ++i) {\n        dt /= 2;\n        stepSize /= 2;\n        result = subdivide(result);\n        for (let c = 0; c < 30; ++c) {\n            optimizeStep(stepSize)(result, dt);\n        }\n    }\n    return result;\n};\n","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D\n} from \"three\";\nimport * as Vec3 from \"./core/Vec3\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const newSphere = (pos: Vec3.Vec3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.position.set(...pos);\n    mesh.scale.set(0.5, 0.5, 0.5);\n    return mesh;\n};\n\nexport const updateCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number) => (cylinder: Mesh): Mesh => {\n    const orientation = new Matrix4();\n    orientation.lookAt(new Vector3(...from), new Vector3(...to), new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    cylinder.setRotationFromMatrix(orientation);\n    cylinder.scale.set(radius, Vec3.length(Vec3.sub(to, from)), radius);\n    const pos = Vec3.divideScalar(Vec3.add(from, to), 2);\n    cylinder.position.set(pos[0], pos[1], pos[2]);\n    return cylinder;\n};\n\nexport const newCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number, color: Color): Mesh => {\n    const edgeGeometry = new CylinderGeometry(1, 1, 1, 8, 1);\n    const cylinder = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    return updateCylinder(from, to, radius)(cylinder);\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { PerspectiveCamera, WebGLRenderer, Color } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { pipe } from \"ts-pipe-compose\";\nimport { Vec3, Bot, World, Animation } from \"./core\";\nimport { newScene, newSphere, newCylinder, updateCylinder } from \"./draw\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst height = 3;\n\nconst worldStart = pipe(\n    World.newWorld(),\n    World.setBots([\n        ...[...Array(height)]\n            .map((_, i) => [\n                Bot.setPos(Vec3.newVec3(-4, 0.5 + i, 0))(Bot.newBot()),\n                Bot.setPos(Vec3.newVec3(4, 0.5 + i, 0))(Bot.newBot())\n            ])\n            .flat(),\n        Bot.setPos(Vec3.newVec3(-4, 0.5 + height, 0))(Bot.newBot())\n    ])\n);\n\nconst worldEnd = pipe(\n    World.newWorld(),\n    World.setBots([\n        ...[...Array(height)]\n            .map((_, i) => [\n                Bot.setPos(Vec3.newVec3(-4, 0.5 + i, 0))(Bot.newBot()),\n                Bot.setPos(Vec3.newVec3(4, 0.5 + i, 0))(Bot.newBot())\n            ])\n            .flat(),\n        Bot.setPos(Vec3.newVec3(4, 0.5 + height, 0))(Bot.newBot())\n    ])\n);\n\nconst animation = Animation.createAnimation(worldStart, worldEnd, 8);\n\nconst botMeshes = animation[0].bots.map(bot => newSphere(bot.pos, bot.fixed ? new Color(0, 0, 1) : new Color(0, 1, 0)));\nconst groundEdgeMeshes = animation[0].bots.map(bot =>\n    newCylinder(bot.pos, Vec3.newVec3(bot.pos[0], 0, bot.pos[2]), 1, new Color(1, 0, 0))\n);\nconst edgeMeshes = animation[0].bots.map(a =>\n    animation[0].bots.map(b => newCylinder(a.pos, b.pos, 1, new Color(1, 0, 0)))\n);\nconst scene = newScene();\nbotMeshes.map(mesh => scene.add(mesh));\ngroundEdgeMeshes.map(mesh => scene.add(mesh));\nedgeMeshes.map((row, i) =>\n    row.map((mesh, j) => {\n        if (i >= j) return;\n        scene.add(mesh);\n    })\n);\n\nconst updateWorld = (time: number) => {\n    animation[time].bots.map((bot, i) => {\n        botMeshes[i].position.set(...bot.pos);\n    });\n    animation[time].bots.map((bot, i) => {\n        scene.remove(groundEdgeMeshes[i]);\n        const strength = World.edgeStrength(bot.pos[1] + 0.5);\n        if (strength < 0.01) return;\n        scene.add(groundEdgeMeshes[i]);\n        updateCylinder(\n            bot.pos,\n            Vec3.newVec3(bot.pos[0], 0, bot.pos[2]),\n            Math.sqrt(strength) * 0.3\n        )(groundEdgeMeshes[i]);\n    });\n    animation[time].bots.map((from, i) =>\n        animation[time].bots.map((to, j) => {\n            if (i >= j) return;\n            scene.remove(edgeMeshes[i][j]);\n            const strength = World.edgeStrength(Vec3.length(Vec3.sub(to.pos, from.pos)));\n            if (strength < 0.01) return;\n            scene.add(edgeMeshes[i][j]);\n            updateCylinder(from.pos, to.pos, Math.sqrt(strength) * 0.3)(edgeMeshes[i][j]);\n        })\n    );\n};\n\nconst saveImage = () => {\n    const canvas = document.getElementsByTagName(\"canvas\")[0];\n    const image = canvas.toDataURL(\"image/png\");\n    const a = document.createElement(\"a\");\n    a.href = image.replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n    a.download = \"image.png\";\n    a.click();\n};\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n    const [time, setTime] = useState(0);\n    const [animating, setAnimating] = useState(false);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && camera) renderer.render(scene, camera);\n    }, [controls, renderer, camera, frame]);\n\n    useEffect(() => {\n        const pauseFrac = 0.1;\n        const pauseFrames = Math.round(pauseFrac * animation.length);\n        let t = time % (2 * (animation.length + pauseFrames));\n        if (t < pauseFrames) {\n            updateWorld(0);\n            return;\n        }\n        t -= pauseFrames;\n        if (t < animation.length) {\n            updateWorld(t);\n            return;\n        }\n        t -= animation.length;\n        if (t < pauseFrames) {\n            updateWorld(animation.length - 1);\n            return;\n        }\n        t -= pauseFrames;\n        updateWorld(animation.length - 1 - t);\n    }, [time]);\n\n    useEffect(() => {\n        if (!animating) return;\n        const t = setInterval(() => setTime(time => time + 1), 10);\n        return () => clearInterval(t);\n    }, [animating]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Microbots</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <button onClick={() => setTime(time + 1)}>Time: {time}</button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <button onClick={() => setAnimating(!animating)}>\n                                            Animating: {animating ? \"true\" : \"false\"}\n                                        </button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <button onClick={() => saveImage()}>Save screenshot</button>\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}