{"version":3,"sources":["core/Animation.ts","core/Vec3.ts","core/Mat3.ts","core/utils.ts","core/Bot.ts","core/conjugateGradientSparse.ts","core/delaunay.ts","core/World.ts","examples/arc.ts","Gui/Dynamic.tsx","assets/grass.jpg","assets/skyboxes/nx.png","assets/skyboxes/ny.png","assets/skyboxes/nz.png","assets/skyboxes/px.png","assets/skyboxes/py.png","assets/skyboxes/pz.png","Gui/draw.ts","Gui/Canvas.tsx","Gui/Scene.tsx","examples/utils/index.ts","examples/bigArc.ts","examples/bigCube.ts","examples/crane.ts","examples/cube.ts","examples/floorTransport.ts","examples/frameTransport.ts","examples/stack.ts","examples/towers.ts","examples/transformer.ts","examples/transport.ts","examples/index.ts","examples/verticalTransport.ts","Gui/SelectExample.tsx","Gui/Static.tsx","Gui/index.tsx","index.tsx"],"names":["ContractionType","newVec3","x","y","z","clone","a","add","b","addEq","sub","subEq","multiplyScalar","s","dot","length","Math","sqrt","dist","normalize","dir","i","j","apply","result","outerProduct","Vec3","interpolate","bot","t","dt","p1","p2","p4","p5","v1","v2","v4","v5","t3","epsilon","t12","time","t13","t23","t24","t34","t35","t1213","t1323","t2324","t2434","t3435","t3545","c","w1","w2","w4","w5","q1","pos","q2","q4","q5","minAcc","addVecMultNum","matMultVec","A","v","conditionVector","sum","floor","ldiv","bCopy","Array","fill","preconditioner","conditionMatrix","r","Ap","p","pOld","rsold","alpha","rsnew","cg","orient","m","Simplex","vertices","adjacent","boundary","lastVisited","this","u","GlueFacet","cell","index","Triangulation","simplices","interior","tuple","filter","point","n","verts","toVisit","pop","undefined","cellAdj","neighbor","nv","vv","o","push","initIndex","cellVerts","prev","tovisit","indexOf","glueFacets","indexOfN","indexOfNeg1","na","vverts","slice","vadj","ncell","opposite","flip","uu","nface","nptr","k","sort","l1","m1","d","l0","min","m0","compareCells","ai","bi","walk","handleBoundaryDegeneracy","addPeaks","cells","nc","bcell","cv","ptr","parity","LiftedPoint","triangulate","points","lifted","upper","l","max","dpoints","dindex","h","hull","Error","initialSimplex","initialCoords","initialCell","list","adj","triangles","insert","incrementalConvexHull","edgeStrength","offset","slack","stiffness","stiffnessGround","Mat3","edgeStrengthGround","stiffnessDerivative","dim","val","dPlus","dMinus","plus","stiffnessMatrix","friction","world","neigh","bots","map","sx","sy","sz","forEach","stiffnessPair","displacement","before","after","g","f","acc","forceMatrix","gradient","overlapPenalty","uBefore","uAfter","beforeBefore","afterAfter","udku","vi","stiffnessPairDerivative","vj","svisvj","diff","dest","Bot","rng","Prando","connections","tri","con","Object","keys","key","Number","delaunay","next","averageWeight","start","end","w","avgWeight","optimize","neighborRadius","animation","iterations","vel","World","neighbors","_","iter","grad","displacements","contract","type","some","hD","hDistSqr","vDist","validConnections","Delaunay","Mst","checked","check","shift","isValidConnection","dLength","createAnimation","gravity","botMass","subdivideIterations","optimizeIterations","resolveOverlapIterations","contractionType","contractIterations","minimizeAccelerationIterations","tooFast","now","maxAcc","resultPrev","tf","console","log","minimizeAcceleration","resolveOverlap","Dynamic","props","useState","pause","setPause","path","setPath","step","worldPrev","worldEnd","reduce","value","Animation","setWorldPrev","setWorld","useEffect","setInterval","clearInterval","List","ListItem","Button","variant","onClick","update","$set","newScene","scene","Scene","geo","PlaneBufferGeometry","textureGrass","TextureLoader","load","grass","wrapS","RepeatWrapping","wrapT","repeat","set","mat","MeshPhongMaterial","plane","Mesh","rotateX","PI","castShadow","receiveShadow","AmbientLight","light","DirectionalLight","position","shadowCameraRight","shadowCameraLeft","shadowCameraTop","shadowCameraBottom","shadowMapWidth","shadowMapHeight","materialArray","px","nx","py","ny","pz","nz","MeshBasicMaterial","fog","side","BackSide","skyboxGeo","BoxGeometry","skybox","Canvas","useWindowSize","windowWidth","windowHeight","width","height","mount","useRef","controls","setControls","camera","setCamera","renderer","setRenderer","mc","current","cam","PerspectiveCamera","lookAt","ren","WebGLRenderer","antialias","setClearColor","setSize","shadowMapEnabled","shadowMapType","PCFSoftShadowMap","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","removeChild","window","render","ref","setScene","botMeshes","setBotMeshes","color","geom","SphereGeometry","computeVertexNormals","faces","face","vertexColors","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","geometry","scale","newSphere","Color","scn","coordsToWorld","coords","arc","angle","cos","sin","title","flat","e","abs","frame","pillar","space","examples","bigArc","bigCube","crane","cube","floorTransport","frameTransport","stack","towers","transformer","SelectExample","selectedExample","setSelectedExample","example","ws","we","rand","onSelect","Static","setTime","setAnimation","pauseFrames","round","worldStart","Date","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","App","classes","setWorldStart","setWorldEnd","dynamic","setDynamic","Fibers","options","setOptions","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","direction","fontSize","className","FormControlLabel","control","Switch","onChange","target","label","entries","Select","isNaN","MenuItem","TextField","parseFloat","image","document","getElementsByTagName","toDataURL","createElement","href","replace","download","click","saveImage","ReactDOM","StrictMode","Gui","getElementById"],"mappings":"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","file":"static/js/main.93655cb3.chunk.js","sourcesContent":["import * as Bot from \"./Bot\";\nimport * as Vec3 from \"./Vec3\";\nimport * as World from \"./World\";\n\nconst avgWeight = (a: Bot.Bot, b: Bot.Bot, w: number): Bot.Bot => {\n    const pos = Vec3.add(Vec3.multiplyScalar(a.pos, 1 - w), Vec3.multiplyScalar(b.pos, w));\n    return { ...a, pos };\n};\n\nconst averageWeight = (start: World.World, end: World.World, w: number): World.World => {\n    const result = World.newWorld();\n    result.bots = start.bots.map((b, i) => avgWeight(b, end.bots[i], w));\n    return result;\n};\n\nconst average = (start: World.World, end: World.World): World.World => averageWeight(start, end, 0.5);\n\nconst gradient = (\n    offset: number,\n    slack: number,\n    friction: number,\n    overlapPenalty: number,\n    animation: World.World[],\n    dt: number,\n    g: number,\n    m: number,\n    connections: number[][][],\n    neighbors: number[][][]\n): Vec3.Vec3[][] => {\n    const result = [...Array(animation.length)].map(() =>\n        [...Array(animation[0].bots.length)].map(() => Vec3.newVec3(0, 0, 0))\n    );\n    const displacements = animation.map(() => [...Array(3 * animation[0].bots.length)].map(() => 0));\n    for (let i = 0; i < animation.length; ++i) {\n        const before = animation[Math.max(i - 1, 0)];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        displacements[i] = World.displacement(\n            offset,\n            slack,\n            friction,\n            before,\n            after,\n            dt,\n            g,\n            m,\n            animation[i],\n            neighbors[i]\n        );\n    }\n    for (let i = 1; i < animation.length; ++i) {\n        const beforeBefore = animation[Math.max(i - 2, 0)];\n        const before = animation[i - 1];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        const afterAfter = animation[Math.min(i + 2, animation.length - 1)];\n        result[i] = World.gradient(\n            offset,\n            slack,\n            friction,\n            overlapPenalty,\n            displacements[i - 1],\n            displacements[i],\n            displacements[Math.min(i + 1, animation.length - 1)],\n            beforeBefore,\n            before,\n            after,\n            afterAfter,\n            dt,\n            animation[i],\n            neighbors[i],\n            i / (animation.length - 1)\n        );\n    }\n    return result;\n};\n\nconst optimize = (\n    offset: number,\n    slack: number,\n    friction: number,\n    overlapPenalty: number,\n    neighborRadius: number,\n    animation: World.World[],\n    dt: number,\n    g: number,\n    m: number,\n    iterations: number\n): void => {\n    const acc = 0.2 / animation.length;\n    const vel = animation.map(world => world.bots.map(() => Vec3.newVec3(0, 0, 0)));\n    const connections = animation.map(world => World.connections(world));\n    const neighbors = animation.map((world, i) =>\n        world.bots.map((_, j) => World.neighbors(neighborRadius, world, connections[i], j))\n    );\n    for (let iter = 0; iter < iterations; ++iter) {\n        let grad = gradient(offset, slack, friction, overlapPenalty, animation, dt, g, m, connections, neighbors);\n        grad = grad.map(world => world.map(v => Vec3.multiplyScalar(v, -acc / (1e-4 + Vec3.length(v)))));\n        animation.forEach((world, i) => {\n            if (i <= 1 || i >= animation.length - 2) return;\n            world.bots.forEach((bot, j) => {\n                vel[i][j] = Vec3.add(vel[i][j], grad[i][j]);\n                vel[i][j] = Vec3.multiplyScalar(vel[i][j], 0.9);\n                bot.pos = Vec3.add(bot.pos, vel[i][j]);\n            });\n        });\n    }\n};\n\nconst dist = (a: Bot.Bot, b: Bot.Bot): number => Vec3.length(Vec3.sub(b.pos, a.pos));\n\nexport enum ContractionType {\n    Mst,\n    Fibers,\n    Delaunay\n}\n\nconst isValidConnection = (\n    world: World.World,\n    connections: number[][],\n    i: number,\n    j: number,\n    type: ContractionType\n): boolean => {\n    if (type === ContractionType.Delaunay) return true;\n    if (type === ContractionType.Mst) {\n        const d = Vec3.dist(world.bots[i].pos, world.bots[j].pos);\n        const checked = [...Array(world.bots.length)].map(() => false);\n        const check: number[] = [];\n        for (let k = 0; k < world.bots.length; ++k) {\n            if (world.bots[k].pos[1] + 0.5 < d) check.push(k);\n        }\n        while (check.length > 0) {\n            const k = check.shift();\n            if (k === undefined) break;\n            if (checked[k]) continue;\n            checked[k] = true;\n            for (let c = 0; c < connections[k].length; ++c) {\n                const l = connections[k][c];\n                if (Vec3.dist(world.bots[k].pos, world.bots[l].pos) < d) check.push(l);\n            }\n        }\n        return !(checked[i] && checked[j]);\n    }\n    for (let k = 0; k < world.bots.length; ++k) {\n        if (k === i) continue;\n        if (k === j) continue;\n        if (\n            dist(world.bots[i], world.bots[j]) > world.bots[i].pos[1] + 0.5 &&\n            dist(world.bots[i], world.bots[j]) > world.bots[j].pos[1] + 0.5\n        )\n            return false;\n        if (\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[i], world.bots[k]) &&\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[k], world.bots[j])\n        )\n            return false;\n        if (\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[j], world.bots[k]) &&\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[i], world.bots[k])\n        )\n            return false;\n    }\n    return true;\n};\n\nconst resolveOverlap = (world: World.World, iterations: number): void => {\n    const connections = World.connections(world);\n    for (let iter = 0; iter < iterations; ++iter) {\n        world.bots.forEach(bot => {\n            bot.pos[1] = Math.max(bot.pos[1], 0.5);\n        });\n        connections.forEach((list, i) => {\n            list.forEach(j => {\n                if (i >= j) return;\n                const d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n                const dLength = Vec3.length(d);\n                if (dLength > 1) return;\n                const n = Vec3.multiplyScalar(d, (1 - dLength) / dLength / 2);\n                Vec3.subEq(world.bots[i].pos, n);\n                Vec3.addEq(world.bots[j].pos, n);\n            });\n        });\n    }\n};\n\nconst contract = (world: World.World, iterations: number, type: ContractionType): void => {\n    const frac = 0.2;\n    for (let iter = 0; iter < iterations; ++iter) {\n        world.bots.forEach((a, i) => {\n            if (\n                world.bots.some((b, j) => {\n                    if (i === j) return false;\n                    const d = Vec3.sub(a.pos, b.pos);\n                    const hD = Vec3.newVec3(d[0], 0, d[2]);\n                    const hDistSqr = Vec3.dot(hD, hD);\n                    const vDist = d[1];\n                    if (a.pos[1] + 0.5 > b.pos[1] + 0.5 && 10 * vDist > hDistSqr) return true;\n                    return false;\n                })\n            )\n                return;\n            a.pos[1] += frac * (0.5 - a.pos[1]);\n        });\n        const connections = World.connections(world);\n        const validConnections: [number, number][] = [];\n        connections.forEach((list, i) => {\n            list.forEach(j => {\n                if (i >= j) return;\n                if (!isValidConnection(world, connections, i, j, type)) return;\n                validConnections.push([i, j]);\n            });\n        });\n        validConnections.forEach(([i, j]) => {\n            const d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const dLength = Vec3.length(d);\n            if (dLength < 1) return;\n            const n = Vec3.multiplyScalar(d, frac * ((1 - dLength) / dLength / 2));\n            Vec3.subEq(world.bots[i].pos, n);\n            Vec3.addEq(world.bots[j].pos, n);\n        });\n    }\n};\n\nconst minimizeAcceleration = (animation: World.World[], dt: number, iterations: number): void => {\n    const frac = 0.5;\n    for (let iter = 0; iter < iterations; ++iter) {\n        for (let i = 2; i < animation.length - 2; ++i) {\n            animation[i].bots.forEach((bot, j) => {\n                const p = Bot.interpolate(\n                    bot,\n                    (i - 1) / (animation.length - 3),\n                    dt,\n                    animation[i - 2].bots[j].pos,\n                    animation[i - 1].bots[j].pos,\n                    animation[i + 1].bots[j].pos,\n                    animation[i + 2].bots[j].pos\n                );\n                bot.pos = Vec3.add(Vec3.multiplyScalar(bot.pos, frac), Vec3.multiplyScalar(p, 1 - frac));\n            });\n        }\n    }\n};\n\nconst maxAcc = (prev: World.World, now: World.World, next: World.World, dt: number): number => {\n    let result = 0;\n    for (let i = 0; i < now.bots.length; ++i) {\n        const v1 = Vec3.multiplyScalar(Vec3.sub(now.bots[i].pos, prev.bots[i].pos), 1 / dt);\n        const v2 = Vec3.multiplyScalar(Vec3.sub(next.bots[i].pos, now.bots[i].pos), 1 / dt);\n        const a = Vec3.multiplyScalar(Vec3.sub(v2, v1), 1 / dt);\n        result = Math.max(result, Vec3.length(a));\n    }\n    return result;\n};\n\nexport const createAnimation = (\n    offset: number,\n    slack: number,\n    friction: number,\n    overlapPenalty: number,\n    neighborRadius: number,\n    gravity: number,\n    botMass: number,\n    dt: number,\n    beforeBefore: World.World,\n    before: World.World,\n    after: World.World,\n    afterAfter: World.World,\n    subdivideIterations: number,\n    optimizeIterations: number,\n    resolveOverlapIterations: number,\n    contractionType: ContractionType,\n    contractIterations: number,\n    minimizeAccelerationIterations: number\n): World.World[] => {\n    let result = [beforeBefore, before, after, afterAfter];\n    const maxAccLimit = 0.2;\n    for (let iter = 0; iter < subdivideIterations; ++iter) {\n        const tooFast = result.map((world, i) => {\n            if (i <= 1 || i >= result.length - 1) return false;\n            return maxAcc(result[i - 1], world, result[i + 1], dt) > maxAccLimit;\n        });\n        if (!tooFast.some(x => x)) break;\n        const resultPrev = [...result];\n        result = [result[0]];\n        tooFast.forEach((tf, i) => {\n            if (i === 0) return;\n            if (tf) result.push(average(result[result.length - 1], resultPrev[i]));\n            result.push(resultPrev[i]);\n        });\n        console.log(iter, result.length);\n        for (let i = 2; i < result.length - 2; ++i) contract(result[i], contractIterations, contractionType);\n        optimize(\n            offset,\n            slack,\n            friction,\n            overlapPenalty,\n            neighborRadius,\n            result,\n            dt,\n            gravity,\n            botMass,\n            optimizeIterations\n        );\n        minimizeAcceleration(result, dt, minimizeAccelerationIterations);\n        result.map(world => resolveOverlap(world, resolveOverlapIterations));\n    }\n    console.log(\"done\");\n    return result.slice(1, result.length - 1);\n};\n","export type Vec3 = [number, number, number];\n\nexport const newVec3 = (x: number, y: number, z: number): Vec3 => [x, y, z];\n\nexport const clone = (a: Vec3): Vec3 => [a[0], a[1], a[2]];\n\nexport const add = (a: Vec3, b: Vec3): Vec3 => [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n\nexport const addEq = (a: Vec3, b: Vec3): void => {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n};\n\nexport const sub = (a: Vec3, b: Vec3): Vec3 => [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n\nexport const subEq = (a: Vec3, b: Vec3): void => {\n    a[0] -= b[0];\n    a[1] -= b[1];\n    a[2] -= b[2];\n};\n\nexport const multiplyScalar = (a: Vec3, s: number): Vec3 => [a[0] * s, a[1] * s, a[2] * s];\n\nexport const dot = (a: Vec3, b: Vec3): number => a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\nexport const length = (a: Vec3): number => Math.sqrt(dot(a, a));\n\nexport const dist = (a: Vec3, b: Vec3): number => length(sub(a, b));\n\nexport const normalize = (a: Vec3): Vec3 => multiplyScalar(a, 1 / length(a));\n\nexport const dir = (a: Vec3, b: Vec3): Vec3 => normalize(sub(a, b));\n","import * as Vec3 from \"./Vec3\";\n\nexport type Mat3 = [Vec3.Vec3, Vec3.Vec3, Vec3.Vec3];\n\nexport const newMat3 = (x: Vec3.Vec3, y: Vec3.Vec3, z: Vec3.Vec3): Mat3 => [x, y, z];\n\nexport const add = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] += b[i][j];\n        }\n    }\n};\n\nexport const sub = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] -= b[i][j];\n        }\n    }\n};\n\nexport const multiplyScalar = (a: Mat3, s: number): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] *= s;\n        }\n    }\n};\n\nexport const apply = (a: Mat3, b: Vec3.Vec3): Vec3.Vec3 => {\n    const result: Vec3.Vec3 = [0, 0, 0];\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            result[i] += a[i][j] * b[j];\n        }\n    }\n    return result;\n};\n","import * as Mat3 from \"./Mat3\";\nimport * as Vec3 from \"./Vec3\";\n\ntype Spacetime = {\n    pos: Vec3.Vec3;\n    time: number;\n};\n\nexport const outerProduct = (a: Vec3.Vec3, b: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.newMat3(\n        Vec3.newVec3(a[0] * b[0], a[0] * b[1], a[0] * b[2]),\n        Vec3.newVec3(a[1] * b[0], a[1] * b[1], a[1] * b[2]),\n        Vec3.newVec3(a[2] * b[0], a[2] * b[1], a[2] * b[2])\n    );\n\nexport const minAcc = (v1: Spacetime, v2: Spacetime, v4: Spacetime, v5: Spacetime, t3: number): Vec3.Vec3 => {\n    const epsilon = 1e-10;\n    const t12 = v2.time - v1.time;\n    const t13 = t3 - v1.time;\n    const t23 = t3 - v2.time;\n    const t24 = v4.time - v2.time;\n    const t34 = v4.time - t3;\n    const t35 = v5.time - t3;\n    const t45 = v5.time - v4.time;\n    const t1213 = t12 * t13 + epsilon;\n    const t1323 = t13 * t23 + epsilon;\n    const t2324 = t23 * t24 + epsilon;\n    const t2434 = t24 * t34 + epsilon;\n    const t3435 = t34 * t35 + epsilon;\n    const t3545 = t35 * t45 + epsilon;\n    const c = 1 / (t2434 * t2324);\n    const a = c + 1 / t1323 ** 2 + 1 / t2324 ** 2;\n    const b = c + 1 / t2434 ** 2 + 1 / t3435 ** 2;\n    const w1 = -1 / (t1213 * t1323 * (a + b));\n    const w2 = (a + 1 / (t1213 * t1323)) / (a + b);\n    const w4 = (b + 1 / (t3435 * t3545)) / (a + b);\n    const w5 = -1 / (t3435 * t3545 * (a + b));\n    const q1 = Vec3.multiplyScalar(v1.pos, w1);\n    const q2 = Vec3.multiplyScalar(v2.pos, w2);\n    const q4 = Vec3.multiplyScalar(v4.pos, w4);\n    const q5 = Vec3.multiplyScalar(v5.pos, w5);\n    const p3 = Vec3.add(Vec3.add(Vec3.add(q1, q2), q4), q5);\n    return p3;\n};\n","import * as Vec3 from \"./Vec3\";\n\nimport { minAcc } from \"./utils\";\n\nexport type Bot = {\n    pos: Vec3.Vec3;\n};\n\nexport const interpolate = (\n    bot: Bot,\n    t: number,\n    dt: number,\n    p1: Vec3.Vec3,\n    p2: Vec3.Vec3,\n    p4: Vec3.Vec3,\n    p5: Vec3.Vec3\n): Vec3.Vec3 =>\n    minAcc(\n        { pos: p1, time: t - 2 * dt },\n        { pos: p2, time: t - dt },\n        { pos: p4, time: t + dt },\n        { pos: p5, time: t + 2 * dt },\n        t\n    );\n","export type SparseSymmetric = [number, number][][];\n\nconst clone = (a: number[], result: number[]): void => {\n    for (let i = 0; i < a.length; ++i) result[i] = a[i];\n};\n\nconst dot = (a: number[], b: number[]): number => {\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) {\n        result += a[i] * b[i];\n    }\n    return result;\n};\n\nconst addVecMultNum = (a: number[], b: number[], c: number): void => {\n    for (let i = 0; i < a.length; ++i) a[i] += b[i] * c;\n};\n\nconst matMultVec = (A: SparseSymmetric, b: number[], result: number[]): void => {\n    for (let i = 0; i < result.length; ++i) result[i] = 0;\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            const v = A[i][c][1];\n            result[i] += v * b[j];\n            if (i === j) continue;\n            result[j] += v * b[i];\n        }\n    }\n};\n\nconst cg = (A: SparseSymmetric, b: number[]): number[] => {\n    const x = Array(b.length).fill(0);\n    const r = Array(b.length);\n    clone(b, r);\n    const Ap = Array(b.length);\n    matMultVec(A, x, Ap);\n    addVecMultNum(r, Ap, -1);\n    const p = Array(r.length);\n    const pOld = Array(p.length);\n    clone(r, p);\n    let rsold = dot(r, r);\n    for (let i = 0; i < 20; ++i) {\n        matMultVec(A, p, Ap);\n        const alpha = rsold / dot(p, Ap);\n        addVecMultNum(x, p, alpha);\n        addVecMultNum(r, Ap, -alpha);\n        const rsnew = dot(r, r);\n        clone(p, pOld);\n        clone(r, p);\n        addVecMultNum(p, pOld, rsnew / rsold);\n        rsold = rsnew;\n    }\n    return x;\n};\n\nconst preconditioner = (A: SparseSymmetric, b: number[]): number[] => {\n    const sum = Array(b.length / 3).fill(0);\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const [j, v] = A[i][c];\n            if (Math.floor(i / 3) !== Math.floor(j / 3)) continue;\n            sum[Math.floor(i / 3)] += v;\n            if (i === j) continue;\n            sum[Math.floor(j / 3)] += v;\n        }\n    }\n    for (let i = 0; i < sum.length; ++i) sum[i] = Math.sqrt(Math.sqrt(3 / sum[i]));\n    return sum;\n};\n\nconst conditionMatrix = (sum: number[], A: SparseSymmetric): void => {\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            A[i][c][1] *= sum[Math.floor(i / 3)];\n            A[i][c][1] *= sum[Math.floor(j / 3)];\n        }\n    }\n};\n\nconst conditionVector = (sum: number[], b: number[]): void => {\n    for (let i = 0; i < b.length; ++i) {\n        b[i] *= sum[Math.floor(i / 3)];\n    }\n};\n\nexport const ldiv = (A: SparseSymmetric, b: number[]): number[] => {\n    const bCopy = Array(b.length);\n    clone(b, bCopy);\n    const sum = preconditioner(A, bCopy);\n    conditionMatrix(sum, A);\n    conditionVector(sum, bCopy);\n    const x = cg(A, bCopy);\n    conditionVector(sum, x);\n    return x;\n};\n","const orient = (m: number[][]) =>\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[2][2] +\n        (m[2][1] * m[4][0] - m[4][1] * m[2][0]) * -m[3][2] +\n        (m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[4][2]) *\n        m[1][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[3][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[4][2]) *\n        -m[2][3] +\n    ((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[2][2] +\n        (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[4][2]) *\n        m[3][3] +\n    ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[1][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * -m[2][2] +\n        (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[3][2]) *\n        -m[4][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[3][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[4][2]) *\n        m[0][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[0][2] +\n        (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[3][2] +\n        (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * m[4][2]) *\n        -m[1][3] +\n    (((m[1][1] * m[4][0] - m[4][1] * m[1][0]) * m[0][2] +\n        (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[1][2] +\n        (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[4][2]) *\n        m[3][3] +\n        ((m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[3][2]) *\n            -m[4][3] +\n        ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[1][2] +\n            (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * -m[2][2] +\n            (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[3][2]) *\n            m[0][3] +\n        ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[2][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[3][2]) *\n            -m[1][3] +\n        ((m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[3][2]) *\n            m[2][3] +\n        ((m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[2][2]) *\n            -m[3][3]) -\n    (((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[2][2] +\n        (m[2][1] * m[4][0] - m[4][1] * m[2][0]) * -m[3][2] +\n        (m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[4][2]) *\n        m[0][3] +\n        ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[0][2] +\n            (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[3][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * m[4][2]) *\n            -m[2][3] +\n        (((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[0][2] +\n            (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[2][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[4][2]) *\n            m[3][3] +\n            ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[0][2] +\n                (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[2][2] +\n                (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[3][2]) *\n                -m[4][3]) +\n        (((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[1][2] +\n            (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[2][2] +\n            (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[4][2]) *\n            m[0][3] +\n            ((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[0][2] +\n                (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[2][2] +\n                (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[4][2]) *\n                -m[1][3] +\n            (((m[1][1] * m[4][0] - m[4][1] * m[1][0]) * m[0][2] +\n                (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[1][2] +\n                (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[4][2]) *\n                m[2][3] +\n                ((m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[0][2] +\n                    (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * -m[1][2] +\n                    (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[2][2]) *\n                    -m[4][3])));\n\n//Ranks a pair of cells up to permutation\nconst compareCells = (a: number[], b: number[]) => {\n    const l1 = a[0] + a[1];\n    const m1 = b[0] + b[1];\n    let d = l1 + a[2] - (m1 + b[2]);\n    if (d) return d;\n    const l0 = Math.min(a[0], a[1]);\n    const m0 = Math.min(b[0], b[1]);\n    d = Math.min(l0, a[2]) - Math.min(m0, b[2]);\n    if (d) return d;\n    return Math.min(l0 + a[2], l1) - Math.min(m0 + b[2], m1);\n};\n\nclass Simplex {\n    vertices: number[];\n    adjacent: Simplex[];\n    boundary: boolean;\n    lastVisited: number;\n    constructor(vertices: number[], adjacent: Simplex[], boundary: boolean) {\n        this.vertices = vertices;\n        this.adjacent = adjacent;\n        this.boundary = boundary;\n        this.lastVisited = -1;\n    }\n    flip() {\n        const t = this.vertices[0];\n        this.vertices[0] = this.vertices[1];\n        this.vertices[1] = t;\n        const u = this.adjacent[0];\n        this.adjacent[0] = this.adjacent[1];\n        this.adjacent[1] = u;\n    }\n}\n\nclass GlueFacet {\n    vertices: number[];\n    cell: Simplex;\n    index: number;\n    constructor(vertices: number[], cell: Simplex, index: number) {\n        this.vertices = vertices;\n        this.cell = cell;\n        this.index = index;\n    }\n}\n\nclass Triangulation {\n    vertices: number[][];\n    simplices: Simplex[];\n    interior: Simplex[];\n    tuple: number[][];\n    orient: () => number;\n    constructor(vertices: number[][], simplices: Simplex[]) {\n        this.vertices = vertices;\n        this.simplices = simplices;\n        this.interior = simplices.filter(c => !c.boundary);\n        this.tuple = [...this.vertices];\n        this.orient = () => orient(this.tuple);\n    }\n    handleBoundaryDegeneracy(cell: Simplex, point: number[]) {\n        const d = 4;\n        const n = this.vertices.length - 1;\n        const tuple = this.tuple;\n        const verts = this.vertices;\n        const toVisit = [cell];\n        cell.lastVisited = -n;\n        while (toVisit.length > 0) {\n            const c = toVisit.pop();\n            if (c === undefined) break;\n            const cellAdj = c.adjacent;\n            for (let i = 0; i <= d; ++i) {\n                const neighbor = cellAdj[i];\n                if (!neighbor.boundary || neighbor.lastVisited <= -n) continue;\n                const nv = neighbor.vertices;\n                for (let j = 0; j <= d; ++j) {\n                    const vv = nv[j];\n                    if (vv < 0) tuple[j] = point;\n                    else tuple[j] = verts[vv];\n                }\n                const o = this.orient();\n                if (o > 0) return neighbor;\n                neighbor.lastVisited = -n;\n                if (o === 0) toVisit.push(neighbor);\n            }\n        }\n        return null;\n    }\n    walk(point: number[]) {\n        //Alias local properties\n        const n = this.vertices.length - 1;\n        const verts = this.vertices;\n        const tuple = this.tuple;\n\n        //Compute initial jump cell\n        const initIndex = this.interior.length - 1;\n        let cell = this.interior[initIndex];\n\n        //Start walking\n        while (!cell.boundary) {\n            const cellVerts = cell.vertices;\n            const cellAdj = cell.adjacent;\n\n            for (let i = 0; i <= 4; ++i) {\n                tuple[i] = verts[cellVerts[i]];\n            }\n            cell.lastVisited = n;\n\n            //Find farthest adjacent cell\n            for (let i = 0; i <= 4; ++i) {\n                const neighbor = cellAdj[i];\n                if (neighbor.lastVisited >= n) continue;\n                const prev = tuple[i];\n                tuple[i] = point;\n                const o = this.orient();\n                tuple[i] = prev;\n                if (o < 0) {\n                    cell = neighbor;\n                    break;\n                }\n                if (neighbor.boundary) neighbor.lastVisited = -n;\n                else neighbor.lastVisited = n;\n            }\n        }\n\n        return cell;\n    }\n    addPeaks(point: number[], cell: Simplex) {\n        const n = this.vertices.length - 1;\n        const verts = this.vertices;\n        const tuple = this.tuple;\n        const interior = this.interior;\n        const simplices = this.simplices;\n\n        //Walking finished at boundary, time to add peaks\n        const tovisit = [cell];\n\n        //Stretch initial boundary cell into a peak\n        cell.lastVisited = n;\n        cell.vertices[cell.vertices.indexOf(-1)] = n;\n        cell.boundary = false;\n        interior.push(cell);\n\n        //Record a list of all new boundaries created by added peaks so we can glue them together when we are all done\n        const glueFacets = [];\n\n        //Do a traversal of the boundary walking outward from starting peak\n        while (tovisit.length > 0) {\n            const c = tovisit.pop();\n            if (c === undefined) break;\n            //Pop off peak and walk over adjacent cells\n            const cellVerts = c.vertices;\n            const cellAdj = c.adjacent;\n            const indexOfN = cellVerts.indexOf(n);\n            if (indexOfN < 0) continue;\n\n            for (let i = 0; i <= 4; ++i) {\n                if (i === indexOfN) continue;\n\n                //For each boundary neighbor of the cell\n                const neighbor = cellAdj[i];\n                if (!neighbor.boundary || neighbor.lastVisited >= n) continue;\n\n                const nv = neighbor.vertices;\n\n                //Test if neighbor is a peak\n                if (neighbor.lastVisited !== -n) {\n                    //Compute orientation of p relative to each boundary peak\n                    let indexOfNeg1 = 0;\n                    for (let j = 0; j <= 4; ++j) {\n                        if (nv[j] < 0) {\n                            indexOfNeg1 = j;\n                            tuple[j] = point;\n                        } else tuple[j] = verts[nv[j]];\n                    }\n                    const o = this.orient();\n\n                    //Test if neighbor cell is also a peak\n                    if (o > 0) {\n                        nv[indexOfNeg1] = n;\n                        neighbor.boundary = false;\n                        interior.push(neighbor);\n                        tovisit.push(neighbor);\n                        neighbor.lastVisited = n;\n                        continue;\n                    }\n                    neighbor.lastVisited = -n;\n                }\n\n                const na = neighbor.adjacent;\n\n                //Otherwise, replace neighbor with new face\n                const vverts = cellVerts.slice();\n                const vadj = cellAdj.slice();\n                const ncell = new Simplex(vverts, vadj, true);\n                simplices.push(ncell);\n\n                //Connect to neighbor\n                const opposite = na.indexOf(c);\n                if (opposite < 0) continue;\n\n                na[opposite] = ncell;\n                vadj[indexOfN] = neighbor;\n\n                //Connect to cell\n                vverts[i] = -1;\n                vadj[i] = c;\n                cellAdj[i] = ncell;\n\n                //Flip facet\n                ncell.flip();\n\n                //Add to glue list\n                for (let j = 0; j <= 4; ++j) {\n                    const uu = vverts[j];\n                    if (uu < 0 || uu === n) continue;\n                    const nface = new Array(3);\n                    let nptr = 0;\n                    for (let k = 0; k <= 4; ++k) {\n                        const vv = vverts[k];\n                        if (vv < 0 || k === j) continue;\n                        nface[nptr++] = vv;\n                    }\n                    glueFacets.push(new GlueFacet(nface, ncell, j));\n                }\n            }\n        }\n\n        //Glue boundary facets together\n        glueFacets.sort((a, b) => compareCells(a.vertices, b.vertices));\n\n        for (let i = 0; i + 1 < glueFacets.length; i += 2) {\n            const a = glueFacets[i];\n            const b = glueFacets[i + 1];\n            const ai = a.index;\n            const bi = b.index;\n            if (ai < 0 || bi < 0) continue;\n            a.cell.adjacent[a.index] = b.cell;\n            b.cell.adjacent[b.index] = a.cell;\n        }\n    }\n    insert(point: number[]) {\n        //Add point\n        const verts = this.vertices;\n        verts.push(point);\n\n        let cell = this.walk(point);\n        if (!cell) return;\n\n        //Alias local properties\n        const tuple = this.tuple;\n\n        //Degenerate case: If point is coplanar to cell, then walk until we find a non-degenerate boundary\n        for (let i = 0; i <= 4; ++i) {\n            const vv = cell.vertices[i];\n            if (vv < 0) tuple[i] = point;\n            else tuple[i] = verts[vv];\n        }\n        const o = this.orient();\n        if (o < 0) return;\n        if (o === 0) {\n            const c = this.handleBoundaryDegeneracy(cell, point);\n            if (!c) return;\n            cell = c;\n        }\n\n        //Add peaks\n        this.addPeaks(point, cell);\n    }\n    boundary() {\n        const d = 4;\n        const boundary = [];\n        const cells = this.simplices;\n        const nc = cells.length;\n        for (let i = 0; i < nc; ++i) {\n            const c = cells[i];\n            if (c.boundary) {\n                const bcell = new Array(d);\n                const cv = c.vertices;\n                let ptr = 0;\n                let parity = 0;\n                for (let j = 0; j <= d; ++j) {\n                    if (cv[j] >= 0) {\n                        bcell[ptr++] = cv[j];\n                    } else {\n                        parity = j && 1;\n                    }\n                }\n                if (parity === (d && 1)) {\n                    const t = bcell[0];\n                    bcell[0] = bcell[1];\n                    bcell[1] = t;\n                }\n                boundary.push(bcell);\n            }\n        }\n        return boundary;\n    }\n}\n\nconst incrementalConvexHull = (points: number[][]) => {\n    const n = points.length;\n    if (n === 0) {\n        throw new Error(\"Must have at least d+1 points\");\n    }\n    const d = points[0].length;\n    if (n <= d) {\n        throw new Error(\"Must input at least d+1 points\");\n    }\n\n    const initialSimplex = points.slice(0, d + 1);\n\n    //Make sure initial simplex is positively oriented\n    const o = orient(initialSimplex);\n    if (o === 0) {\n        throw new Error(\"Input not in general position\");\n    }\n    const initialCoords = new Array(d + 1);\n    for (let i = 0; i <= d; ++i) {\n        initialCoords[i] = i;\n    }\n    if (o < 0) {\n        initialCoords[0] = 1;\n        initialCoords[1] = 0;\n    }\n\n    //Create initial topological index, glue pointers together (kind of messy)\n    const initialCell = new Simplex(initialCoords, new Array(d + 1), false);\n    const boundary = initialCell.adjacent;\n    const list = new Array(d + 2);\n    for (let i = 0; i <= d; ++i) {\n        const verts = initialCoords.slice();\n        for (let j = 0; j <= d; ++j) {\n            if (j === i) verts[j] = -1;\n        }\n        const t = verts[0];\n        verts[0] = verts[1];\n        verts[1] = t;\n        const cell = new Simplex(verts, new Array(d + 1), true);\n        boundary[i] = cell;\n        list[i] = cell;\n    }\n    list[d + 1] = initialCell;\n    for (let i = 0; i <= d; ++i) {\n        const verts = boundary[i].vertices;\n        const adj = boundary[i].adjacent;\n        for (let j = 0; j <= d; ++j) {\n            const v = verts[j];\n            if (v < 0) {\n                adj[j] = initialCell;\n                continue;\n            }\n            for (let k = 0; k <= d; ++k) {\n                if (boundary[k].vertices.indexOf(v) < 0) {\n                    adj[j] = boundary[k];\n                }\n            }\n        }\n    }\n\n    //Initialize triangles\n    const triangles = new Triangulation(initialSimplex, list);\n\n    //Insert remaining points\n    for (let i = d + 1; i < n; ++i) {\n        triangles.insert(points[i]);\n    }\n\n    //Extract boundary cells\n    return triangles.boundary();\n};\n\nclass LiftedPoint {\n    point: number[];\n    index: number;\n    constructor(p: number[], i: number) {\n        this.point = p;\n        this.index = i;\n    }\n}\n\nconst triangulate = (points: number[][]) => {\n    let n = points.length;\n    if (n === 0) return [];\n\n    //Lift points, sort\n    const lifted = new Array(n);\n    let upper = 1.0;\n    for (let i = 0; i < n; ++i) {\n        const p = points[i];\n        const x = new Array(3 + 1);\n        let l = 0.0;\n        for (let j = 0; j < 3; ++j) {\n            const v = p[j];\n            x[j] = v;\n            l += v * v;\n        }\n        x[3] = l;\n        lifted[i] = new LiftedPoint(x, i);\n        upper = Math.max(l, upper);\n    }\n    lifted.sort((a, b) => {\n        for (let i = 0; i < 5; ++i) {\n            const s = b.point[i] - a.point[i];\n            if (s) return s;\n        }\n        return 0;\n    });\n\n    //Double points\n    n = lifted.length;\n\n    //Create new list of points\n    const dpoints = new Array(n + 3 + 1);\n    const dindex = new Array(n + 3 + 1);\n\n    //Add steiner points at top\n    const u = (3 + 1) * (3 + 1) * upper;\n    const y = new Array(3 + 1);\n    for (let i = 0; i <= 3; ++i) {\n        y[i] = 0.0;\n    }\n    y[3] = u;\n\n    dpoints[0] = y.slice();\n    dindex[0] = -1;\n\n    for (let i = 0; i <= 3; ++i) {\n        const x = y.slice();\n        x[i] = 1;\n        dpoints[i + 1] = x;\n        dindex[i + 1] = -1;\n    }\n\n    //Copy rest of the points over\n    for (let i = 0; i < n; ++i) {\n        const h = lifted[i];\n        dpoints[i + 3 + 1] = h.point;\n        dindex[i + 3 + 1] = h.index;\n    }\n\n    //Construct convex hull\n    let hull = incrementalConvexHull(dpoints);\n    hull = hull.filter(cell => {\n        for (let i = 0; i <= 3; ++i) {\n            const v = dindex[cell[i]];\n            if (v < 0) {\n                return false;\n            }\n            cell[i] = v;\n        }\n        return true;\n    });\n\n    for (let i = 0; i < hull.length; ++i) {\n        const h = hull[i];\n        const x = h[0];\n        h[0] = h[1];\n        h[1] = x;\n    }\n\n    return hull;\n};\n\ntype Connection = {\n    [key: number]: boolean;\n};\n\nexport default (points: number[][]): number[][] => {\n    const tri = triangulate(points);\n    const connections: Connection[] = points.map(() => ({}));\n    tri.forEach(t => {\n        for (let i = 0; i < 4; ++i) {\n            for (let j = i + 1; j < 4; ++j) {\n                connections[t[i]][t[j]] = true;\n                connections[t[j]][t[i]] = true;\n            }\n        }\n    });\n    return connections.map(con => Object.keys(con).map(key => Number(key)));\n};\n","import * as Bot from \"./Bot\";\nimport * as Mat3 from \"./Mat3\";\nimport * as Vec3 from \"./Vec3\";\n\nimport { SparseSymmetric, ldiv } from \"./conjugateGradientSparse\";\n\nimport Prando from \"prando\";\nimport delaunay from \"./delaunay\";\nimport { outerProduct } from \"./utils\";\n\nexport type World = { bots: Bot.Bot[] };\n\nexport const newWorld = (): World => ({ bots: [] });\n\nconst edgeStrength = (offset: number, slack: number, d: number): number => {\n    if (d < offset - slack / 2) return 1;\n    if (d > offset + slack / 2) return 0;\n    return (2 * (d + slack - offset) * (offset + slack / 2 - d) ** 2) / slack ** 3;\n};\n\nconst edgeStrengthGround = (offset: number, slack: number, d: number): number => edgeStrength(offset, slack, d) + 1e-4;\n\nconst stiffness = (offset: number, slack: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const l = Vec3.length(d);\n    const s = Vec3.multiplyScalar(d, Math.sqrt(edgeStrength(offset, slack, l)) / l);\n    return outerProduct(s, s);\n};\n\nconst stiffnessGround = (offset: number, slack: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const result = outerProduct(d, d);\n    Mat3.multiplyScalar(result, edgeStrengthGround(offset, slack, Vec3.length(d)) / Vec3.dot(d, d));\n    return result;\n};\n\nconst stiffnessDerivative = (offset: number, slack: number, dim: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const epsilon = 0.00001;\n    const val = d[dim];\n    const dPlus = Vec3.clone(d);\n    dPlus[dim] = val + epsilon;\n    const dMinus = Vec3.clone(d);\n    dMinus[dim] = val - epsilon;\n    const plus = stiffness(offset, slack, dPlus);\n    const minus = stiffness(offset, slack, dMinus);\n    Mat3.sub(plus, minus);\n    Mat3.multiplyScalar(plus, 1 / (2 * epsilon));\n    return plus;\n};\n\nconst stiffnessPair = (offset: number, slack: number, a: Bot.Bot, b: Bot.Bot): Mat3.Mat3 => {\n    const d = Vec3.sub(b.pos, a.pos);\n    return stiffness(offset, slack, d);\n};\n\nconst stiffnessPairDerivative = (offset: number, slack: number, a: Bot.Bot, dim: number, b: Bot.Bot): Mat3.Mat3 =>\n    stiffnessDerivative(offset, slack, dim, Vec3.sub(a.pos, b.pos));\n\nconst stiffnessMatrix = (\n    offset: number,\n    slack: number,\n    friction: number,\n    world: World,\n    neigh: number[][]\n): SparseSymmetric => {\n    const result: SparseSymmetric = [...Array(world.bots.length * 3)].map(() => []);\n    for (let i = 0; i < world.bots.length; ++i) {\n        const sx = stiffnessGround(offset, slack, Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n        const sy = stiffnessGround(offset, slack, Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n        const sz = stiffnessGround(offset, slack, Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n        for (let k = 0; k < 3; ++k) {\n            for (let l = k; l < 3; ++l) {\n                result[3 * i + k].push([3 * i + l, (sx[k][l] + sz[k][l]) * friction + sy[k][l]]);\n            }\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        neigh[i].forEach(j => {\n            const s = stiffnessPair(offset, slack, world.bots[i], world.bots[j]);\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k].push([3 * j + l, -s[k][l]]);\n                    if (k > l) continue;\n                    result[3 * i + k][l - k][1] += s[k][l];\n                    result[3 * j + k][l - k][1] += s[k][l];\n                }\n            }\n        });\n    }\n    return result;\n};\n\nconst forceMatrix = (before: World, after: World, dt: number, g: number, m: number, world: World): number[] => {\n    const result = [...Array(world.bots.length * 3)].map(() => 0);\n    world.bots.forEach((bot, i) => {\n        for (let j = 0; j < 3; ++j) {\n            const v1 = (world.bots[i].pos[j] - before.bots[i].pos[j]) / dt;\n            const v2 = (after.bots[i].pos[j] - world.bots[i].pos[j]) / dt;\n            const acc = (v2 - v1) / dt;\n            result[3 * i + j] = ((j === 1 ? -1 : 0) - acc) * g * m;\n        }\n    });\n    return result;\n};\n\nexport const displacement = (\n    offset: number,\n    slack: number,\n    friction: number,\n    before: World,\n    after: World,\n    dt: number,\n    g: number,\n    m: number,\n    world: World,\n    neigh: number[][]\n): number[] => {\n    const f = forceMatrix(before, after, dt, g, m, world);\n    const k = stiffnessMatrix(offset, slack, friction, world, neigh);\n    return ldiv(k, f);\n};\n\nexport const neighbors = (neighborRadius: number, world: World, con: number[][], n: number): number[] =>\n    con[n]\n        .filter(i => i > n)\n        .filter(i => {\n            const d = Vec3.dist(world.bots[n].pos, world.bots[i].pos);\n            return d < neighborRadius;\n        });\n\nexport const gradient = (\n    offset: number,\n    slack: number,\n    friction: number,\n    overlapPenalty: number,\n    uBefore: number[],\n    u: number[],\n    uAfter: number[],\n    beforeBefore: World,\n    before: World,\n    after: World,\n    afterAfter: World,\n    dt: number,\n    world: World,\n    neigh: number[][],\n    t: number\n): Vec3.Vec3[] => {\n    const udku = [...Array(world.bots.length)].map(() => [0, 1, 2].map(() => 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const sx = stiffnessDerivative(offset, slack, dim, Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n            Mat3.multiplyScalar(sx, friction);\n            const sy = stiffnessDerivative(offset, slack, dim, Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n            const sz = stiffnessDerivative(offset, slack, dim, Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n            Mat3.multiplyScalar(sz, friction);\n            const vi = Vec3.newVec3(u[3 * i], u[3 * i + 1], u[3 * i + 2]);\n            Mat3.add(sx, sy);\n            Mat3.add(sx, sz);\n            const d = Vec3.dot(vi, Mat3.apply(sx, vi));\n            udku[i][dim] += d;\n            neigh[i].forEach(j => {\n                const s = stiffnessPairDerivative(offset, slack, world.bots[i], dim, world.bots[j]);\n                const vj = Vec3.newVec3(u[3 * j], u[3 * j + 1], u[3 * j + 2]);\n                Vec3.subEq(vj, vi);\n                const svisvj = Mat3.apply(s, vj);\n                const diff = Vec3.dot(vj, svisvj);\n                udku[i][dim] += diff;\n                udku[j][dim] -= diff;\n            });\n        }\n    }\n    const result = [...Array(world.bots.length)].map(() => Vec3.newVec3(0, 0, 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            result[i][dim] =\n                -udku[i][dim] + 2 * ((-uBefore[3 * i + dim] + 2 * u[3 * i + dim] - uAfter[3 * i + dim]) / dt ** 2);\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].pos[1] > 0.5) continue;\n        const l = world.bots[i].pos[1] + 0.5;\n        result[i][1] += 2 * overlapPenalty * (2 * (l - 2));\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        neigh[i].forEach(j => {\n            let d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const l = Vec3.length(d);\n            if (l > 1) return;\n            d = Vec3.multiplyScalar(d, overlapPenalty * ((2 * (l - 2)) / l));\n            Vec3.subEq(result[i], d);\n            Vec3.addEq(result[j], d);\n        });\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        const dest = Bot.interpolate(\n            world.bots[i],\n            t,\n            dt,\n            beforeBefore.bots[i].pos,\n            before.bots[i].pos,\n            after.bots[i].pos,\n            afterAfter.bots[i].pos\n        );\n        const d = Vec3.sub(dest, world.bots[i].pos);\n        Vec3.addEq(result[i], Vec3.multiplyScalar(d, -0.1));\n    }\n    return result;\n};\n\nconst rng = new Prando(123);\n\nconst rand = () => Vec3.multiplyScalar(Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5), 0.1);\n\nexport const connections = (world: World): number[][] => delaunay(world.bots.map(bot => Vec3.add(bot.pos, rand())));\n","import { Vec3 } from \"../core\";\nimport { coordsToWorld } from \"./utils\";\n\nconst n = 10;\n\nconst arc = [Vec3.newVec3(0, 0, 0)];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push(Vec3.newVec3(arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0));\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push(Vec3.newVec3(-arc[i][0], arc[i][1], 0));\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nconst s = [\n    ...[...Array(n + 1)].map((_, i) => Vec3.newVec3(i, 0.5, 0)),\n    ...[...Array(n)].map((_, i) => Vec3.newVec3(-i - 1, 0.5, 0))\n];\n\nexport default {\n    title: \"Arc\",\n    start: coordsToWorld(s),\n    end: coordsToWorld(arc)\n};\n","import { Animation, Vec3, World } from \"../core\";\nimport { Button, List, ListItem } from \"@material-ui/core\";\nimport React, { FC, useEffect, useState } from \"react\";\n\nimport Prando from \"prando\";\nimport update from \"immutability-helper\";\n\nconst rng = new Prando(123);\n\nconst rand = () => Vec3.multiplyScalar(Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5), 2);\n\ntype Props = {\n    world: World.World | undefined;\n    worldPrev: World.World | undefined;\n    setWorld: (world: World.World) => void;\n    setWorldPrev: (world: World.World) => void;\n    worldEnd: World.World | undefined;\n    subdivideIterations: number;\n    optimizeIterations: number;\n    resolveOverlapIterations: number;\n    contractionType: Animation.ContractionType;\n    contractIterations: number;\n    minimizeAccelerationIterations: number;\n    offset: number;\n    slack: number;\n    friction: number;\n    neighborRadius: number;\n    overlapPenalty: number;\n    gravity: number;\n    botMass: number;\n    dt: number;\n};\n\nconst Dynamic: FC<Props> = props => {\n    const [pause, setPause] = useState(true);\n    const [path, setPath] = useState<World.World[]>([]);\n\n    const step = () => {\n        if (props.world === undefined || props.worldPrev === undefined || props.worldEnd === undefined) return;\n        if (\n            path.length === 0 ||\n            props.world.bots\n                .map((bot, i) => Vec3.sub(bot.pos, path[0].bots[i].pos))\n                .map(v => Vec3.dot(v, v))\n                .reduce((sum, value) => sum + value, 0) > 0.00001\n        ) {\n            setPath(\n                Animation.createAnimation(\n                    props.offset,\n                    props.slack,\n                    props.friction,\n                    props.overlapPenalty,\n                    props.neighborRadius,\n                    props.gravity,\n                    props.botMass,\n                    props.dt,\n                    props.worldPrev,\n                    props.world,\n                    props.worldEnd,\n                    props.worldEnd,\n                    props.subdivideIterations,\n                    props.optimizeIterations,\n                    props.resolveOverlapIterations,\n                    props.contractionType,\n                    props.contractIterations,\n                    props.minimizeAccelerationIterations\n                )\n            );\n            return;\n        }\n        let p = path;\n        if (p.length > 1) p = p.slice(1);\n        props.setWorldPrev(props.world);\n        props.setWorld(p[0]);\n        setPath(p);\n    };\n\n    useEffect(() => {\n        if (pause) return undefined;\n        const i = setInterval(step, 1000 / 30);\n        return () => clearInterval(i);\n    }, [props, pause, path]);\n\n    return (\n        <List>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        setPause(!pause);\n                    }}>\n                    paused: {pause ? \"yes\" : \"no\"}\n                </Button>\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        if (props.world === undefined) return;\n                        props.setWorld(\n                            update(props.world, {\n                                bots: {\n                                    $set: props.world.bots.map(bot =>\n                                        update(bot, { pos: { $set: Vec3.add(bot.pos, rand()) } })\n                                    )\n                                }\n                            })\n                        );\n                    }}>\n                    Disturb\n                </Button>\n            </ListItem>\n        </List>\n    );\n};\n\nexport default Dynamic;\n","export default __webpack_public_path__ + \"static/media/grass.75422b3f.jpg\";","export default __webpack_public_path__ + \"static/media/nx.484e0aff.png\";","export default __webpack_public_path__ + \"static/media/ny.6a6662a7.png\";","export default __webpack_public_path__ + \"static/media/nz.ed736547.png\";","export default __webpack_public_path__ + \"static/media/px.c6e24cee.png\";","export default __webpack_public_path__ + \"static/media/py.a67deb40.png\";","export default __webpack_public_path__ + \"static/media/pz.39034444.png\";","import * as Vec3 from \"../core/Vec3\";\n\nimport {\n    AmbientLight,\n    BackSide,\n    BoxGeometry,\n    BufferGeometry,\n    Color,\n    DirectionalLight,\n    Mesh,\n    MeshBasicMaterial,\n    MeshPhongMaterial,\n    PlaneBufferGeometry,\n    RepeatWrapping,\n    Scene,\n    SphereGeometry,\n    TextureLoader\n} from \"three\";\n\nimport grass from \"../assets/grass.jpg\";\nimport nx from \"../assets/skyboxes/nx.png\";\nimport ny from \"../assets/skyboxes/ny.png\";\nimport nz from \"../assets/skyboxes/nz.png\";\nimport px from \"../assets/skyboxes/px.png\";\nimport py from \"../assets/skyboxes/py.png\";\nimport pz from \"../assets/skyboxes/pz.png\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n\n    const geo = new PlaneBufferGeometry(2000, 2000, 8, 8);\n    const textureGrass = new TextureLoader().load(grass);\n    textureGrass.wrapS = RepeatWrapping;\n    textureGrass.wrapT = RepeatWrapping;\n    textureGrass.repeat.set(100, 100);\n    const mat = new MeshPhongMaterial({ map: textureGrass });\n    const plane = new Mesh(geo, mat);\n    plane.rotateX(-Math.PI / 2);\n    plane.castShadow = false;\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(10, 50, 10);\n    light.castShadow = true;\n    light.shadowCameraRight = 50;\n    light.shadowCameraLeft = -50;\n    light.shadowCameraTop = 50;\n    light.shadowCameraBottom = -50;\n    light.shadowMapWidth = 1024;\n    light.shadowMapHeight = 1024;\n    scene.add(light);\n\n    const materialArray = [px, nx, py, ny, pz, nz]\n        .map(t => new TextureLoader().load(t))\n        .map(t => new MeshBasicMaterial({ map: t, fog: false, side: BackSide }));\n    const skyboxGeo = new BoxGeometry(1000, 1000, 1000);\n    const skybox = new Mesh(skyboxGeo, materialArray);\n    scene.add(skybox);\n\n    return scene;\n};\n\nexport const newSphere = (pos: Vec3.Vec3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color }));\n    mesh.geometry = bg;\n    mesh.position.set(...pos);\n    mesh.scale.set(0.5, 0.5, 0.5);\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n    return mesh;\n};\n","import { PCFSoftShadowMap, PerspectiveCamera, Scene, WebGLRenderer } from \"three\";\nimport React, { FC, useEffect, useRef, useState } from \"react\";\n\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { useWindowSize } from \"@react-hook/window-size\";\n\ntype Props = { scene: Scene };\n\nconst Canvas: FC<Props> = props => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return undefined;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#87ceeb\");\n        ren.setSize(width, height);\n        ren.shadowMapEnabled = true;\n        ren.shadowMapType = PCFSoftShadowMap;\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n\n        return () => {\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (!controls || !renderer || !camera || !props.scene) return undefined;\n        const i = window.setInterval(() => {\n            controls.update();\n            renderer.render(props.scene, camera);\n        }, 1000 / 30);\n        return () => {\n            window.clearInterval(i);\n        };\n    }, [controls, renderer, camera, props.scene]);\n\n    return <div ref={mount} />;\n};\n\nexport default Canvas;\n","import { Color, Mesh } from \"three\";\nimport React, { FC, useEffect, useState } from \"react\";\nimport { newScene, newSphere } from \"./draw\";\n\nimport Canvas from \"./Canvas\";\nimport { World } from \"../core\";\n\ntype Props = { world: World.World | undefined };\n\nconst Scene: FC<Props> = props => {\n    const [scene, setScene] = useState(newScene());\n    const [botMeshes, setBotMeshes] = useState<Mesh[]>([]);\n\n    useEffect(() => {\n        const w = props.world;\n        if (w === undefined) return;\n        if (botMeshes.length !== w.bots.length) return;\n        w.bots.forEach((bot, i) => {\n            botMeshes[i].position.set(...bot.pos);\n        });\n    }, [props.world, botMeshes]);\n\n    useEffect(() => {\n        const w = props.world;\n        if (w === undefined) return;\n        if (botMeshes.length === w.bots.length) return;\n        setBotMeshes(w.bots.map(bot => newSphere(bot.pos, new Color(\"#fa8072\"))));\n    }, [props.world, botMeshes]);\n\n    useEffect(() => {\n        const scn = newScene();\n\n        botMeshes.forEach(mesh => scn.add(mesh));\n        setScene(scn);\n    }, [botMeshes]);\n\n    return <Canvas scene={scene} />;\n};\n\nexport default Scene;\n","import { Bot, Vec3, World } from \"../../core\";\n\nexport const coordsToWorld = (coords: Vec3.Vec3[]): World.World => ({\n    bots: coords.map(\n        (pos): Bot.Bot => ({\n            pos\n        })\n    )\n});\n","import { Vec3 } from \"../core\";\nimport { coordsToWorld } from \"./utils\";\n\nconst n = 20;\n\nconst arc = [Vec3.newVec3(0, 0, 0)];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push(Vec3.newVec3(arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0));\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push(Vec3.newVec3(-arc[i][0], arc[i][1], 0));\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nconst s = [\n    ...[...Array(n + 1)].map((_, i) => Vec3.newVec3(i + 15, 0.5, 0)),\n    ...[...Array(n)].map((_, i) => Vec3.newVec3(-i - 1 - 15, 0.5, 0))\n];\n\nexport default {\n    title: \"Big arc\",\n    start: coordsToWorld(s),\n    end: coordsToWorld(arc)\n};\n","import { Vec3 } from \"../core\";\nimport { coordsToWorld } from \"./utils\";\n\nconst s = [...Array(8)].map((_, i) => [...Array(8)].map((_, j) => Vec3.newVec3(i - 3.5, 0.5, j - 3.5))).flat();\nconst e = [...Array(4)]\n    .map((_, i) => [...Array(4)].map((_, j) => [...Array(4)].map((_, k) => Vec3.newVec3(i - 1.5, k + 0.5, j - 1.5))))\n    .flat()\n    .flat();\n\nexport default {\n    title: \"Big cube\",\n    start: coordsToWorld(s),\n    end: coordsToWorld(e)\n};\n","import { Vec3 } from \"../core\";\nimport { coordsToWorld } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [1, 0.5, 0],\n    [0, 0.5, 0],\n    [-1, 0.5, 0],\n    [0, 1.5, 0],\n    [0, 2.5, 0],\n    [0, 3.5, 0],\n    [1, 3.5, 0],\n    [2, 3.5, 0],\n    [3, 3.5, 0],\n    [3, 0.5, 0]\n];\nconst e: Vec3.Vec3[] = [\n    [1, 0.5, 0],\n    [0, 0.5, 0],\n    [-1, 0.5, 0],\n    [0, 1.5, 0],\n    [0, 2.5, 0],\n    [0, 3.5, 0],\n    [1, 3.5, 0],\n    [2, 3.5, 0],\n    [3, 3.5, 0],\n    [3, 2.5, 0]\n];\n\nexport default {\n    title: \"Crane\",\n    start: coordsToWorld(s),\n    end: coordsToWorld(e)\n};\n","import { Vec3 } from \"../core\";\nimport { coordsToWorld } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [-1.5, 0.5, -1.5],\n    [-0.5, 0.5, -1.5],\n    [0.5, 0.5, -1.5],\n    [1.5, 0.5, -1.5],\n    [-1.5, 0.5, -0.5],\n    [-0.5, 0.5, -0.5],\n    [0.5, 0.5, -0.5],\n    [1.5, 0.5, -0.5],\n    [-1.5, 0.5, 0.5],\n    [-0.5, 0.5, 0.5],\n    [0.5, 0.5, 0.5],\n    [1.5, 0.5, 0.5],\n    [-1.5, 0.5, 1.5],\n    [-0.5, 0.5, 1.5],\n    [0.5, 0.5, 1.5],\n    [1.5, 0.5, 1.5]\n];\n\nconst e: Vec3.Vec3[] = [\n    [-0.5, 0.5, -0.5],\n    [0.5, 0.5, -0.5],\n    [0.5, 0.5, 0.5],\n    [-0.5, 0.5, 0.5],\n    [-0.5, 1.5, -0.5],\n    [0.5, 1.5, -0.5],\n    [0.5, 1.5, 0.5],\n    [-0.5, 1.5, 0.5],\n    [-0.5, 2.5, -0.5],\n    [0.5, 2.5, -0.5],\n    [0.5, 2.5, 0.5],\n    [-0.5, 2.5, 0.5],\n    [-0.5, 3.5, -0.5],\n    [0.5, 3.5, -0.5],\n    [0.5, 3.5, 0.5],\n    [-0.5, 3.5, 0.5]\n];\n\nexport default {\n    title: \"Cube\",\n    start: coordsToWorld(s),\n    end: coordsToWorld(e)\n};\n","import { Vec3 } from \"../core\";\nimport { coordsToWorld } from \"./utils\";\n\nconst r = 6;\nconst h = 3;\nconst w = 2;\n\nconst floor = () =>\n    [...Array(2 * r + 1)]\n        .map((_, i) => [...Array(2 * r + 1)].map((_, j): [number, number, number] => [i - r, 0.5, j - r]))\n        .flat()\n        .filter(p => Math.abs(p[0] + p[2]) < w);\n\nconst s: Vec3.Vec3[] = [\n    ...floor(),\n    ...[...Array(h)].map((_, i): [number, number, number] => [-r, i + 1.5, r]),\n    ...[...Array(h)].map((_, i): [number, number, number] => [r, i + 1.5, -r]),\n    [-r, h + 1.5, r]\n];\n\nconst e: Vec3.Vec3[] = [\n    ...floor(),\n    ...[...Array(h)].map((_, i): [number, number, number] => [-r, i + 1.5, r]),\n    ...[...Array(h)].map((_, i): [number, number, number] => [r, i + 1.5, -r]),\n    [r, h + 1.5, -r]\n];\n\nexport default {\n    title: \"Floor transport\",\n    start: coordsToWorld(s),\n    end: coordsToWorld(e)\n};\n","import { Vec3 } from \"../core\";\nimport { coordsToWorld } from \"./utils\";\n\nconst r = 1;\nconst d = 5;\n\nconst frame = (pos: Vec3.Vec3) =>\n    [...Array(2 * r + 1)]\n        .map((_, i) =>\n            [...Array(2 * r + 1)].map((_, j) =>\n                [...Array(2 * r + 1)].map((_, k): [number, number, number] => [i - r, j - r, k - r])\n            )\n        )\n        .flat()\n        .flat()\n        .filter(\n            p => (Math.abs(p[0]) === r ? 1 : 0) + (Math.abs(p[1]) === r ? 1 : 0) + (Math.abs(p[2]) === r ? 1 : 0) >= 2\n        )\n        .map(p => Vec3.newVec3(p[0], p[1] + 0.5 + r, p[2]))\n        .map(p => Vec3.add(p, pos));\n\nconst s: Vec3.Vec3[] = [\n    ...frame([0, 0, d]),\n    ...frame([0, 2 * r + 1, d]),\n    ...frame([-d, 0, d]),\n    ...frame([d, 0, -d]),\n    ...frame([-d, 2 * r + 1, d])\n];\n\nconst e: Vec3.Vec3[] = [\n    ...frame([0, 0, d]),\n    ...frame([0, 2 * r + 1, d]),\n    ...frame([-d, 0, -d]),\n    ...frame([d, 0, d]),\n    ...frame([d, 2 * r + 1, d])\n];\n\nexport default {\n    title: \"Frame transport\",\n    start: coordsToWorld(s),\n    end: coordsToWorld(e)\n};\n","import { Vec3 } from \"../core\";\nimport { coordsToWorld } from \"./utils\";\n\nconst s = [...[...Array(5)].map((_, i): Vec3.Vec3 => [i, 0.5, 0])];\n\nconst e = [...[...Array(5)].map((_, i): Vec3.Vec3 => [0, 0.5 + i, 0])];\n\nexport default {\n    title: \"Stack\",\n    start: coordsToWorld(s),\n    end: coordsToWorld(e)\n};\n","import { Vec3 } from \"../core\";\nimport { coordsToWorld } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [2, 0.5, 0],\n    [2, 1.5, 0],\n    [2, 2.5, 0],\n    [2, 3.5, 0],\n    [2, 4.5, 0],\n    [-2, 0.5, 0],\n    [-2, 1.5, 0],\n    [-2, 2.5, 0],\n    [-2, 3.5, 0],\n    [-2, 4.5, 0],\n    [2, 5.5, 0]\n];\nconst e: Vec3.Vec3[] = [\n    [2, 0.5, 0],\n    [2, 1.5, 0],\n    [2, 2.5, 0],\n    [2, 3.5, 0],\n    [2, 4.5, 0],\n    [-2, 0.5, 0],\n    [-2, 1.5, 0],\n    [-2, 2.5, 0],\n    [-2, 3.5, 0],\n    [-2, 4.5, 0],\n    [-2, 5.5, 0]\n];\n\nexport default {\n    title: \"Towers\",\n    start: coordsToWorld(s),\n    end: coordsToWorld(e)\n};\n","import { Vec3 } from \"../core\";\nimport { coordsToWorld } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [0, 0.5, 1],\n    [0, 0.5, -1],\n\n    [0, 1.5, 1],\n    [0, 1.5, 0],\n    [0, 1.5, -1],\n\n    [1, 1.5, 1],\n    [1, 1.5, 0],\n    [1, 1.5, -1],\n\n    [2, 1.5, 1],\n    [2, 1.5, 0],\n    [2, 1.5, -1],\n\n    [3, 1.5, 1],\n    [3, 1.5, 0],\n    [3, 1.5, -1],\n\n    [3, 0.5, 1],\n    [3, 0.5, -1]\n];\n\nconst e: Vec3.Vec3[] = [\n    [0, 0.5, 1],\n    [0, 0.5, -1],\n\n    [0, 1.5, 0.8],\n    [0, 3.5, 0],\n    [0, 1.5, -0.8],\n\n    [0, 2.5, 0.6],\n    [0, 4.5, 0],\n    [0, 2.5, -0.6],\n\n    [0, 5.5, 1],\n    [0, 5.5, 0],\n    [0, 5.5, -1],\n\n    [0, 4.7, 1.6],\n    [0, 6.5, 0],\n    [0, 4.7, -1.6],\n\n    [0, 3.7, 2],\n    [0, 3.7, -2]\n];\n\nexport default {\n    title: \"Transformer\",\n    start: coordsToWorld(s),\n    end: coordsToWorld(e)\n};\n","import { Vec3 } from \"../core\";\nimport { coordsToWorld } from \"./utils\";\n\nconst pillar = (pos: Vec3.Vec3) => {\n    const list: Vec3.Vec3[] = [\n        [0, 0, 0],\n        [1, 0, 0],\n        [-1, 0, 0],\n        [0, 0, 1],\n        [0, 0, -1],\n        [0, 1, 0],\n        [0, 2, 0],\n        [0, 3, 0]\n    ];\n    return list.map((p: Vec3.Vec3) => Vec3.add(p, pos));\n};\n\nconst space = 3;\n\nconst s: Vec3.Vec3[] = [\n    ...pillar([space * 2, 0.5, -space * 2]),\n    ...pillar([space, 0.5, -space]),\n    ...pillar([0, 0.5, 0]),\n    ...pillar([-space, 0.5, space]),\n    ...pillar([-space * 2, 0.5, space * 2]),\n    [-space * 2, 4.5, space * 2]\n];\n\nconst e: Vec3.Vec3[] = [\n    ...pillar([space * 2, 0.5, -space * 2]),\n    ...pillar([space, 0.5, -space]),\n    ...pillar([0, 0.5, 0]),\n    ...pillar([-space, 0.5, space]),\n    ...pillar([-space * 2, 0.5, space * 2]),\n    [space * 2, 4.5, -space * 2]\n];\n\nexport default {\n    title: \"Transport\",\n    start: coordsToWorld(s),\n    end: coordsToWorld(e)\n};\n","import { World } from \"../core\";\nimport arc from \"./arc\";\nimport bigArc from \"./bigArc\";\nimport bigCube from \"./bigCube\";\nimport crane from \"./crane\";\nimport cube from \"./cube\";\nimport floorTransport from \"./floorTransport\";\nimport frameTransport from \"./frameTransport\";\nimport stack from \"./stack\";\nimport towers from \"./towers\";\nimport transformer from \"./transformer\";\nimport transport from \"./transport\";\nimport verticalTransport from \"./verticalTransport\";\n\nexport const examples = [\n    arc,\n    bigArc,\n    bigCube,\n    crane,\n    cube,\n    floorTransport,\n    frameTransport,\n    stack,\n    towers,\n    transformer,\n    transport,\n    verticalTransport\n].sort((a, b) => {\n    const d = a.start.bots.length - b.start.bots.length;\n    if (d === 0) return a.title > b.title ? 1 : -1;\n    return d;\n});\n\nexport default (index: number): [World.World, World.World] => [examples[index].start, examples[index].end];\n","import { Vec3 } from \"../core\";\nimport { coordsToWorld } from \"./utils\";\n\nconst s: Vec3.Vec3[] = [\n    [-3, 0.5, 0],\n    [-3, 1.5, 0],\n    [-3, 2.5, 0],\n    [-2, 2.5, 0],\n    [-1, 2.5, 0],\n    [-3, 3.5, 0],\n    [-3, 4.5, 0],\n    [-3, 5.5, 0],\n    [-3, 6.5, 0],\n    [-2, 6.5, 0],\n    [-1, 6.5, 0],\n    [-3, 7.5, 0],\n    [-3, 8.5, 0],\n    [-3, 9.5, 0],\n    [-3, 10.5, 0],\n    [-2, 10.5, 0],\n    [-1, 10.5, 0],\n\n    [3, 0.5, 0],\n    [3, 1.5, 0],\n    [3, 2.5, 0],\n    [3, 3.5, 0],\n    [3, 4.5, 0],\n    [2, 4.5, 0],\n    [1, 4.5, 0],\n    [3, 5.5, 0],\n    [3, 6.5, 0],\n    [3, 7.5, 0],\n    [3, 8.5, 0],\n    [2, 8.5, 0],\n    [1, 8.5, 0],\n    [3, 9.5, 0],\n    [3, 10.5, 0],\n    [3, 11.5, 0],\n    [3, 12.5, 0],\n    [3, 13.5, 0],\n    [2, 13.5, 0],\n    [1, 13.5, 0],\n    [0, 13.5, 0],\n    [-1, 13.5, 0],\n    [-2, 13.5, 0],\n    [-3, 13.5, 0],\n    [-3, 12.5, 0],\n    [-3, 11.5, 0],\n\n    [0, 0.5, 0]\n];\n\nconst e: Vec3.Vec3[] = [\n    [-3, 0.5, 0],\n    [-3, 1.5, 0],\n    [-3, 2.5, 0],\n    [-2, 2.5, 0],\n    [-1, 2.5, 0],\n    [-3, 3.5, 0],\n    [-3, 4.5, 0],\n    [-3, 5.5, 0],\n    [-3, 6.5, 0],\n    [-2, 6.5, 0],\n    [-1, 6.5, 0],\n    [-3, 7.5, 0],\n    [-3, 8.5, 0],\n    [-3, 9.5, 0],\n    [-3, 10.5, 0],\n    [-2, 10.5, 0],\n    [-1, 10.5, 0],\n\n    [3, 0.5, 0],\n    [3, 1.5, 0],\n    [3, 2.5, 0],\n    [3, 3.5, 0],\n    [3, 4.5, 0],\n    [2, 4.5, 0],\n    [1, 4.5, 0],\n    [3, 5.5, 0],\n    [3, 6.5, 0],\n    [3, 7.5, 0],\n    [3, 8.5, 0],\n    [2, 8.5, 0],\n    [1, 8.5, 0],\n    [3, 9.5, 0],\n    [3, 10.5, 0],\n    [3, 11.5, 0],\n    [3, 12.5, 0],\n    [3, 13.5, 0],\n    [2, 13.5, 0],\n    [1, 13.5, 0],\n    [0, 13.5, 0],\n    [-1, 13.5, 0],\n    [-2, 13.5, 0],\n    [-3, 13.5, 0],\n    [-3, 12.5, 0],\n    [-3, 11.5, 0],\n\n    [0, 12.5, 0]\n];\n\nexport default {\n    title: \"Vertical transport\",\n    start: coordsToWorld(s),\n    end: coordsToWorld(e)\n};\n","import React, { FC, useState } from \"react\";\nimport { Vec3, World } from \"../core\";\nimport loadExample, { examples } from \"../examples\";\n\nimport { Button } from \"@material-ui/core\";\nimport Prando from \"prando\";\n\ntype Props = { onSelect: (worldStart: World.World, worldEnd: World.World) => void };\n\nconst SelectExample: FC<Props> = props => {\n    const [selectedExample, setSelectedExample] = useState<number | undefined>(undefined);\n\n    return (\n        <>\n            <b>Select an example</b>\n            <br />\n            <br />\n            {examples.map((example, i) => (\n                <Button\n                    key={i}\n                    variant=\"contained\"\n                    color={selectedExample === i ? \"primary\" : \"default\"}\n                    onClick={() => {\n                        const rng = new Prando(123);\n                        const [ws, we] = loadExample(i);\n                        console.log(ws, we);\n                        const rand = () =>\n                            Vec3.multiplyScalar(\n                                Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5),\n                                0.1\n                            );\n                        ws.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                        we.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                        props.onSelect(ws, we);\n                        setSelectedExample(i);\n                    }}>\n                    {example.title} ({example.start.bots.length} bots)\n                </Button>\n            ))}\n        </>\n    );\n};\n\nexport default SelectExample;\n","import { Animation, World } from \"../core\";\nimport { Button, List, ListItem } from \"@material-ui/core\";\nimport React, { FC, useEffect, useState } from \"react\";\n\ntype Props = {\n    worldStart: World.World | undefined;\n    worldEnd: World.World | undefined;\n    setWorld: (world: World.World) => void;\n    subdivideIterations: number;\n    optimizeIterations: number;\n    resolveOverlapIterations: number;\n    contractionType: Animation.ContractionType;\n    contractIterations: number;\n    minimizeAccelerationIterations: number;\n    offset: number;\n    slack: number;\n    friction: number;\n    neighborRadius: number;\n    overlapPenalty: number;\n    gravity: number;\n    botMass: number;\n    dt: number;\n};\n\nconst Static: FC<Props> = props => {\n    const [time, setTime] = useState(0);\n    const [pause, setPause] = useState(true);\n    const [animation, setAnimation] = useState<World.World[]>([]);\n\n    useEffect(() => {\n        if (animation.length === 0) return;\n        const pauseFrac = 0.1;\n        const pauseFrames = Math.round(pauseFrac * animation.length);\n        let t = time % (2 * (animation.length + pauseFrames));\n        if (t < pauseFrames) {\n            props.setWorld(animation[0]);\n            return;\n        }\n        t -= pauseFrames;\n        if (t < animation.length) {\n            props.setWorld(animation[t]);\n            return;\n        }\n        t -= animation.length;\n        if (t < pauseFrames) {\n            props.setWorld(animation[animation.length - 1]);\n            return;\n        }\n        t -= pauseFrames;\n        props.setWorld(animation[animation.length - 1 - t]);\n    }, [animation, time]);\n\n    useEffect(() => {\n        if (pause) return undefined;\n        const i = setInterval(() => setTime(t => t + 1), 1000 / 30);\n        return () => clearInterval(i);\n    }, [pause]);\n\n    return (\n        <List>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        if (props.worldStart === undefined || props.worldEnd === undefined) return;\n                        const t = Date.now();\n                        setAnimation(\n                            Animation.createAnimation(\n                                props.offset,\n                                props.slack,\n                                props.friction,\n                                props.overlapPenalty,\n                                props.neighborRadius,\n                                props.gravity,\n                                props.botMass,\n                                props.dt,\n                                props.worldStart,\n                                props.worldStart,\n                                props.worldEnd,\n                                props.worldEnd,\n                                props.subdivideIterations,\n                                props.optimizeIterations,\n                                props.resolveOverlapIterations,\n                                props.contractionType,\n                                props.contractIterations,\n                                props.minimizeAccelerationIterations\n                            )\n                        );\n                        console.log((Date.now() - t) / 1000);\n                        setPause(false);\n                    }}>\n                    Generate animation\n                </Button>\n            </ListItem>\n            <ListItem>\n                <Button variant=\"contained\" onClick={() => setPause(!pause)}>\n                    paused: {pause ? \"yes\" : \"no\"}\n                </Button>\n                {pause && (\n                    <Button variant=\"contained\" onClick={() => setTime(time + 1)}>\n                        Step\n                    </Button>\n                )}\n            </ListItem>\n        </List>\n    );\n};\n\nexport default Static;\n","import { Animation, World } from \"../core\";\nimport {\n    Button,\n    FormControlLabel,\n    Grid,\n    List,\n    ListItem,\n    MenuItem,\n    Select,\n    Switch,\n    TextField,\n    makeStyles\n} from \"@material-ui/core\";\nimport React, { FC, useState } from \"react\";\n\nimport Dynamic from \"./Dynamic\";\nimport Scene from \"./Scene\";\nimport SelectExample from \"./SelectExample\";\nimport Static from \"./Static\";\nimport update from \"immutability-helper\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst saveImage = () => {\n    const canvas = document.getElementsByTagName(\"canvas\")[0];\n    const image = canvas.toDataURL(\"image/png\");\n    const a = document.createElement(\"a\");\n    a.href = image.replace(/^data:image\\/[^;]/u, \"data:application/octet-stream\");\n    a.download = \"image.png\";\n    a.click();\n};\n\nconst App: FC = () => {\n    const classes = useStyles();\n    const [worldStart, setWorldStart] = useState<World.World | undefined>(undefined);\n    const [worldEnd, setWorldEnd] = useState<World.World | undefined>(undefined);\n    const [world, setWorld] = useState<World.World | undefined>(undefined);\n    const [worldPrev, setWorldPrev] = useState<World.World | undefined>(undefined);\n    const [dynamic, setDynamic] = useState(false);\n\n    const [options, setOptions] = useState({\n        subdivideIterations: 10,\n        optimizeIterations: 10,\n        resolveOverlapIterations: 10,\n        contractionType: Animation.ContractionType.Fibers,\n        contractIterations: 10,\n        minimizeAccelerationIterations: 40,\n        offset: 1.5,\n        slack: 2,\n        friction: 0.1,\n        neighborRadius: 2,\n        overlapPenalty: 1000,\n        gravity: 1,\n        botMass: 1,\n        dt: 1\n    });\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <b style={{ fontSize: 20 }}>Microbots</b>\n                        <Grid item className={classes.gridItem}>\n                            <SelectExample\n                                onSelect={(ws: World.World, we: World.World) => {\n                                    setWorldStart(ws);\n                                    setWorldEnd(we);\n                                    setWorld(ws);\n                                    setWorldPrev(ws);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <b>Animation</b>\n                            <br />\n                            <FormControlLabel\n                                control={<Switch checked={dynamic} onChange={e => setDynamic(e.target.checked)} />}\n                                label=\"Dynamic\"\n                            />\n                            {dynamic ? (\n                                <Dynamic\n                                    worldEnd={worldEnd}\n                                    world={world}\n                                    worldPrev={worldPrev}\n                                    setWorld={setWorld}\n                                    setWorldPrev={setWorldPrev}\n                                    {...options}\n                                />\n                            ) : (\n                                <Static worldStart={worldStart} worldEnd={worldEnd} setWorld={setWorld} {...options} />\n                            )}\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <b>Extra options</b>\n                            <List>\n                                {Object.entries(options).map(([key, value]) => (\n                                    <ListItem key={key}>\n                                        {key === \"contractionType\" ? (\n                                            <Select\n                                                value={value}\n                                                onChange={e => {\n                                                    setOptions(\n                                                        update(options, {\n                                                            [key]: { $set: e.target.value as Animation.ContractionType }\n                                                        })\n                                                    );\n                                                }}>\n                                                {Object.entries(Animation.ContractionType)\n                                                    .filter(([k]) => isNaN(Number(k)))\n                                                    .map(([k, v]) => (\n                                                        <MenuItem key={k} value={v}>\n                                                            {k}\n                                                        </MenuItem>\n                                                    ))}\n                                            </Select>\n                                        ) : (\n                                            <TextField\n                                                type=\"number\"\n                                                label={key}\n                                                value={value}\n                                                onChange={e =>\n                                                    setOptions(\n                                                        update(options, {\n                                                            [key]: { $set: Math.max(parseFloat(e.target.value), 0) }\n                                                        })\n                                                    )\n                                                }\n                                            />\n                                        )}\n                                    </ListItem>\n                                ))}\n                            </List>\n                            <List>\n                                <ListItem>\n                                    <Button variant=\"contained\" onClick={() => saveImage()}>\n                                        Save screenshot\n                                    </Button>\n                                </ListItem>\n                            </List>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <Scene world={world} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import Gui from \"./Gui\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <Gui />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}