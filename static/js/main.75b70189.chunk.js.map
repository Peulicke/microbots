{"version":3,"sources":["core/Vec3.ts","core/Mat3.ts","core/Bot.ts","core/utils.ts","core/conjugateGradientSparse.ts","core/delaunay.js","examples/arc.ts","core/World.ts","core/Animation.ts","draw.ts","examples/bigArc.ts","examples/bigCube.ts","examples/cube.ts","examples/stack.ts","examples/towers.ts","examples/index.ts","examples/targets.ts","App.tsx","index.tsx"],"names":["newVec3","x","y","z","clone","a","add","b","addEq","sub","subEq","multiplyScalar","s","dot","length","Math","sqrt","dist","normalize","dir","i","j","apply","result","newBot","config","pos","Vec3","target","weight","average","outerProduct","addVecMultNum","c","matMultVec","A","v","conditionVector","sum","floor","ldiv","bCopy","Array","fill","preconditioner","conditionMatrix","r","Ap","p","pOld","rsold","alpha","rsnew","cg","orient","m","Simplex","vertices","adjacent","boundary","this","lastVisited","GlueFacet","cell","index","Triangulation","simplices","interior","filter","tuple","LiftedPoint","point","triangulate","points","n","lifted","upper","l","max","sort","dpoints","dindex","u","slice","h","hull","randomSearch","Error","d","initialSimplex","o","initialCoords","initialCell","list","verts","t","adj","k","indexOf","triangles","useRandom","insert","incrementalConvexHull","prototype","flip","handleBoundaryDegeneracy","toVisit","cellAdj","pop","neighbor","nv","vv","push","walk","random","initIndex","outerLoop","cellVerts","prev","addPeaks","tovisit","glueFacets","indexOfN","indexOfNeg1","na","vverts","vadj","ncell","opposite","uu","nface","nptr","l1","m1","l0","min","m0","compareCells","ai","bi","cells","nc","bcell","cv","ptr","parity","newWorld","bots","setBots","world","offset","slack","setSlack","setOffset","edgeStrength","edgeStrengthGround","stiffness","stiffnessGround","Mat3","stiffnessDerivative","dim","epsilon","val","dPlus","dMinus","plus","stiffnessPair","stiffnessPairDerivative","displacement","before","after","dt","con","f","map","forEach","bot","v1","acc","forceMatrix","sx","sy","sz","includes","stiffnessMatrix","gradient","uBefore","uAfter","beforeBefore","afterAfter","udku","vi","vj","svisvj","diff","p1","p2","p3","p4","p5","connections","tri","Object","keys","key","Number","delaunay","start","end","World","Bot","optimize","animation","vel","iter","g","displacements","undefined","subdivide","createAnimation","newScene","scene","Scene","AmbientLight","light","DirectionalLight","position","set","updateCylinder","from","to","radius","cylinder","orientation","Matrix4","lookAt","Vector3","Object3D","up","multiply","setRotationFromMatrix","scale","newCylinder","color","edgeGeometry","CylinderGeometry","Mesh","MeshPhongMaterial","arc","angle","PI","cos","sin","_","example","title","flat","examples","abs","bigArc","cube","bigCube","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","App","useWindowSize","windowWidth","windowHeight","width","height","classes","mount","useRef","useState","controls","setControls","camera","setCamera","renderer","setRenderer","frame","setFrame","time","setTime","animate","setAnimate","setScene","botMeshes","setBotMeshes","groundEdgeMeshes","setGroundEdgeMeshes","edgeMeshes","setEdgeMeshes","setAnimation","worldStart","setWorldStart","worldEnd","setWorldEnd","selectedExample","setSelectedExample","updateWorld","remove","strength","useEffect","geom","SphereGeometry","computeVertexNormals","faces","face","vertexColors","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","geometry","newSphere","Color","scn","row","mc","current","cam","PerspectiveCamera","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","window","setInterval","clearInterval","removeChild","update","render","pauseFrames","round","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","direction","className","Paper","List","ListItem","Button","variant","onClick","rng","Prando","ws","we","console","log","rand","next","Date","now","Animation","image","document","getElementsByTagName","toDataURL","createElement","href","replace","download","click","saveImage","ref","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.75b70189.chunk.js","sourcesContent":["export type Vec3 = [number, number, number];\n\nexport const newVec3 = (x: number, y: number, z: number): Vec3 => [x, y, z];\n\nexport const clone = (a: Vec3): Vec3 => [a[0], a[1], a[2]];\n\nexport const add = (a: Vec3, b: Vec3): Vec3 => [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n\nexport const addEq = (a: Vec3, b: Vec3): void => {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n};\n\nexport const sub = (a: Vec3, b: Vec3): Vec3 => [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n\nexport const subEq = (a: Vec3, b: Vec3): void => {\n    a[0] -= b[0];\n    a[1] -= b[1];\n    a[2] -= b[2];\n};\n\nexport const multiplyScalar = (a: Vec3, s: number): Vec3 => [a[0] * s, a[1] * s, a[2] * s];\n\nexport const dot = (a: Vec3, b: Vec3): number => a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\nexport const length = (a: Vec3): number => Math.sqrt(dot(a, a));\n\nexport const dist = (a: Vec3, b: Vec3): number => length(sub(a, b));\n\nexport const normalize = (a: Vec3): Vec3 => multiplyScalar(a, 1 / length(a));\n\nexport const dir = (a: Vec3, b: Vec3): Vec3 => normalize(sub(a, b));\n","import * as Vec3 from \"./Vec3\";\n\nexport type Mat3 = [Vec3.Vec3, Vec3.Vec3, Vec3.Vec3];\n\nexport const newMat3 = (x: Vec3.Vec3, y: Vec3.Vec3, z: Vec3.Vec3): Mat3 => [x, y, z];\n\nexport const add = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] += b[i][j];\n        }\n    }\n};\n\nexport const sub = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] -= b[i][j];\n        }\n    }\n};\n\nexport const multiplyScalar = (a: Mat3, s: number): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] *= s;\n        }\n    }\n};\n\nexport const apply = (a: Mat3, b: Vec3.Vec3): Vec3.Vec3 => {\n    const result: Vec3.Vec3 = [0, 0, 0];\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            result[i] += a[i][j] * b[j];\n        }\n    }\n    return result;\n};\n","import * as Vec3 from \"./Vec3\";\n\ntype Target = (t: number) => Vec3.Vec3 | undefined;\n\nexport type Bot = {\n    pos: Vec3.Vec3;\n    target: Target;\n    weight: number;\n};\n\nexport const newBot = (config: { pos?: Vec3.Vec3; target?: Target; weight?: number }): Bot => ({\n    pos: config.pos || Vec3.newVec3(0, 0, 0),\n    target: config.target || (() => undefined),\n    weight: config.weight || 1\n});\n\nexport const average = (a: Bot, b: Bot): Bot =>\n    newBot({ ...a, pos: Vec3.multiplyScalar(Vec3.add(a.pos, b.pos), 1 / 2) });\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\n\nconst throwError = () => {\n    throw new Error(\"Vectors need to be the same length\");\n};\n\nexport const dot = (a: number[], b: number[]): number => {\n    if (a.length !== b.length) throwError();\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) result += a[i] * b[i];\n    return result;\n};\n\nexport const outerProduct = (a: Vec3.Vec3, b: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.newMat3(\n        Vec3.newVec3(a[0] * b[0], a[0] * b[1], a[0] * b[2]),\n        Vec3.newVec3(a[1] * b[0], a[1] * b[1], a[1] * b[2]),\n        Vec3.newVec3(a[2] * b[0], a[2] * b[1], a[2] * b[2])\n    );\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n","export type SparseSymmetric = [number, number][][];\n\nconst clone = (a: number[], result: number[]): void => {\n    for (let i = 0; i < a.length; ++i) result[i] = a[i];\n};\n\nconst dot = (a: number[], b: number[]): number => {\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) {\n        result += a[i] * b[i];\n    }\n    return result;\n};\n\nconst addVecMultNum = (a: number[], b: number[], c: number): void => {\n    for (let i = 0; i < a.length; ++i) a[i] += b[i] * c;\n};\n\nconst matMultVec = (A: SparseSymmetric, b: number[], result: number[]): void => {\n    for (let i = 0; i < result.length; ++i) result[i] = 0;\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            const v = A[i][c][1];\n            result[i] += v * b[j];\n            if (i === j) continue;\n            result[j] += v * b[i];\n        }\n    }\n};\n\nconst cg = (A: SparseSymmetric, b: number[]): number[] => {\n    const x = Array(b.length).fill(0);\n    const r = Array(b.length);\n    clone(b, r);\n    const Ap = Array(b.length);\n    matMultVec(A, x, Ap);\n    addVecMultNum(r, Ap, -1);\n    const p = Array(r.length);\n    const pOld = Array(p.length);\n    clone(r, p);\n    let rsold = dot(r, r);\n    for (let i = 0; i < 20; ++i) {\n        matMultVec(A, p, Ap);\n        const alpha = rsold / dot(p, Ap);\n        addVecMultNum(x, p, alpha);\n        addVecMultNum(r, Ap, -alpha);\n        const rsnew = dot(r, r);\n        clone(p, pOld);\n        clone(r, p);\n        addVecMultNum(p, pOld, rsnew / rsold);\n        rsold = rsnew;\n    }\n    return x;\n};\n\nconst preconditioner = (A: SparseSymmetric, b: number[]): number[] => {\n    const sum = Array(b.length / 3).fill(0);\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const [j, v] = A[i][c];\n            if (Math.floor(i / 3) !== Math.floor(j / 3)) continue;\n            sum[Math.floor(i / 3)] += v;\n            if (i === j) continue;\n            sum[Math.floor(j / 3)] += v;\n        }\n    }\n    for (let i = 0; i < sum.length; ++i) sum[i] = Math.sqrt(Math.sqrt(3 / sum[i]));\n    return sum;\n};\n\nconst conditionMatrix = (sum: number[], A: SparseSymmetric): void => {\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            A[i][c][1] *= sum[Math.floor(i / 3)];\n            A[i][c][1] *= sum[Math.floor(j / 3)];\n        }\n    }\n};\n\nconst conditionVector = (sum: number[], b: number[]): void => {\n    for (let i = 0; i < b.length; ++i) {\n        b[i] *= sum[Math.floor(i / 3)];\n    }\n};\n\nexport const ldiv = (A: SparseSymmetric, b: number[]): number[] => {\n    const bCopy = Array(b.length);\n    clone(b, bCopy);\n    const sum = preconditioner(A, bCopy);\n    conditionMatrix(sum, A);\n    conditionVector(sum, bCopy);\n    const x = cg(A, bCopy);\n    conditionVector(sum, x);\n    return x;\n};\n","const orient = m =>\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[2][2] +\n        (m[2][1] * m[4][0] - m[4][1] * m[2][0]) * -m[3][2] +\n        (m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[4][2]) *\n        m[1][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[3][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[4][2]) *\n        -m[2][3] +\n    ((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[2][2] +\n        (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[4][2]) *\n        m[3][3] +\n    ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[1][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * -m[2][2] +\n        (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[3][2]) *\n        -m[4][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[3][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[4][2]) *\n        m[0][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[0][2] +\n        (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[3][2] +\n        (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * m[4][2]) *\n        -m[1][3] +\n    (((m[1][1] * m[4][0] - m[4][1] * m[1][0]) * m[0][2] +\n        (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[1][2] +\n        (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[4][2]) *\n        m[3][3] +\n        ((m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[3][2]) *\n            -m[4][3] +\n        ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[1][2] +\n            (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * -m[2][2] +\n            (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[3][2]) *\n            m[0][3] +\n        ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[2][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[3][2]) *\n            -m[1][3] +\n        ((m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[3][2]) *\n            m[2][3] +\n        ((m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[2][2]) *\n            -m[3][3]) -\n    (((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[2][2] +\n        (m[2][1] * m[4][0] - m[4][1] * m[2][0]) * -m[3][2] +\n        (m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[4][2]) *\n        m[0][3] +\n        ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[0][2] +\n            (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[3][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * m[4][2]) *\n            -m[2][3] +\n        (((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[0][2] +\n            (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[2][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[4][2]) *\n            m[3][3] +\n            ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[0][2] +\n                (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[2][2] +\n                (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[3][2]) *\n                -m[4][3]) +\n        (((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[1][2] +\n            (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[2][2] +\n            (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[4][2]) *\n            m[0][3] +\n            ((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[0][2] +\n                (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[2][2] +\n                (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[4][2]) *\n                -m[1][3] +\n            (((m[1][1] * m[4][0] - m[4][1] * m[1][0]) * m[0][2] +\n                (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[1][2] +\n                (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[4][2]) *\n                m[2][3] +\n                ((m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[0][2] +\n                    (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * -m[1][2] +\n                    (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[2][2]) *\n                    -m[4][3])));\n\n//Ranks a pair of cells up to permutation\nfunction compareCells(a, b) {\n    const l1 = a[0] + a[1];\n    const m1 = b[0] + b[1];\n    let d = l1 + a[2] - (m1 + b[2]);\n    if (d) return d;\n    const l0 = Math.min(a[0], a[1]);\n    const m0 = Math.min(b[0], b[1]);\n    d = Math.min(l0, a[2]) - Math.min(m0, b[2]);\n    if (d) return d;\n    return Math.min(l0 + a[2], l1) - Math.min(m0 + b[2], m1);\n}\n\nfunction Simplex(vertices, adjacent, boundary) {\n    this.vertices = vertices;\n    this.adjacent = adjacent;\n    this.boundary = boundary;\n    this.lastVisited = -1;\n}\n\nSimplex.prototype.flip = function () {\n    const t = this.vertices[0];\n    this.vertices[0] = this.vertices[1];\n    this.vertices[1] = t;\n    const u = this.adjacent[0];\n    this.adjacent[0] = this.adjacent[1];\n    this.adjacent[1] = u;\n};\n\nfunction GlueFacet(vertices, cell, index) {\n    this.vertices = vertices;\n    this.cell = cell;\n    this.index = index;\n}\n\nfunction Triangulation(vertices, simplices) {\n    this.vertices = vertices;\n    this.simplices = simplices;\n    this.interior = simplices.filter(c => !c.boundary);\n    this.tuple = [...this.vertices];\n    this.orient = () => orient(this.tuple);\n}\n\n//Degenerate situation where we are on boundary, but coplanar to face\nTriangulation.prototype.handleBoundaryDegeneracy = function (cell, point) {\n    const d = 4;\n    const n = this.vertices.length - 1;\n    const tuple = this.tuple;\n    const verts = this.vertices;\n\n    //Dumb solution: Just do dfs from boundary cell until we find any peak, or terminate\n    const toVisit = [cell];\n    cell.lastVisited = -n;\n    while (toVisit.length > 0) {\n        cell = toVisit.pop();\n        const cellAdj = cell.adjacent;\n        for (let i = 0; i <= d; ++i) {\n            const neighbor = cellAdj[i];\n            if (!neighbor.boundary || neighbor.lastVisited <= -n) continue;\n            const nv = neighbor.vertices;\n            for (let j = 0; j <= d; ++j) {\n                const vv = nv[j];\n                if (vv < 0) tuple[j] = point;\n                else tuple[j] = verts[vv];\n            }\n            const o = this.orient();\n            if (o > 0) return neighbor;\n            neighbor.lastVisited = -n;\n            if (o === 0) toVisit.push(neighbor);\n        }\n    }\n    return null;\n};\n\nTriangulation.prototype.walk = function (point, random) {\n    //Alias local properties\n    const n = this.vertices.length - 1;\n    const verts = this.vertices;\n    const tuple = this.tuple;\n\n    //Compute initial jump cell\n    const initIndex = random ? (this.interior.length * Math.random()) | 0 : this.interior.length - 1;\n    let cell = this.interior[initIndex];\n\n    //Start walking\n    outerLoop: while (!cell.boundary) {\n        const cellVerts = cell.vertices;\n        const cellAdj = cell.adjacent;\n\n        for (let i = 0; i <= 4; ++i) {\n            tuple[i] = verts[cellVerts[i]];\n        }\n        cell.lastVisited = n;\n\n        //Find farthest adjacent cell\n        for (let i = 0; i <= 4; ++i) {\n            const neighbor = cellAdj[i];\n            if (neighbor.lastVisited >= n) continue;\n            const prev = tuple[i];\n            tuple[i] = point;\n            const o = this.orient();\n            tuple[i] = prev;\n            if (o < 0) {\n                cell = neighbor;\n                continue outerLoop;\n            }\n            if (!neighbor.boundary) neighbor.lastVisited = n;\n            else neighbor.lastVisited = -n;\n        }\n        return;\n    }\n\n    return cell;\n};\n\nTriangulation.prototype.addPeaks = function (point, cell) {\n    const n = this.vertices.length - 1;\n    const verts = this.vertices;\n    const tuple = this.tuple;\n    const interior = this.interior;\n    const simplices = this.simplices;\n\n    //Walking finished at boundary, time to add peaks\n    const tovisit = [cell];\n\n    //Stretch initial boundary cell into a peak\n    cell.lastVisited = n;\n    cell.vertices[cell.vertices.indexOf(-1)] = n;\n    cell.boundary = false;\n    interior.push(cell);\n\n    //Record a list of all new boundaries created by added peaks so we can glue them together when we are all done\n    const glueFacets = [];\n\n    //Do a traversal of the boundary walking outward from starting peak\n    while (tovisit.length > 0) {\n        //Pop off peak and walk over adjacent cells\n        cell = tovisit.pop();\n        const cellVerts = cell.vertices;\n        const cellAdj = cell.adjacent;\n        const indexOfN = cellVerts.indexOf(n);\n        if (indexOfN < 0) continue;\n\n        for (let i = 0; i <= 4; ++i) {\n            if (i === indexOfN) continue;\n\n            //For each boundary neighbor of the cell\n            const neighbor = cellAdj[i];\n            if (!neighbor.boundary || neighbor.lastVisited >= n) continue;\n\n            const nv = neighbor.vertices;\n\n            //Test if neighbor is a peak\n            if (neighbor.lastVisited !== -n) {\n                //Compute orientation of p relative to each boundary peak\n                let indexOfNeg1 = 0;\n                for (let j = 0; j <= 4; ++j) {\n                    if (nv[j] < 0) {\n                        indexOfNeg1 = j;\n                        tuple[j] = point;\n                    } else tuple[j] = verts[nv[j]];\n                }\n                const o = this.orient();\n\n                //Test if neighbor cell is also a peak\n                if (o > 0) {\n                    nv[indexOfNeg1] = n;\n                    neighbor.boundary = false;\n                    interior.push(neighbor);\n                    tovisit.push(neighbor);\n                    neighbor.lastVisited = n;\n                    continue;\n                }\n                neighbor.lastVisited = -n;\n            }\n\n            const na = neighbor.adjacent;\n\n            //Otherwise, replace neighbor with new face\n            const vverts = cellVerts.slice();\n            const vadj = cellAdj.slice();\n            const ncell = new Simplex(vverts, vadj, true);\n            simplices.push(ncell);\n\n            //Connect to neighbor\n            const opposite = na.indexOf(cell);\n            if (opposite < 0) continue;\n\n            na[opposite] = ncell;\n            vadj[indexOfN] = neighbor;\n\n            //Connect to cell\n            vverts[i] = -1;\n            vadj[i] = cell;\n            cellAdj[i] = ncell;\n\n            //Flip facet\n            ncell.flip();\n\n            //Add to glue list\n            for (let j = 0; j <= 4; ++j) {\n                const uu = vverts[j];\n                if (uu < 0 || uu === n) continue;\n                let nface = new Array(3);\n                let nptr = 0;\n                for (let k = 0; k <= 4; ++k) {\n                    const vv = vverts[k];\n                    if (vv < 0 || k === j) continue;\n                    nface[nptr++] = vv;\n                }\n                glueFacets.push(new GlueFacet(nface, ncell, j));\n            }\n        }\n    }\n\n    //Glue boundary facets together\n    glueFacets.sort((a, b) => compareCells(a.vertices, b.vertices));\n\n    for (let i = 0; i + 1 < glueFacets.length; i += 2) {\n        const a = glueFacets[i];\n        const b = glueFacets[i + 1];\n        const ai = a.index;\n        const bi = b.index;\n        if (ai < 0 || bi < 0) continue;\n        a.cell.adjacent[a.index] = b.cell;\n        b.cell.adjacent[b.index] = a.cell;\n    }\n};\n\nTriangulation.prototype.insert = function (point, random) {\n    //Add point\n    const verts = this.vertices;\n    verts.push(point);\n\n    let cell = this.walk(point, random);\n    if (!cell) return;\n\n    //Alias local properties\n    const tuple = this.tuple;\n\n    //Degenerate case: If point is coplanar to cell, then walk until we find a non-degenerate boundary\n    for (let i = 0; i <= 4; ++i) {\n        const vv = cell.vertices[i];\n        if (vv < 0) tuple[i] = point;\n        else tuple[i] = verts[vv];\n    }\n    const o = this.orient(tuple);\n    if (o < 0) return;\n    if (o === 0) {\n        cell = this.handleBoundaryDegeneracy(cell, point);\n        if (!cell) return;\n    }\n\n    //Add peaks\n    this.addPeaks(point, cell);\n};\n\n//Extract all boundary cells\nTriangulation.prototype.boundary = function () {\n    const d = 4;\n    const boundary = [];\n    const cells = this.simplices;\n    const nc = cells.length;\n    for (let i = 0; i < nc; ++i) {\n        const c = cells[i];\n        if (c.boundary) {\n            const bcell = new Array(d);\n            const cv = c.vertices;\n            let ptr = 0;\n            let parity = 0;\n            for (let j = 0; j <= d; ++j) {\n                if (cv[j] >= 0) {\n                    bcell[ptr++] = cv[j];\n                } else {\n                    parity = j & 1;\n                }\n            }\n            if (parity === (d & 1)) {\n                const t = bcell[0];\n                bcell[0] = bcell[1];\n                bcell[1] = t;\n            }\n            boundary.push(bcell);\n        }\n    }\n    return boundary;\n};\n\nfunction incrementalConvexHull(points, randomSearch) {\n    const n = points.length;\n    if (n === 0) {\n        throw new Error(\"Must have at least d+1 points\");\n    }\n    const d = points[0].length;\n    if (n <= d) {\n        throw new Error(\"Must input at least d+1 points\");\n    }\n\n    //FIXME: This could be degenerate, but need to select d+1 non-coplanar points to bootstrap process\n    const initialSimplex = points.slice(0, d + 1);\n\n    //Make sure initial simplex is positively oriented\n    const o = orient(initialSimplex);\n    if (o === 0) {\n        throw new Error(\"Input not in general position\");\n    }\n    const initialCoords = new Array(d + 1);\n    for (let i = 0; i <= d; ++i) {\n        initialCoords[i] = i;\n    }\n    if (o < 0) {\n        initialCoords[0] = 1;\n        initialCoords[1] = 0;\n    }\n\n    //Create initial topological index, glue pointers together (kind of messy)\n    const initialCell = new Simplex(initialCoords, new Array(d + 1), false);\n    const boundary = initialCell.adjacent;\n    const list = new Array(d + 2);\n    for (let i = 0; i <= d; ++i) {\n        const verts = initialCoords.slice();\n        for (let j = 0; j <= d; ++j) {\n            if (j === i) verts[j] = -1;\n        }\n        const t = verts[0];\n        verts[0] = verts[1];\n        verts[1] = t;\n        const cell = new Simplex(verts, new Array(d + 1), true);\n        boundary[i] = cell;\n        list[i] = cell;\n    }\n    list[d + 1] = initialCell;\n    for (let i = 0; i <= d; ++i) {\n        const verts = boundary[i].vertices;\n        const adj = boundary[i].adjacent;\n        for (let j = 0; j <= d; ++j) {\n            const v = verts[j];\n            if (v < 0) {\n                adj[j] = initialCell;\n                continue;\n            }\n            for (let k = 0; k <= d; ++k) {\n                if (boundary[k].vertices.indexOf(v) < 0) {\n                    adj[j] = boundary[k];\n                }\n            }\n        }\n    }\n\n    //Initialize triangles\n    const triangles = new Triangulation(initialSimplex, list);\n\n    //Insert remaining points\n    const useRandom = !!randomSearch;\n    for (let i = d + 1; i < n; ++i) {\n        triangles.insert(points[i], useRandom);\n    }\n\n    //Extract boundary cells\n    return triangles.boundary();\n}\n\nfunction LiftedPoint(p, i) {\n    this.point = p;\n    this.index = i;\n}\n\nfunction triangulate(points) {\n    let n = points.length;\n    if (n === 0) return [];\n\n    //Lift points, sort\n    const lifted = new Array(n);\n    let upper = 1.0;\n    for (let i = 0; i < n; ++i) {\n        const p = points[i];\n        const x = new Array(3 + 1);\n        let l = 0.0;\n        for (let j = 0; j < 3; ++j) {\n            const v = p[j];\n            x[j] = v;\n            l += v * v;\n        }\n        x[3] = l;\n        lifted[i] = new LiftedPoint(x, i);\n        upper = Math.max(l, upper);\n    }\n    lifted.sort((a, b) => {\n        for (let i = 0; i < 5; ++i) {\n            const s = b.point[i] - a.point[i];\n            if (s) return s;\n        }\n        return 0;\n    });\n\n    //Double points\n    n = lifted.length;\n\n    //Create new list of points\n    const dpoints = new Array(n + 3 + 1);\n    const dindex = new Array(n + 3 + 1);\n\n    //Add steiner points at top\n    const u = (3 + 1) * (3 + 1) * upper;\n    const y = new Array(3 + 1);\n    for (let i = 0; i <= 3; ++i) {\n        y[i] = 0.0;\n    }\n    y[3] = u;\n\n    dpoints[0] = y.slice();\n    dindex[0] = -1;\n\n    for (let i = 0; i <= 3; ++i) {\n        const x = y.slice();\n        x[i] = 1;\n        dpoints[i + 1] = x;\n        dindex[i + 1] = -1;\n    }\n\n    //Copy rest of the points over\n    for (let i = 0; i < n; ++i) {\n        const h = lifted[i];\n        dpoints[i + 3 + 1] = h.point;\n        dindex[i + 3 + 1] = h.index;\n    }\n\n    //Construct convex hull\n    let hull = incrementalConvexHull(dpoints, false);\n    hull = hull.filter(function (cell) {\n        for (let i = 0; i <= 3; ++i) {\n            const v = dindex[cell[i]];\n            if (v < 0) {\n                return false;\n            }\n            cell[i] = v;\n        }\n        return true;\n    });\n\n    for (let i = 0; i < hull.length; ++i) {\n        const h = hull[i];\n        const x = h[0];\n        h[0] = h[1];\n        h[1] = x;\n    }\n\n    return hull;\n}\n\nexport default points => {\n    const tri = triangulate(points);\n    const connections = points.map(() => ({}));\n    tri.map(t => {\n        for (let i = 0; i < 4; ++i) {\n            for (let j = i + 1; j < 4; ++j) {\n                connections[t[i]][t[j]] = true;\n                connections[t[j]][t[i]] = true;\n            }\n        }\n    });\n    return connections.map(con => Object.keys(con).map(key => Number(key)));\n};\n","import { Vec3, Bot, World } from \"../core\";\n\nconst n = 10;\n\nconst arc = [Vec3.newVec3(0, 0, 0)];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push(Vec3.newVec3(arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0));\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push(Vec3.newVec3(-arc[i][0], arc[i][1], 0));\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nconst start = [\n    ...[...Array(n + 1)].map((_, i) => Vec3.newVec3(i, 0.5, 0)),\n    ...[...Array(n)].map((_, i) => Vec3.newVec3(-i - 1, 0.5, 0))\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: t => {\n                    if (t > 0.9) return arc[i];\n                },\n                weight: 0.01\n            })\n    )\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Arc\",\n    world: world\n};\n\nexport default example;\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\nimport { outerProduct } from \"./utils\";\nimport { SparseSymmetric, ldiv } from \"./conjugateGradientSparse\";\nimport * as Bot from \"./Bot\";\nimport delaunay from \"./delaunay\";\n\nexport type World = { bots: Bot.Bot[] };\n\nexport const newWorld = (): World => ({ bots: [] });\n\nexport const setBots = (bots: Bot.Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nlet offset = 1.5;\nlet slack = 2;\nexport const setSlack = (s: number): void => {\n    slack = s;\n};\nexport const setOffset = (o: number): void => {\n    offset = o;\n};\nconst friction = 0.1;\n\nexport const edgeStrength = (d: number): number => {\n    if (d < offset - slack / 2) return 1;\n    if (d > offset + slack / 2) return 0;\n    return (2 * (d + slack - offset) * (offset + slack / 2 - d) ** 2) / slack ** 3;\n};\n\nexport const edgeStrengthGround = (d: number): number => edgeStrength(d) + 1e-4;\n\nconst stiffness = (d: Vec3.Vec3): Mat3.Mat3 => {\n    const l = Vec3.length(d);\n    d = Vec3.multiplyScalar(d, Math.sqrt(edgeStrength(l)) / l);\n    return outerProduct(d, d);\n};\n\nconst stiffnessGround = (d: Vec3.Vec3): Mat3.Mat3 => {\n    const result = outerProduct(d, d);\n    Mat3.multiplyScalar(result, edgeStrengthGround(Vec3.length(d)) / Vec3.dot(d, d));\n    return result;\n};\n\nconst stiffnessDerivative = (dim: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const epsilon = 0.00001;\n    const val = d[dim];\n    const dPlus = Vec3.clone(d);\n    dPlus[dim] = val + epsilon;\n    const dMinus = Vec3.clone(d);\n    dMinus[dim] = val - epsilon;\n    const plus = stiffness(dPlus);\n    const minus = stiffness(dMinus);\n    Mat3.sub(plus, minus);\n    Mat3.multiplyScalar(plus, 1 / (2 * epsilon));\n    return plus;\n};\n\nconst stiffnessPair = (a: Bot.Bot, b: Bot.Bot): Mat3.Mat3 => {\n    const d = Vec3.sub(b.pos, a.pos);\n    return stiffness(d);\n};\n\nconst stiffnessPairDerivative = (a: Bot.Bot, dim: number, b: Bot.Bot): Mat3.Mat3 =>\n    stiffnessDerivative(dim, Vec3.sub(a.pos, b.pos));\n\nconst stiffnessMatrix = (world: World, con: number[][]): SparseSymmetric => {\n    const result: SparseSymmetric = [...Array(world.bots.length * 3)].map(() => []);\n    for (let i = 0; i < world.bots.length; ++i) {\n        const sx = stiffnessGround(Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n        const sy = stiffnessGround(Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n        const sz = stiffnessGround(Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n        for (let k = 0; k < 3; ++k) {\n            for (let l = k; l < 3; ++l) {\n                result[3 * i + k].push([3 * i + l, (sx[k][l] + sz[k][l]) * friction + sy[k][l]]);\n            }\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            const d = Vec3.dist(world.bots[i].pos, world.bots[j].pos);\n            if (d > offset + slack / 2) continue;\n            if (d > 1.5 && !con[i].includes(j)) continue;\n            const s = stiffnessPair(world.bots[i], world.bots[j]);\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k].push([3 * j + l, -s[k][l]]);\n                    if (k > l) continue;\n                    result[3 * i + k][l - k][1] += s[k][l];\n                    result[3 * j + k][l - k][1] += s[k][l];\n                }\n            }\n        }\n    }\n    return result;\n};\n\nconst forceMatrix = (before: World, after: World, dt: number, world: World): number[] => {\n    const result = [...Array(world.bots.length * 3)].map(() => 0);\n    world.bots.forEach((bot, i) => {\n        for (let j = 0; j < 3; ++j) {\n            const v1 = (world.bots[i].pos[j] - before.bots[i].pos[j]) / dt;\n            const v2 = (after.bots[i].pos[j] - world.bots[i].pos[j]) / dt;\n            const acc = (v2 - v1) / dt;\n            result[3 * i + j] = ((j === 1 ? -1 : 0) - acc) * bot.weight;\n        }\n    });\n    return result;\n};\n\nexport const displacement = (before: World, after: World, dt: number, world: World, con: number[][]): number[] => {\n    const f = forceMatrix(before, after, dt, world);\n    const k = stiffnessMatrix(world, con);\n    return ldiv(k, f);\n};\n\nexport const gradient = (\n    uBefore: number[],\n    u: number[],\n    uAfter: number[],\n    beforeBefore: World,\n    before: World,\n    after: World,\n    afterAfter: World,\n    dt: number,\n    world: World,\n    con: number[][]\n): Vec3.Vec3[] => {\n    const udku = [...Array(world.bots.length)].map(() => [0, 1, 2].map(() => 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const sx = stiffnessDerivative(dim, Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n            Mat3.multiplyScalar(sx, friction);\n            const sy = stiffnessDerivative(dim, Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n            const sz = stiffnessDerivative(dim, Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n            Mat3.multiplyScalar(sz, friction);\n            const vi = Vec3.newVec3(u[3 * i], u[3 * i + 1], u[3 * i + 2]);\n            Mat3.add(sx, sy);\n            Mat3.add(sx, sz);\n            const d = Vec3.dot(vi, Mat3.apply(sx, vi));\n            udku[i][dim] += d;\n            for (let j = i + 1; j < world.bots.length; ++j) {\n                const d = Vec3.dist(world.bots[i].pos, world.bots[j].pos);\n                if (d > offset + slack / 2) continue;\n                if (d > 1.5 && !con[i].includes(j)) continue;\n                const s = stiffnessPairDerivative(world.bots[i], dim, world.bots[j]);\n                const vj = Vec3.newVec3(u[3 * j], u[3 * j + 1], u[3 * j + 2]);\n                Vec3.subEq(vj, vi);\n                const svisvj = Mat3.apply(s, vj);\n                const diff = Vec3.dot(vj, svisvj);\n                udku[i][dim] += diff;\n                udku[j][dim] -= diff;\n            }\n        }\n    }\n    const result = [...Array(world.bots.length)].map(() => Vec3.newVec3(0, 0, 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            result[i][dim] =\n                -udku[i][dim] + 2 * ((-uBefore[3 * i + dim] + 2 * u[3 * i + dim] - uAfter[3 * i + dim]) / dt ** 2);\n        }\n    }\n    const overlapPenalty = 1000;\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].pos[1] > 0.5) continue;\n        const l = world.bots[i].pos[1] + 0.5;\n        result[i][1] += 2 * overlapPenalty * (2 * (l - 2));\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            let d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const l = Vec3.length(d);\n            if (l > 1) continue;\n            d = Vec3.multiplyScalar(d, overlapPenalty * ((2 * (l - 2)) / l));\n            Vec3.subEq(result[i], d);\n            Vec3.addEq(result[j], d);\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        const p1 = Vec3.multiplyScalar(beforeBefore.bots[i].pos, 2);\n        const p2 = Vec3.multiplyScalar(before.bots[i].pos, -8);\n        const p3 = Vec3.multiplyScalar(world.bots[i].pos, 12);\n        const p4 = Vec3.multiplyScalar(after.bots[i].pos, -8);\n        const p5 = Vec3.multiplyScalar(afterAfter.bots[i].pos, 2);\n        Vec3.addEq(p1, p2);\n        Vec3.addEq(p1, p3);\n        Vec3.addEq(p1, p4);\n        Vec3.addEq(p1, p5);\n        Vec3.addEq(result[i], Vec3.multiplyScalar(p1, 100 / dt ** 4));\n    }\n    return result;\n};\n\nexport const connections = (world: World): number[][] => delaunay(world.bots.map(bot => bot.pos));\n","import * as Vec3 from \"./Vec3\";\nimport * as Bot from \"./Bot\";\nimport * as World from \"./World\";\n\nconst average = (start: World.World, end: World.World): World.World => {\n    const result = World.newWorld();\n    result.bots = start.bots.map((b, i) => Bot.average(b, end.bots[i]));\n    return result;\n};\n\nconst gradient = (animation: World.World[], dt: number, connections: number[][][]): Vec3.Vec3[][] => {\n    const result = [...Array(animation.length)].map(() =>\n        [...Array(animation[0].bots.length)].map(() => Vec3.newVec3(0, 0, 0))\n    );\n    const displacements = [...Array(animation.length)].map(() => [...Array(3 * animation[0].bots.length)].map(() => 0));\n    for (let i = 0; i < animation.length; ++i) {\n        const before = animation[Math.max(i - 1, 0)];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        displacements[i] = World.displacement(before, after, dt, animation[i], connections[i]);\n    }\n    for (let i = 1; i < animation.length; ++i) {\n        const beforeBefore = animation[Math.max(i - 2, 0)];\n        const before = animation[i - 1];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        const afterAfter = animation[Math.min(i + 2, animation.length - 1)];\n        result[i] = World.gradient(\n            displacements[i - 1],\n            displacements[i],\n            displacements[Math.min(i + 1, animation.length - 1)],\n            beforeBefore,\n            before,\n            after,\n            afterAfter,\n            dt,\n            animation[i],\n            connections[i]\n        );\n    }\n    return result;\n};\n\nconst optimize = (animation: World.World[], dt: number): void => {\n    const n = 1000;\n    const acc = 0.02;\n    const vel = animation.map(world => world.bots.map(() => Vec3.newVec3(0, 0, 0)));\n    let connections = animation.map(world => World.connections(world));\n    for (let iter = 0; iter < n / animation.length; ++iter) {\n        if (iter > 0 && iter % 10 === 0) connections = animation.map(world => World.connections(world));\n        const y = (iter * animation.length) / n;\n        const x = (1 + y) * animation.length;\n        World.setOffset(1 + 20 / x);\n        let g = gradient(animation, dt, connections);\n        g = g.map(world => world.map(v => Vec3.multiplyScalar(v, -acc / (1e-4 + Vec3.length(v)))));\n        animation.map((world, i) =>\n            world.bots.map((bot, j) => {\n                const target = bot.target(i / (animation.length - 1));\n                if (target !== undefined) {\n                    bot.pos = target;\n                    return;\n                }\n                vel[i][j] = Vec3.add(vel[i][j], g[i][j]);\n                vel[i][j] = Vec3.multiplyScalar(vel[i][j], 0.9);\n                bot.pos = Vec3.add(bot.pos, vel[i][j]);\n            })\n        );\n    }\n};\n\nconst subdivide = (animation: World.World[]): World.World[] => {\n    const result = [...Array(animation.length * 2 - 1)];\n    for (let i = 0; i < animation.length; ++i) result[2 * i] = animation[i];\n    for (let i = 1; i < result.length - 1; i += 2) result[i] = average(result[i - 1], result[i + 1]);\n    return result;\n};\n\nexport const createAnimation = (before: World.World, after: World.World, n: number): World.World[] => {\n    let result = [before, after];\n    let dt = 100;\n    for (let i = 0; i < n; ++i) {\n        dt /= 2;\n        result = subdivide(result);\n        optimize(result, dt);\n    }\n    return result;\n};\n","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D\n} from \"three\";\nimport * as Vec3 from \"./core/Vec3\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const newSphere = (pos: Vec3.Vec3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.position.set(...pos);\n    mesh.scale.set(0.5, 0.5, 0.5);\n    return mesh;\n};\n\nexport const updateCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number) => (cylinder: Mesh): Mesh => {\n    const orientation = new Matrix4();\n    orientation.lookAt(new Vector3(...from), new Vector3(...to), new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    cylinder.setRotationFromMatrix(orientation);\n    cylinder.scale.set(radius, Vec3.length(Vec3.sub(to, from)), radius);\n    const pos = Vec3.multiplyScalar(Vec3.add(from, to), 1 / 2);\n    cylinder.position.set(pos[0], pos[1], pos[2]);\n    return cylinder;\n};\n\nexport const newCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number, color: Color): Mesh => {\n    const edgeGeometry = new CylinderGeometry(1, 1, 1, 8, 1);\n    const cylinder = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    return updateCylinder(from, to, radius)(cylinder);\n};\n","import { Vec3, Bot, World } from \"../core\";\n\nconst n = 20;\n\nconst arc = [Vec3.newVec3(0, 0, 0)];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push(Vec3.newVec3(arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0));\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push(Vec3.newVec3(-arc[i][0], arc[i][1], 0));\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nconst start = [\n    ...[...Array(n + 1)].map((_, i) => Vec3.newVec3(i, 0.5, 0)),\n    ...[...Array(n)].map((_, i) => Vec3.newVec3(-i - 1, 0.5, 0))\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: t => {\n                    if (t > 0.9) return arc[i];\n                },\n                weight: 0.01\n            })\n    )\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Big arc\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst start = [...Array(8)].map((_, i) => [...Array(8)].map((_, j) => Vec3.newVec3(i - 3.5, 0.5, j - 3.5))).flat();\nconst end = [...Array(4)]\n    .map((_, i) => [...Array(4)].map((_, j) => [...Array(4)].map((_, k) => Vec3.newVec3(i - 1.5, k + 0.5, j - 1.5))))\n    .flat()\n    .flat();\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: t => {\n                    if (t > 0.9) return end[i];\n                },\n                weight: 0.01\n            })\n    )\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Big cube\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst start: Vec3.Vec3[] = [\n    [-0.5, 0.5, -0.5],\n    [0.5, 0.5, -0.5],\n    [0.5, 0.5, 0.5],\n    [-0.5, 0.5, 0.5],\n    [-0.5, 1.5, -0.5],\n    [0.5, 1.5, -0.5],\n    [0.5, 1.5, 0.5],\n    [-0.5, 1.5, 0.5],\n    [-0.5, 2.5, -0.5],\n    [0.5, 2.5, -0.5],\n    [0.5, 2.5, 0.5],\n    [-0.5, 2.5, 0.5],\n    [-0.5, 3.5, -0.5],\n    [0.5, 3.5, -0.5],\n    [0.5, 3.5, 0.5],\n    [-0.5, 3.5, 0.5]\n];\nconst end: Vec3.Vec3[] = [\n    [-1.5, 0.5, -1.5],\n    [-0.5, 0.5, -1.5],\n    [0.5, 0.5, -1.5],\n    [1.5, 0.5, -1.5],\n    [-1.5, 0.5, -0.5],\n    [-0.5, 0.5, -0.5],\n    [0.5, 0.5, -0.5],\n    [1.5, 0.5, -0.5],\n    [-1.5, 0.5, 0.5],\n    [-0.5, 0.5, 0.5],\n    [0.5, 0.5, 0.5],\n    [1.5, 0.5, 0.5],\n    [-1.5, 0.5, 1.5],\n    [-0.5, 0.5, 1.5],\n    [0.5, 0.5, 1.5],\n    [1.5, 0.5, 1.5]\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: t => {\n                    if (t > 0.9) return end[i];\n                },\n                weight: 0.01\n            })\n    )\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Cube\",\n    world: world\n};\n\nexport default example;\n","import { Bot, World } from \"../core\";\n\nconst world: World.World = {\n    bots: [\n        ...[...Array(5)].map(\n            (_, i): Bot.Bot =>\n                Bot.newBot({\n                    pos: [i, 0.5, 0],\n                    target: t => {\n                        if (t > 0.9) return [0, 0.5 + i, 0];\n                    },\n                    weight: 0.1\n                })\n        )\n    ]\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Stack\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst start: Vec3.Vec3[] = [\n    [2, 0.5, 0],\n    [2, 1.5, 0],\n    [2, 2.5, 0],\n    [2, 3.5, 0],\n    [2, 4.5, 0],\n    [-2, 0.5, 0],\n    [-2, 1.5, 0],\n    [-2, 2.5, 0],\n    [-2, 3.5, 0],\n    [-2, 4.5, 0],\n    [2, 5.5, 0]\n];\nconst end: Vec3.Vec3[] = [\n    [2, 0.5, 0],\n    [2, 1.5, 0],\n    [2, 2.5, 0],\n    [2, 3.5, 0],\n    [2, 4.5, 0],\n    [-2, 0.5, 0],\n    [-2, 1.5, 0],\n    [-2, 2.5, 0],\n    [-2, 3.5, 0],\n    [-2, 4.5, 0],\n    [-2, 5.5, 0]\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: t => {\n                    if (t > 0.9) return end[i];\n                },\n                weight: 0.02\n            })\n    )\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Towers\",\n    world: world\n};\n\nexport default example;\n","import { Bot, World } from \"../core\";\nimport arc from \"./arc\";\nimport bigArc from \"./bigArc\";\nimport bigCube from \"./bigCube\";\nimport cube from \"./cube\";\nimport stack from \"./stack\";\nimport towers from \"./towers\";\nimport targets from \"./targets\";\n\nexport const examples = [stack, towers, targets, arc, bigArc, cube, bigCube].sort((a, b) => {\n    const d = a.world.bots.length - b.world.bots.length;\n    if (d === 0) return a.title > b.title ? 1 : -1;\n    return d;\n});\n\nexport default (index: number): [World.World, World.World] => [\n    examples[index].world,\n    World.setBots(\n        examples[index].world.bots.map((bot: Bot.Bot) => {\n            return {\n                pos: bot.target !== undefined ? bot.target(1) || bot.pos : bot.pos,\n                target: bot.target,\n                weight: bot.weight\n            };\n        })\n    )(World.newWorld())\n];\n","import { Bot, World } from \"../core\";\n\nconst world: World.World = {\n    bots: [\n        ...[...Array(9)].map((_, i): Bot.Bot => Bot.newBot({ pos: [i, 0.5, 0], weight: 0.001 })),\n        Bot.newBot({\n            pos: [4.5, 0.5, 4],\n            target: t => {\n                if (Math.abs(t - 0.4) < 0.03) return [1, 3.5, 1];\n                if (Math.abs(t - 0.6) < 0.03) return [-1, 3.5, 1];\n                if (Math.abs(t - 0.8) < 0.03) return [-1, 3.5, -1];\n                if (Math.abs(t - 1) < 0.03) return [1, 3.5, -1];\n            }\n        })\n    ]\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Targets\",\n    world: world\n};\n\nexport default example;\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { PerspectiveCamera, WebGLRenderer, Color, Mesh } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem, Button } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { Vec3, World, Animation } from \"./core\";\nimport { newScene, newSphere, newCylinder, updateCylinder } from \"./draw\";\nimport Prando from \"prando\";\nimport loadExample, { examples } from \"./examples\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst saveImage = () => {\n    const canvas = document.getElementsByTagName(\"canvas\")[0];\n    const image = canvas.toDataURL(\"image/png\");\n    const a = document.createElement(\"a\");\n    a.href = image.replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n    a.download = \"image.png\";\n    a.click();\n};\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n    const [time, setTime] = useState(0);\n    const [animate, setAnimate] = useState(false);\n    const [scene, setScene] = useState(newScene());\n    const [botMeshes, setBotMeshes] = useState<Mesh[]>([]);\n    const [groundEdgeMeshes, setGroundEdgeMeshes] = useState<Mesh[]>([]);\n    const [edgeMeshes, setEdgeMeshes] = useState<Mesh[][]>([]);\n    const [animation, setAnimation] = useState<World.World[]>([]);\n    const [worldStart, setWorldStart] = useState<World.World>(World.newWorld());\n    const [worldEnd, setWorldEnd] = useState<World.World>(World.newWorld());\n    const [selectedExample, setSelectedExample] = useState<number | undefined>(undefined);\n\n    const updateWorld = (time: number) => {\n        animation[time].bots.map((bot, i) => {\n            botMeshes[i].position.set(...bot.pos);\n        });\n        animation[time].bots.map((bot, i) => {\n            scene.remove(groundEdgeMeshes[i]);\n            const strength = World.edgeStrength(bot.pos[1] + 0.5);\n            if (strength < 0.01) return;\n            scene.add(groundEdgeMeshes[i]);\n            updateCylinder(\n                bot.pos,\n                Vec3.newVec3(bot.pos[0], 0, bot.pos[2]),\n                Math.sqrt(strength) * 0.3\n            )(groundEdgeMeshes[i]);\n        });\n        animation[time].bots.map((from, i) =>\n            animation[time].bots.map((to, j) => {\n                if (i >= j) return;\n                scene.remove(edgeMeshes[i][j]);\n                const strength = World.edgeStrength(Vec3.length(Vec3.sub(to.pos, from.pos)));\n                if (strength < 0.01) return;\n                scene.add(edgeMeshes[i][j]);\n                updateCylinder(from.pos, to.pos, Math.sqrt(strength) * 0.3)(edgeMeshes[i][j]);\n            })\n        );\n    };\n\n    useEffect(() => {\n        if (animation.length === 0) return;\n        setBotMeshes(\n            animation[0].bots.map(bot =>\n                newSphere(bot.pos, bot.target(1) === undefined ? new Color(0, 0, 1) : new Color(0, 1, 0))\n            )\n        );\n        setGroundEdgeMeshes(\n            animation[0].bots.map(bot =>\n                newCylinder(bot.pos, Vec3.newVec3(bot.pos[0], 0, bot.pos[2]), 1, new Color(1, 0, 0))\n            )\n        );\n        setEdgeMeshes(\n            animation[0].bots.map(a => animation[0].bots.map(b => newCylinder(a.pos, b.pos, 1, new Color(1, 0, 0))))\n        );\n    }, [animation]);\n\n    useEffect(() => {\n        const scn = newScene();\n        botMeshes.map(mesh => scn.add(mesh));\n        groundEdgeMeshes.map(mesh => scn.add(mesh));\n        edgeMeshes.map((row, i) =>\n            row.map((mesh, j) => {\n                if (i >= j) return;\n                scn.add(mesh);\n            })\n        );\n        setScene(scn);\n    }, [botMeshes, groundEdgeMeshes, edgeMeshes]);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && camera && scene) renderer.render(scene, camera);\n    }, [controls, renderer, camera, frame, scene]);\n\n    useEffect(() => {\n        if (botMeshes.length === 0) return;\n        const pauseFrac = 0.1;\n        const pauseFrames = Math.round(pauseFrac * animation.length);\n        let t = time % (2 * (animation.length + pauseFrames));\n        if (t < pauseFrames) {\n            updateWorld(0);\n            return;\n        }\n        t -= pauseFrames;\n        if (t < animation.length) {\n            updateWorld(t);\n            return;\n        }\n        t -= animation.length;\n        if (t < pauseFrames) {\n            updateWorld(animation.length - 1);\n            return;\n        }\n        t -= pauseFrames;\n        updateWorld(animation.length - 1 - t);\n    }, [time, scene]);\n\n    useEffect(() => {\n        if (!animate) return;\n        const t = setInterval(() => setTime(time => time + 1), 10);\n        return () => clearInterval(t);\n    }, [animate]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <b>Microbots</b>\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Select an example</b>\n                                    </ListItem>\n                                </List>\n                                {examples.map((example, i) => (\n                                    <Button\n                                        key={i}\n                                        variant=\"contained\"\n                                        color={selectedExample === i ? \"primary\" : \"default\"}\n                                        onClick={() => {\n                                            const rng = new Prando(123);\n                                            const [ws, we] = loadExample(i);\n                                            console.log(ws, we);\n                                            const rand = () =>\n                                                Vec3.multiplyScalar(\n                                                    Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5),\n                                                    0.0001\n                                                );\n                                            ws.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                                            we.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                                            setWorldStart(ws);\n                                            setWorldEnd(we);\n                                            setAnimation([ws, we]);\n                                            setAnimate(false);\n                                            setSelectedExample(i);\n                                        }}>\n                                        {example.title} ({example.world.bots.length} bots)\n                                    </Button>\n                                ))}\n                                <br />\n                                <br />\n                            </Paper>\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Compute the animation</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button\n                                            variant=\"contained\"\n                                            onClick={() => {\n                                                const t = Date.now();\n                                                setAnimation(Animation.createAnimation(worldStart, worldEnd, 8));\n                                                console.log((Date.now() - t) / 1000);\n                                                setAnimate(true);\n                                            }}>\n                                            Generate animation\n                                        </Button>\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Extra options</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button variant=\"contained\" onClick={() => setTime(time + 1)}>\n                                            Time: {time}\n                                        </Button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button variant=\"contained\" onClick={() => setAnimate(!animate)}>\n                                            Animate: {animate ? \"true\" : \"false\"}\n                                        </Button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button variant=\"contained\" onClick={() => saveImage()}>\n                                            Save screenshot\n                                        </Button>\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}