{"version":3,"sources":["gui/Canvas.tsx","core/Vec3.ts","assets/skyboxes/px.png","assets/skyboxes/nx.png","assets/skyboxes/py.png","assets/skyboxes/ny.png","assets/skyboxes/pz.png","assets/skyboxes/nz.png","assets/grass.jpg","draw.ts","gui/Scene.tsx","core/Mat3.ts","core/utils.ts","core/Bot.ts","core/conjugateGradientSparse.ts","core/delaunay.js","examples/arc.ts","core/World.ts","core/Animation.ts","examples/bigArc.ts","examples/bigCube.ts","examples/crane.ts","examples/cube.ts","examples/floorTransport.ts","examples/frameTransport.ts","examples/stack.ts","examples/towers.ts","examples/transformer.ts","examples/transport.ts","examples/verticalTransport.ts","examples/index.ts","gui/SelectExample.tsx","gui/Static.tsx","gui/Dynamic.tsx","App.tsx","index.tsx"],"names":["Canvas","props","useWindowSize","windowWidth","windowHeight","width","height","mount","useRef","useState","controls","setControls","camera","setCamera","renderer","setRenderer","useEffect","mc","current","cam","PerspectiveCamera","position","set","lookAt","ren","WebGLRenderer","antialias","setClearColor","setSize","shadowMapEnabled","shadowMapType","PCFSoftShadowMap","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","removeChild","scene","i","window","setInterval","update","render","clearInterval","ref","newVec3","x","y","z","clone","a","add","b","addEq","sub","subEq","multiplyScalar","s","dot","length","Math","sqrt","dist","normalize","dir","newScene","Scene","geo","PlaneBufferGeometry","texture_grass","TextureLoader","load","grass","wrapS","RepeatWrapping","wrapT","repeat","mat","MeshPhongMaterial","map","plane","Mesh","rotateX","PI","castShadow","receiveShadow","AmbientLight","light","DirectionalLight","shadowCameraRight","shadowCameraLeft","shadowCameraTop","shadowCameraBottom","shadowMapWidth","shadowMapHeight","materialArray","texture_px","px","texture_nx","nx","texture_py","py","texture_ny","ny","texture_pz","pz","texture_nz","nz","push","MeshBasicMaterial","fog","side","BackSide","skyboxGeo","BoxGeometry","skybox","setScene","botMeshes","setBotMeshes","w","world","undefined","bots","forEach","bot","pos","color","geom","SphereGeometry","computeVertexNormals","faces","face","vertexColors","Array","fill","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","geometry","scale","newSphere","target","Color","scn","j","apply","result","outerProduct","Vec3","newBot","config","vel","weight","findTarget","t","limit","time","average","t1","t2","prev","next","w1","w2","interpolate","dt","p1","p2","p4","p5","v1","v2","v4","v5","t3","epsilon","t12","t13","t23","t24","t34","t35","t1213","t1323","t2324","t2434","t3435","t3545","c","w4","w5","q1","q2","q4","q5","minAcc","addVecMultNum","matMultVec","A","v","conditionVector","sum","floor","ldiv","bCopy","preconditioner","conditionMatrix","r","Ap","p","pOld","rsold","alpha","rsnew","cg","orient","m","Simplex","vertices","adjacent","boundary","this","lastVisited","GlueFacet","cell","index","Triangulation","simplices","interior","filter","tuple","LiftedPoint","point","triangulate","points","n","lifted","upper","l","max","sort","dpoints","dindex","u","slice","h","hull","randomSearch","Error","d","initialSimplex","o","initialCoords","initialCell","list","verts","adj","k","indexOf","triangles","useRandom","insert","incrementalConvexHull","prototype","flip","handleBoundaryDegeneracy","toVisit","cellAdj","pop","neighbor","nv","vv","walk","random","initIndex","outerLoop","cellVerts","addPeaks","tovisit","glueFacets","indexOfN","indexOfNeg1","na","vverts","vadj","ncell","opposite","uu","nface","nptr","l1","m1","l0","min","m0","compareCells","ai","bi","cells","nc","bcell","cv","ptr","parity","newWorld","setBots","offset","slack","setSlack","setOffset","edgeStrength","edgeStrengthGround","stiffness","stiffnessGround","Mat3","stiffnessDerivative","dim","val","dPlus","dMinus","plus","stiffnessMatrix","con","neigh","sx","sy","sz","stiffnessPair","displacement","before","after","f","acc","forceMatrix","neighbors","gradient","uBefore","uAfter","beforeBefore","afterAfter","udku","vi","stiffnessPairDerivative","vj","svisvj","diff","dest","Bot","rng","Prando","connections","tri","Object","keys","key","Number","delaunay","averageWeight","start","end","World","avgWeight","optimize","animation","maxIter","_","iter","g","displacements","contract","some","hD","hDistSqr","vDist","validConnections","isValidConnection","dLength","createAnimation","tooFast","now","maxAcc","resultPrev","tf","console","log","minimizeAcceleration","resolveOverlap","arc","angle","cos","sin","example","title","flat","abs","frame","pillar","space","examples","bigArc","bigCube","crane","cube","floorTransport","frameTransport","stack","towers","transformer","SelectExample","selectedExample","setSelectedExample","Button","variant","onClick","ws","we","rand","onSelect","Static","setTime","pause","setPause","setAnimation","pauseFrames","round","setWorld","List","ListItem","worldStart","worldEnd","Date","Animation","Dynamic","path","setPath","step","worldPrev","reduce","value","setWorldPrev","$set","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","App","classes","setWorldStart","setWorldEnd","dynamic","setDynamic","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","direction","fontSize","className","FormControlLabel","control","Switch","checked","onChange","e","label","image","document","getElementsByTagName","toDataURL","createElement","href","replace","download","click","saveImage","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.1e104f8f.chunk.js","sourcesContent":["import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { PerspectiveCamera, WebGLRenderer, PCFSoftShadowMap } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { Scene } from \"three\";\n\ntype Props = { scene: Scene };\n\nconst Canvas: FC<Props> = props => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#87ceeb\");\n        ren.setSize(width, height);\n        ren.shadowMapEnabled = true;\n        ren.shadowMapType = PCFSoftShadowMap;\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n\n        return () => {\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (!controls || !renderer || !camera || !props.scene) return;\n        const i = window.setInterval(() => {\n            controls.update();\n            renderer.render(props.scene, camera);\n        }, 1000 / 30);\n        return () => {\n            window.clearInterval(i);\n        };\n    }, [controls, renderer, camera, props.scene]);\n\n    return <div ref={mount} />;\n};\n\nexport default Canvas;\n","export type Vec3 = [number, number, number];\n\nexport const newVec3 = (x: number, y: number, z: number): Vec3 => [x, y, z];\n\nexport const clone = (a: Vec3): Vec3 => [a[0], a[1], a[2]];\n\nexport const add = (a: Vec3, b: Vec3): Vec3 => [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n\nexport const addEq = (a: Vec3, b: Vec3): void => {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n};\n\nexport const sub = (a: Vec3, b: Vec3): Vec3 => [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n\nexport const subEq = (a: Vec3, b: Vec3): void => {\n    a[0] -= b[0];\n    a[1] -= b[1];\n    a[2] -= b[2];\n};\n\nexport const multiplyScalar = (a: Vec3, s: number): Vec3 => [a[0] * s, a[1] * s, a[2] * s];\n\nexport const dot = (a: Vec3, b: Vec3): number => a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\nexport const length = (a: Vec3): number => Math.sqrt(dot(a, a));\n\nexport const dist = (a: Vec3, b: Vec3): number => length(sub(a, b));\n\nexport const normalize = (a: Vec3): Vec3 => multiplyScalar(a, 1 / length(a));\n\nexport const dir = (a: Vec3, b: Vec3): Vec3 => normalize(sub(a, b));\n","export default __webpack_public_path__ + \"static/media/px.c6e24cee.png\";","export default __webpack_public_path__ + \"static/media/nx.484e0aff.png\";","export default __webpack_public_path__ + \"static/media/py.a67deb40.png\";","export default __webpack_public_path__ + \"static/media/ny.6a6662a7.png\";","export default __webpack_public_path__ + \"static/media/pz.39034444.png\";","export default __webpack_public_path__ + \"static/media/nz.ed736547.png\";","export default __webpack_public_path__ + \"static/media/grass.75422b3f.jpg\";","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D,\n    TextureLoader,\n    MeshBasicMaterial,\n    BackSide,\n    BoxGeometry,\n    PlaneBufferGeometry,\n    RepeatWrapping\n} from \"three\";\nimport * as Vec3 from \"./core/Vec3\";\n\nimport px from \"./assets/skyboxes/px.png\";\nimport nx from \"./assets/skyboxes/nx.png\";\nimport py from \"./assets/skyboxes/py.png\";\nimport ny from \"./assets/skyboxes/ny.png\";\nimport pz from \"./assets/skyboxes/pz.png\";\nimport nz from \"./assets/skyboxes/nz.png\";\nimport grass from \"./assets/grass.jpg\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n\n    const geo = new PlaneBufferGeometry(2000, 2000, 8, 8);\n    const texture_grass = new TextureLoader().load(grass);\n    texture_grass.wrapS = RepeatWrapping;\n    texture_grass.wrapT = RepeatWrapping;\n    texture_grass.repeat.set(100, 100);\n    const mat = new MeshPhongMaterial({ map: texture_grass });\n    const plane = new Mesh(geo, mat);\n    plane.rotateX(-Math.PI / 2);\n    plane.castShadow = false;\n    plane.receiveShadow = true;\n    scene.add(plane);\n\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(10, 50, 10);\n    light.castShadow = true;\n    light.shadowCameraRight = 50;\n    light.shadowCameraLeft = -50;\n    light.shadowCameraTop = 50;\n    light.shadowCameraBottom = -50;\n    light.shadowMapWidth = 1024;\n    light.shadowMapHeight = 1024;\n    scene.add(light);\n\n    const materialArray = [];\n    const texture_px = new TextureLoader().load(px);\n    const texture_nx = new TextureLoader().load(nx);\n    const texture_py = new TextureLoader().load(py);\n    const texture_ny = new TextureLoader().load(ny);\n    const texture_pz = new TextureLoader().load(pz);\n    const texture_nz = new TextureLoader().load(nz);\n\n    materialArray.push(new MeshBasicMaterial({ map: texture_px, fog: false }));\n    materialArray.push(new MeshBasicMaterial({ map: texture_nx, fog: false }));\n    materialArray.push(new MeshBasicMaterial({ map: texture_py, fog: false }));\n    materialArray.push(new MeshBasicMaterial({ map: texture_ny, fog: false }));\n    materialArray.push(new MeshBasicMaterial({ map: texture_pz, fog: false }));\n    materialArray.push(new MeshBasicMaterial({ map: texture_nz, fog: false }));\n\n    for (let i = 0; i < 6; i++) materialArray[i].side = BackSide;\n    const skyboxGeo = new BoxGeometry(1000, 1000, 1000);\n    const skybox = new Mesh(skyboxGeo, materialArray);\n    scene.add(skybox);\n\n    return scene;\n};\n\nexport const newSphere = (pos: Vec3.Vec3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.position.set(...pos);\n    mesh.scale.set(0.5, 0.5, 0.5);\n    mesh.castShadow = true;\n    mesh.receiveShadow = true;\n    return mesh;\n};\n\nexport const updateCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number) => (cylinder: Mesh): Mesh => {\n    const orientation = new Matrix4();\n    orientation.lookAt(new Vector3(...from), new Vector3(...to), new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    cylinder.setRotationFromMatrix(orientation);\n    cylinder.scale.set(radius, Vec3.length(Vec3.sub(to, from)), radius);\n    const pos = Vec3.multiplyScalar(Vec3.add(from, to), 1 / 2);\n    cylinder.position.set(pos[0], pos[1], pos[2]);\n    return cylinder;\n};\n\nexport const newCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number, color: Color): Mesh => {\n    const edgeGeometry = new CylinderGeometry(1, 1, 1, 8, 1);\n    const cylinder = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    return updateCylinder(from, to, radius)(cylinder);\n};\n","import React, { FC, useEffect, useState } from \"react\";\nimport { Color, Mesh } from \"three\";\nimport { World } from \"../core\";\nimport { newScene, newSphere } from \"../draw\";\nimport { Canvas } from \"../gui\";\n\ntype Props = { world: World.World | undefined };\n\nconst Scene: FC<Props> = props => {\n    const [scene, setScene] = useState(newScene());\n    const [botMeshes, setBotMeshes] = useState<Mesh[]>([]);\n\n    useEffect(() => {\n        const w = props.world;\n        if (w === undefined) return;\n        if (botMeshes.length !== w.bots.length) return;\n        w.bots.forEach((bot, i) => {\n            botMeshes[i].position.set(...bot.pos);\n        });\n    }, [props.world, botMeshes]);\n\n    useEffect(() => {\n        const w = props.world;\n        if (w === undefined) return;\n        if (botMeshes.length === w.bots.length) return;\n        setBotMeshes(\n            w.bots.map(bot =>\n                newSphere(bot.pos, bot.target === undefined ? new Color(\"#0000ff\") : new Color(\"#fa8072\"))\n            )\n        );\n    }, [props.world, botMeshes]);\n\n    useEffect(() => {\n        const scn = newScene();\n\n        botMeshes.forEach(mesh => scn.add(mesh));\n        setScene(scn);\n    }, [botMeshes]);\n\n    return <Canvas scene={scene} />;\n};\n\nexport default Scene;\n","import * as Vec3 from \"./Vec3\";\n\nexport type Mat3 = [Vec3.Vec3, Vec3.Vec3, Vec3.Vec3];\n\nexport const newMat3 = (x: Vec3.Vec3, y: Vec3.Vec3, z: Vec3.Vec3): Mat3 => [x, y, z];\n\nexport const add = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] += b[i][j];\n        }\n    }\n};\n\nexport const sub = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] -= b[i][j];\n        }\n    }\n};\n\nexport const multiplyScalar = (a: Mat3, s: number): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] *= s;\n        }\n    }\n};\n\nexport const apply = (a: Mat3, b: Vec3.Vec3): Vec3.Vec3 => {\n    const result: Vec3.Vec3 = [0, 0, 0];\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            result[i] += a[i][j] * b[j];\n        }\n    }\n    return result;\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\n\nexport type Spacetime = {\n    pos: Vec3.Vec3;\n    time: number;\n};\n\nconst throwError = () => {\n    throw new Error(\"Vectors need to be the same length\");\n};\n\nexport const dot = (a: number[], b: number[]): number => {\n    if (a.length !== b.length) throwError();\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) result += a[i] * b[i];\n    return result;\n};\n\nexport const outerProduct = (a: Vec3.Vec3, b: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.newMat3(\n        Vec3.newVec3(a[0] * b[0], a[0] * b[1], a[0] * b[2]),\n        Vec3.newVec3(a[1] * b[0], a[1] * b[1], a[1] * b[2]),\n        Vec3.newVec3(a[2] * b[0], a[2] * b[1], a[2] * b[2])\n    );\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n\nexport const minAcc = (v1: Spacetime, v2: Spacetime, v4: Spacetime, v5: Spacetime, t3: number): Vec3.Vec3 => {\n    const epsilon = 1e-10;\n    const t12 = v2.time - v1.time;\n    const t13 = t3 - v1.time;\n    const t23 = t3 - v2.time;\n    const t24 = v4.time - v2.time;\n    const t34 = v4.time - t3;\n    const t35 = v5.time - t3;\n    const t45 = v5.time - v4.time;\n    const t1213 = t12 * t13 + epsilon;\n    const t1323 = t13 * t23 + epsilon;\n    const t2324 = t23 * t24 + epsilon;\n    const t2434 = t24 * t34 + epsilon;\n    const t3435 = t34 * t35 + epsilon;\n    const t3545 = t35 * t45 + epsilon;\n    const c = 1 / (t2434 * t2324);\n    const a = c + 1 / t1323 ** 2 + 1 / t2324 ** 2;\n    const b = c + 1 / t2434 ** 2 + 1 / t3435 ** 2;\n    const w1 = -1 / (t1213 * t1323 * (a + b));\n    const w2 = (a + 1 / (t1213 * t1323)) / (a + b);\n    const w4 = (b + 1 / (t3435 * t3545)) / (a + b);\n    const w5 = -1 / (t3435 * t3545 * (a + b));\n    const q1 = Vec3.multiplyScalar(v1.pos, w1);\n    const q2 = Vec3.multiplyScalar(v2.pos, w2);\n    const q4 = Vec3.multiplyScalar(v4.pos, w4);\n    const q5 = Vec3.multiplyScalar(v5.pos, w5);\n    const p3 = Vec3.add(Vec3.add(Vec3.add(q1, q2), q4), q5);\n    return p3;\n};\n","import * as Vec3 from \"./Vec3\";\nimport { Spacetime, minAcc } from \"./utils\";\n\ntype Target = Vec3.Vec3 | undefined;\n\nexport type Bot = {\n    pos: Vec3.Vec3;\n    vel: Vec3.Vec3;\n    target: Target;\n    weight: number;\n};\n\nexport const newBot = (config: { pos?: Vec3.Vec3; vel?: Vec3.Vec3; target?: Target; weight?: number }): Bot => ({\n    pos: config.pos || Vec3.newVec3(0, 0, 0),\n    vel: config.vel || Vec3.newVec3(0, 0, 0),\n    target: config.target,\n    weight: config.weight || 1\n});\n\nconst findTarget = (bot: Bot, t: number, limit: Spacetime): Spacetime => {\n    const dir = limit.time > t ? 1 : -1;\n    const dt = 0.01;\n    let target, time;\n    for (time = t; (limit.time - time) * dir <= 0; time += dt * dir) {\n        target = bot.target;\n        if (target !== undefined) return { pos: target, time: time };\n    }\n    return limit;\n};\n\nexport const average = (a: Bot, b: Bot, t1: number, t2: number): Bot => {\n    const t = (t1 + t2) / 2;\n    const prev = findTarget(a, t, { pos: a.pos, time: t1 });\n    const next = findTarget(a, t, { pos: b.pos, time: t2 });\n    if (next.time - prev.time < 1e-10) return newBot({ ...a, pos: next.pos });\n    const w1 = (next.time - t) / (next.time - prev.time);\n    const w2 = (t - prev.time) / (next.time - prev.time);\n    const pos = Vec3.add(Vec3.multiplyScalar(prev.pos, w1), Vec3.multiplyScalar(next.pos, w2));\n    return { ...a, pos: pos };\n};\n\nexport const interpolate = (\n    bot: Bot,\n    t: number,\n    dt: number,\n    p1: Vec3.Vec3,\n    p2: Vec3.Vec3,\n    p4: Vec3.Vec3,\n    p5: Vec3.Vec3\n): Vec3.Vec3 => {\n    const prev = findTarget(bot, t, { pos: p1, time: t - 2 * dt });\n    const next = findTarget(bot, t, { pos: p5, time: t + 2 * dt });\n    if (next.time - prev.time < 1e-10) return next.pos;\n    p1 = prev.pos;\n    p5 = next.pos;\n    if (prev.time > t - dt) p2 = prev.pos;\n    if (next.time < t + dt) p4 = next.pos;\n    return minAcc(\n        { pos: p1, time: t - 2 * dt },\n        { pos: p2, time: t - dt },\n        { pos: p4, time: t + dt },\n        { pos: p5, time: t + 2 * dt },\n        t\n    );\n};\n","export type SparseSymmetric = [number, number][][];\n\nconst clone = (a: number[], result: number[]): void => {\n    for (let i = 0; i < a.length; ++i) result[i] = a[i];\n};\n\nconst dot = (a: number[], b: number[]): number => {\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) {\n        result += a[i] * b[i];\n    }\n    return result;\n};\n\nconst addVecMultNum = (a: number[], b: number[], c: number): void => {\n    for (let i = 0; i < a.length; ++i) a[i] += b[i] * c;\n};\n\nconst matMultVec = (A: SparseSymmetric, b: number[], result: number[]): void => {\n    for (let i = 0; i < result.length; ++i) result[i] = 0;\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            const v = A[i][c][1];\n            result[i] += v * b[j];\n            if (i === j) continue;\n            result[j] += v * b[i];\n        }\n    }\n};\n\nconst cg = (A: SparseSymmetric, b: number[]): number[] => {\n    const x = Array(b.length).fill(0);\n    const r = Array(b.length);\n    clone(b, r);\n    const Ap = Array(b.length);\n    matMultVec(A, x, Ap);\n    addVecMultNum(r, Ap, -1);\n    const p = Array(r.length);\n    const pOld = Array(p.length);\n    clone(r, p);\n    let rsold = dot(r, r);\n    for (let i = 0; i < 20; ++i) {\n        matMultVec(A, p, Ap);\n        const alpha = rsold / dot(p, Ap);\n        addVecMultNum(x, p, alpha);\n        addVecMultNum(r, Ap, -alpha);\n        const rsnew = dot(r, r);\n        clone(p, pOld);\n        clone(r, p);\n        addVecMultNum(p, pOld, rsnew / rsold);\n        rsold = rsnew;\n    }\n    return x;\n};\n\nconst preconditioner = (A: SparseSymmetric, b: number[]): number[] => {\n    const sum = Array(b.length / 3).fill(0);\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const [j, v] = A[i][c];\n            if (Math.floor(i / 3) !== Math.floor(j / 3)) continue;\n            sum[Math.floor(i / 3)] += v;\n            if (i === j) continue;\n            sum[Math.floor(j / 3)] += v;\n        }\n    }\n    for (let i = 0; i < sum.length; ++i) sum[i] = Math.sqrt(Math.sqrt(3 / sum[i]));\n    return sum;\n};\n\nconst conditionMatrix = (sum: number[], A: SparseSymmetric): void => {\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            A[i][c][1] *= sum[Math.floor(i / 3)];\n            A[i][c][1] *= sum[Math.floor(j / 3)];\n        }\n    }\n};\n\nconst conditionVector = (sum: number[], b: number[]): void => {\n    for (let i = 0; i < b.length; ++i) {\n        b[i] *= sum[Math.floor(i / 3)];\n    }\n};\n\nexport const ldiv = (A: SparseSymmetric, b: number[]): number[] => {\n    const bCopy = Array(b.length);\n    clone(b, bCopy);\n    const sum = preconditioner(A, bCopy);\n    conditionMatrix(sum, A);\n    conditionVector(sum, bCopy);\n    const x = cg(A, bCopy);\n    conditionVector(sum, x);\n    return x;\n};\n","const orient = m =>\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[2][2] +\n        (m[2][1] * m[4][0] - m[4][1] * m[2][0]) * -m[3][2] +\n        (m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[4][2]) *\n        m[1][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[3][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[4][2]) *\n        -m[2][3] +\n    ((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[2][2] +\n        (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[4][2]) *\n        m[3][3] +\n    ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[1][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * -m[2][2] +\n        (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[3][2]) *\n        -m[4][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[1][2] +\n        (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[3][2] +\n        (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[4][2]) *\n        m[0][3] +\n    ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[0][2] +\n        (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[3][2] +\n        (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * m[4][2]) *\n        -m[1][3] +\n    (((m[1][1] * m[4][0] - m[4][1] * m[1][0]) * m[0][2] +\n        (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[1][2] +\n        (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[4][2]) *\n        m[3][3] +\n        ((m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[3][2]) *\n            -m[4][3] +\n        ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[1][2] +\n            (m[1][1] * m[3][0] - m[3][1] * m[1][0]) * -m[2][2] +\n            (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[3][2]) *\n            m[0][3] +\n        ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[2][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[3][2]) *\n            -m[1][3] +\n        ((m[1][1] * m[3][0] - m[3][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[3][2]) *\n            m[2][3] +\n        ((m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[0][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * -m[1][2] +\n            (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[2][2]) *\n            -m[3][3]) -\n    (((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[2][2] +\n        (m[2][1] * m[4][0] - m[4][1] * m[2][0]) * -m[3][2] +\n        (m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[4][2]) *\n        m[0][3] +\n        ((m[3][1] * m[4][0] - m[4][1] * m[3][0]) * m[0][2] +\n            (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[3][2] +\n            (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * m[4][2]) *\n            -m[2][3] +\n        (((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[0][2] +\n            (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[2][2] +\n            (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[4][2]) *\n            m[3][3] +\n            ((m[2][1] * m[3][0] - m[3][1] * m[2][0]) * m[0][2] +\n                (m[0][1] * m[3][0] - m[3][1] * m[0][0]) * -m[2][2] +\n                (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[3][2]) *\n                -m[4][3]) +\n        (((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[1][2] +\n            (m[1][1] * m[4][0] - m[4][1] * m[1][0]) * -m[2][2] +\n            (m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[4][2]) *\n            m[0][3] +\n            ((m[2][1] * m[4][0] - m[4][1] * m[2][0]) * m[0][2] +\n                (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[2][2] +\n                (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * m[4][2]) *\n                -m[1][3] +\n            (((m[1][1] * m[4][0] - m[4][1] * m[1][0]) * m[0][2] +\n                (m[0][1] * m[4][0] - m[4][1] * m[0][0]) * -m[1][2] +\n                (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[4][2]) *\n                m[2][3] +\n                ((m[1][1] * m[2][0] - m[2][1] * m[1][0]) * m[0][2] +\n                    (m[0][1] * m[2][0] - m[2][1] * m[0][0]) * -m[1][2] +\n                    (m[0][1] * m[1][0] - m[1][1] * m[0][0]) * m[2][2]) *\n                    -m[4][3])));\n\n//Ranks a pair of cells up to permutation\nfunction compareCells(a, b) {\n    const l1 = a[0] + a[1];\n    const m1 = b[0] + b[1];\n    let d = l1 + a[2] - (m1 + b[2]);\n    if (d) return d;\n    const l0 = Math.min(a[0], a[1]);\n    const m0 = Math.min(b[0], b[1]);\n    d = Math.min(l0, a[2]) - Math.min(m0, b[2]);\n    if (d) return d;\n    return Math.min(l0 + a[2], l1) - Math.min(m0 + b[2], m1);\n}\n\nfunction Simplex(vertices, adjacent, boundary) {\n    this.vertices = vertices;\n    this.adjacent = adjacent;\n    this.boundary = boundary;\n    this.lastVisited = -1;\n}\n\nSimplex.prototype.flip = function () {\n    const t = this.vertices[0];\n    this.vertices[0] = this.vertices[1];\n    this.vertices[1] = t;\n    const u = this.adjacent[0];\n    this.adjacent[0] = this.adjacent[1];\n    this.adjacent[1] = u;\n};\n\nfunction GlueFacet(vertices, cell, index) {\n    this.vertices = vertices;\n    this.cell = cell;\n    this.index = index;\n}\n\nfunction Triangulation(vertices, simplices) {\n    this.vertices = vertices;\n    this.simplices = simplices;\n    this.interior = simplices.filter(c => !c.boundary);\n    this.tuple = [...this.vertices];\n    this.orient = () => orient(this.tuple);\n}\n\n//Degenerate situation where we are on boundary, but coplanar to face\nTriangulation.prototype.handleBoundaryDegeneracy = function (cell, point) {\n    const d = 4;\n    const n = this.vertices.length - 1;\n    const tuple = this.tuple;\n    const verts = this.vertices;\n\n    //Dumb solution: Just do dfs from boundary cell until we find any peak, or terminate\n    const toVisit = [cell];\n    cell.lastVisited = -n;\n    while (toVisit.length > 0) {\n        cell = toVisit.pop();\n        const cellAdj = cell.adjacent;\n        for (let i = 0; i <= d; ++i) {\n            const neighbor = cellAdj[i];\n            if (!neighbor.boundary || neighbor.lastVisited <= -n) continue;\n            const nv = neighbor.vertices;\n            for (let j = 0; j <= d; ++j) {\n                const vv = nv[j];\n                if (vv < 0) tuple[j] = point;\n                else tuple[j] = verts[vv];\n            }\n            const o = this.orient();\n            if (o > 0) return neighbor;\n            neighbor.lastVisited = -n;\n            if (o === 0) toVisit.push(neighbor);\n        }\n    }\n    return null;\n};\n\nTriangulation.prototype.walk = function (point, random) {\n    //Alias local properties\n    const n = this.vertices.length - 1;\n    const verts = this.vertices;\n    const tuple = this.tuple;\n\n    //Compute initial jump cell\n    const initIndex = random ? (this.interior.length * Math.random()) | 0 : this.interior.length - 1;\n    let cell = this.interior[initIndex];\n\n    //Start walking\n    outerLoop: while (!cell.boundary) {\n        const cellVerts = cell.vertices;\n        const cellAdj = cell.adjacent;\n\n        for (let i = 0; i <= 4; ++i) {\n            tuple[i] = verts[cellVerts[i]];\n        }\n        cell.lastVisited = n;\n\n        //Find farthest adjacent cell\n        for (let i = 0; i <= 4; ++i) {\n            const neighbor = cellAdj[i];\n            if (neighbor.lastVisited >= n) continue;\n            const prev = tuple[i];\n            tuple[i] = point;\n            const o = this.orient();\n            tuple[i] = prev;\n            if (o < 0) {\n                cell = neighbor;\n                continue outerLoop;\n            }\n            if (!neighbor.boundary) neighbor.lastVisited = n;\n            else neighbor.lastVisited = -n;\n        }\n        return;\n    }\n\n    return cell;\n};\n\nTriangulation.prototype.addPeaks = function (point, cell) {\n    const n = this.vertices.length - 1;\n    const verts = this.vertices;\n    const tuple = this.tuple;\n    const interior = this.interior;\n    const simplices = this.simplices;\n\n    //Walking finished at boundary, time to add peaks\n    const tovisit = [cell];\n\n    //Stretch initial boundary cell into a peak\n    cell.lastVisited = n;\n    cell.vertices[cell.vertices.indexOf(-1)] = n;\n    cell.boundary = false;\n    interior.push(cell);\n\n    //Record a list of all new boundaries created by added peaks so we can glue them together when we are all done\n    const glueFacets = [];\n\n    //Do a traversal of the boundary walking outward from starting peak\n    while (tovisit.length > 0) {\n        //Pop off peak and walk over adjacent cells\n        cell = tovisit.pop();\n        const cellVerts = cell.vertices;\n        const cellAdj = cell.adjacent;\n        const indexOfN = cellVerts.indexOf(n);\n        if (indexOfN < 0) continue;\n\n        for (let i = 0; i <= 4; ++i) {\n            if (i === indexOfN) continue;\n\n            //For each boundary neighbor of the cell\n            const neighbor = cellAdj[i];\n            if (!neighbor.boundary || neighbor.lastVisited >= n) continue;\n\n            const nv = neighbor.vertices;\n\n            //Test if neighbor is a peak\n            if (neighbor.lastVisited !== -n) {\n                //Compute orientation of p relative to each boundary peak\n                let indexOfNeg1 = 0;\n                for (let j = 0; j <= 4; ++j) {\n                    if (nv[j] < 0) {\n                        indexOfNeg1 = j;\n                        tuple[j] = point;\n                    } else tuple[j] = verts[nv[j]];\n                }\n                const o = this.orient();\n\n                //Test if neighbor cell is also a peak\n                if (o > 0) {\n                    nv[indexOfNeg1] = n;\n                    neighbor.boundary = false;\n                    interior.push(neighbor);\n                    tovisit.push(neighbor);\n                    neighbor.lastVisited = n;\n                    continue;\n                }\n                neighbor.lastVisited = -n;\n            }\n\n            const na = neighbor.adjacent;\n\n            //Otherwise, replace neighbor with new face\n            const vverts = cellVerts.slice();\n            const vadj = cellAdj.slice();\n            const ncell = new Simplex(vverts, vadj, true);\n            simplices.push(ncell);\n\n            //Connect to neighbor\n            const opposite = na.indexOf(cell);\n            if (opposite < 0) continue;\n\n            na[opposite] = ncell;\n            vadj[indexOfN] = neighbor;\n\n            //Connect to cell\n            vverts[i] = -1;\n            vadj[i] = cell;\n            cellAdj[i] = ncell;\n\n            //Flip facet\n            ncell.flip();\n\n            //Add to glue list\n            for (let j = 0; j <= 4; ++j) {\n                const uu = vverts[j];\n                if (uu < 0 || uu === n) continue;\n                let nface = new Array(3);\n                let nptr = 0;\n                for (let k = 0; k <= 4; ++k) {\n                    const vv = vverts[k];\n                    if (vv < 0 || k === j) continue;\n                    nface[nptr++] = vv;\n                }\n                glueFacets.push(new GlueFacet(nface, ncell, j));\n            }\n        }\n    }\n\n    //Glue boundary facets together\n    glueFacets.sort((a, b) => compareCells(a.vertices, b.vertices));\n\n    for (let i = 0; i + 1 < glueFacets.length; i += 2) {\n        const a = glueFacets[i];\n        const b = glueFacets[i + 1];\n        const ai = a.index;\n        const bi = b.index;\n        if (ai < 0 || bi < 0) continue;\n        a.cell.adjacent[a.index] = b.cell;\n        b.cell.adjacent[b.index] = a.cell;\n    }\n};\n\nTriangulation.prototype.insert = function (point, random) {\n    //Add point\n    const verts = this.vertices;\n    verts.push(point);\n\n    let cell = this.walk(point, random);\n    if (!cell) return;\n\n    //Alias local properties\n    const tuple = this.tuple;\n\n    //Degenerate case: If point is coplanar to cell, then walk until we find a non-degenerate boundary\n    for (let i = 0; i <= 4; ++i) {\n        const vv = cell.vertices[i];\n        if (vv < 0) tuple[i] = point;\n        else tuple[i] = verts[vv];\n    }\n    const o = this.orient(tuple);\n    if (o < 0) return;\n    if (o === 0) {\n        cell = this.handleBoundaryDegeneracy(cell, point);\n        if (!cell) return;\n    }\n\n    //Add peaks\n    this.addPeaks(point, cell);\n};\n\n//Extract all boundary cells\nTriangulation.prototype.boundary = function () {\n    const d = 4;\n    const boundary = [];\n    const cells = this.simplices;\n    const nc = cells.length;\n    for (let i = 0; i < nc; ++i) {\n        const c = cells[i];\n        if (c.boundary) {\n            const bcell = new Array(d);\n            const cv = c.vertices;\n            let ptr = 0;\n            let parity = 0;\n            for (let j = 0; j <= d; ++j) {\n                if (cv[j] >= 0) {\n                    bcell[ptr++] = cv[j];\n                } else {\n                    parity = j & 1;\n                }\n            }\n            if (parity === (d & 1)) {\n                const t = bcell[0];\n                bcell[0] = bcell[1];\n                bcell[1] = t;\n            }\n            boundary.push(bcell);\n        }\n    }\n    return boundary;\n};\n\nfunction incrementalConvexHull(points, randomSearch) {\n    const n = points.length;\n    if (n === 0) {\n        throw new Error(\"Must have at least d+1 points\");\n    }\n    const d = points[0].length;\n    if (n <= d) {\n        throw new Error(\"Must input at least d+1 points\");\n    }\n\n    //FIXME: This could be degenerate, but need to select d+1 non-coplanar points to bootstrap process\n    const initialSimplex = points.slice(0, d + 1);\n\n    //Make sure initial simplex is positively oriented\n    const o = orient(initialSimplex);\n    if (o === 0) {\n        throw new Error(\"Input not in general position\");\n    }\n    const initialCoords = new Array(d + 1);\n    for (let i = 0; i <= d; ++i) {\n        initialCoords[i] = i;\n    }\n    if (o < 0) {\n        initialCoords[0] = 1;\n        initialCoords[1] = 0;\n    }\n\n    //Create initial topological index, glue pointers together (kind of messy)\n    const initialCell = new Simplex(initialCoords, new Array(d + 1), false);\n    const boundary = initialCell.adjacent;\n    const list = new Array(d + 2);\n    for (let i = 0; i <= d; ++i) {\n        const verts = initialCoords.slice();\n        for (let j = 0; j <= d; ++j) {\n            if (j === i) verts[j] = -1;\n        }\n        const t = verts[0];\n        verts[0] = verts[1];\n        verts[1] = t;\n        const cell = new Simplex(verts, new Array(d + 1), true);\n        boundary[i] = cell;\n        list[i] = cell;\n    }\n    list[d + 1] = initialCell;\n    for (let i = 0; i <= d; ++i) {\n        const verts = boundary[i].vertices;\n        const adj = boundary[i].adjacent;\n        for (let j = 0; j <= d; ++j) {\n            const v = verts[j];\n            if (v < 0) {\n                adj[j] = initialCell;\n                continue;\n            }\n            for (let k = 0; k <= d; ++k) {\n                if (boundary[k].vertices.indexOf(v) < 0) {\n                    adj[j] = boundary[k];\n                }\n            }\n        }\n    }\n\n    //Initialize triangles\n    const triangles = new Triangulation(initialSimplex, list);\n\n    //Insert remaining points\n    const useRandom = !!randomSearch;\n    for (let i = d + 1; i < n; ++i) {\n        triangles.insert(points[i], useRandom);\n    }\n\n    //Extract boundary cells\n    return triangles.boundary();\n}\n\nfunction LiftedPoint(p, i) {\n    this.point = p;\n    this.index = i;\n}\n\nfunction triangulate(points) {\n    let n = points.length;\n    if (n === 0) return [];\n\n    //Lift points, sort\n    const lifted = new Array(n);\n    let upper = 1.0;\n    for (let i = 0; i < n; ++i) {\n        const p = points[i];\n        const x = new Array(3 + 1);\n        let l = 0.0;\n        for (let j = 0; j < 3; ++j) {\n            const v = p[j];\n            x[j] = v;\n            l += v * v;\n        }\n        x[3] = l;\n        lifted[i] = new LiftedPoint(x, i);\n        upper = Math.max(l, upper);\n    }\n    lifted.sort((a, b) => {\n        for (let i = 0; i < 5; ++i) {\n            const s = b.point[i] - a.point[i];\n            if (s) return s;\n        }\n        return 0;\n    });\n\n    //Double points\n    n = lifted.length;\n\n    //Create new list of points\n    const dpoints = new Array(n + 3 + 1);\n    const dindex = new Array(n + 3 + 1);\n\n    //Add steiner points at top\n    const u = (3 + 1) * (3 + 1) * upper;\n    const y = new Array(3 + 1);\n    for (let i = 0; i <= 3; ++i) {\n        y[i] = 0.0;\n    }\n    y[3] = u;\n\n    dpoints[0] = y.slice();\n    dindex[0] = -1;\n\n    for (let i = 0; i <= 3; ++i) {\n        const x = y.slice();\n        x[i] = 1;\n        dpoints[i + 1] = x;\n        dindex[i + 1] = -1;\n    }\n\n    //Copy rest of the points over\n    for (let i = 0; i < n; ++i) {\n        const h = lifted[i];\n        dpoints[i + 3 + 1] = h.point;\n        dindex[i + 3 + 1] = h.index;\n    }\n\n    //Construct convex hull\n    let hull = incrementalConvexHull(dpoints, false);\n    hull = hull.filter(function (cell) {\n        for (let i = 0; i <= 3; ++i) {\n            const v = dindex[cell[i]];\n            if (v < 0) {\n                return false;\n            }\n            cell[i] = v;\n        }\n        return true;\n    });\n\n    for (let i = 0; i < hull.length; ++i) {\n        const h = hull[i];\n        const x = h[0];\n        h[0] = h[1];\n        h[1] = x;\n    }\n\n    return hull;\n}\n\nexport default points => {\n    const tri = triangulate(points);\n    const connections = points.map(() => ({}));\n    tri.map(t => {\n        for (let i = 0; i < 4; ++i) {\n            for (let j = i + 1; j < 4; ++j) {\n                connections[t[i]][t[j]] = true;\n                connections[t[j]][t[i]] = true;\n            }\n        }\n    });\n    return connections.map(con => Object.keys(con).map(key => Number(key)));\n};\n","import { Vec3, Bot, World } from \"../core\";\n\nconst n = 10;\n\nconst arc = [Vec3.newVec3(0, 0, 0)];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push(Vec3.newVec3(arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0));\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push(Vec3.newVec3(-arc[i][0], arc[i][1], 0));\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nconst start = [\n    ...[...Array(n + 1)].map((_, i) => Vec3.newVec3(i, 0.5, 0)),\n    ...[...Array(n)].map((_, i) => Vec3.newVec3(-i - 1, 0.5, 0))\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: arc[i],\n                weight: 1\n            })\n    ),\n    time: 0\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Arc\",\n    world: world\n};\n\nexport default example;\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\nimport { outerProduct } from \"./utils\";\nimport { SparseSymmetric, ldiv } from \"./conjugateGradientSparse\";\nimport * as Bot from \"./Bot\";\nimport delaunay from \"./delaunay\";\nimport Prando from \"prando\";\n\nexport type World = { bots: Bot.Bot[]; time: number };\n\nexport const newWorld = (): World => ({ bots: [], time: 0 });\n\nexport const setBots = (bots: Bot.Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nlet offset = 1.5;\nlet slack = 2;\nexport const setSlack = (s: number): void => {\n    slack = s;\n};\nexport const setOffset = (o: number): void => {\n    offset = o;\n};\nconst friction = 0.1;\n\nexport const edgeStrength = (d: number): number => {\n    if (d < offset - slack / 2) return 1;\n    if (d > offset + slack / 2) return 0;\n    return (2 * (d + slack - offset) * (offset + slack / 2 - d) ** 2) / slack ** 3;\n};\n\nexport const edgeStrengthGround = (d: number): number => edgeStrength(d) + 1e-4;\n\nconst stiffness = (d: Vec3.Vec3): Mat3.Mat3 => {\n    const l = Vec3.length(d);\n    d = Vec3.multiplyScalar(d, Math.sqrt(edgeStrength(l)) / l);\n    return outerProduct(d, d);\n};\n\nconst stiffnessGround = (d: Vec3.Vec3): Mat3.Mat3 => {\n    const result = outerProduct(d, d);\n    Mat3.multiplyScalar(result, edgeStrengthGround(Vec3.length(d)) / Vec3.dot(d, d));\n    return result;\n};\n\nconst stiffnessDerivative = (dim: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const epsilon = 0.00001;\n    const val = d[dim];\n    const dPlus = Vec3.clone(d);\n    dPlus[dim] = val + epsilon;\n    const dMinus = Vec3.clone(d);\n    dMinus[dim] = val - epsilon;\n    const plus = stiffness(dPlus);\n    const minus = stiffness(dMinus);\n    Mat3.sub(plus, minus);\n    Mat3.multiplyScalar(plus, 1 / (2 * epsilon));\n    return plus;\n};\n\nconst stiffnessPair = (a: Bot.Bot, b: Bot.Bot): Mat3.Mat3 => {\n    const d = Vec3.sub(b.pos, a.pos);\n    return stiffness(d);\n};\n\nconst stiffnessPairDerivative = (a: Bot.Bot, dim: number, b: Bot.Bot): Mat3.Mat3 =>\n    stiffnessDerivative(dim, Vec3.sub(a.pos, b.pos));\n\nconst stiffnessMatrix = (world: World, con: number[][], neigh: number[][]): SparseSymmetric => {\n    const result: SparseSymmetric = [...Array(world.bots.length * 3)].map(() => []);\n    for (let i = 0; i < world.bots.length; ++i) {\n        const sx = stiffnessGround(Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n        const sy = stiffnessGround(Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n        const sz = stiffnessGround(Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n        for (let k = 0; k < 3; ++k) {\n            for (let l = k; l < 3; ++l) {\n                result[3 * i + k].push([3 * i + l, (sx[k][l] + sz[k][l]) * friction + sy[k][l]]);\n            }\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        neigh[i].forEach(j => {\n            const s = stiffnessPair(world.bots[i], world.bots[j]);\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k].push([3 * j + l, -s[k][l]]);\n                    if (k > l) continue;\n                    result[3 * i + k][l - k][1] += s[k][l];\n                    result[3 * j + k][l - k][1] += s[k][l];\n                }\n            }\n        });\n    }\n    return result;\n};\n\nconst forceMatrix = (before: World, after: World, dt: number, world: World): number[] => {\n    const result = [...Array(world.bots.length * 3)].map(() => 0);\n    world.bots.forEach((bot, i) => {\n        for (let j = 0; j < 3; ++j) {\n            const v1 = (world.bots[i].pos[j] - before.bots[i].pos[j]) / dt;\n            const v2 = (after.bots[i].pos[j] - world.bots[i].pos[j]) / dt;\n            const acc = (v2 - v1) / dt;\n            result[3 * i + j] = ((j === 1 ? -1 : 0) - acc) * bot.weight;\n        }\n    });\n    return result;\n};\n\nexport const displacement = (\n    before: World,\n    after: World,\n    dt: number,\n    world: World,\n    con: number[][],\n    neigh: number[][]\n): number[] => {\n    const f = forceMatrix(before, after, dt, world);\n    const k = stiffnessMatrix(world, con, neigh);\n    return ldiv(k, f);\n};\n\nexport const neighbors = (world: World, con: number[][], n: number): number[] =>\n    con[n]\n        .filter(i => i !== n)\n        .filter(i => {\n            const d = Vec3.dist(world.bots[n].pos, world.bots[i].pos);\n            return d < 2;\n        });\n\nexport const gradient = (\n    uBefore: number[],\n    u: number[],\n    uAfter: number[],\n    beforeBefore: World,\n    before: World,\n    after: World,\n    afterAfter: World,\n    dt: number,\n    world: World,\n    neigh: number[][],\n    t: number\n): Vec3.Vec3[] => {\n    const udku = [...Array(world.bots.length)].map(() => [0, 1, 2].map(() => 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const sx = stiffnessDerivative(dim, Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n            Mat3.multiplyScalar(sx, friction);\n            const sy = stiffnessDerivative(dim, Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n            const sz = stiffnessDerivative(dim, Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n            Mat3.multiplyScalar(sz, friction);\n            const vi = Vec3.newVec3(u[3 * i], u[3 * i + 1], u[3 * i + 2]);\n            Mat3.add(sx, sy);\n            Mat3.add(sx, sz);\n            const d = Vec3.dot(vi, Mat3.apply(sx, vi));\n            udku[i][dim] += d;\n            neigh[i].forEach(j => {\n                const s = stiffnessPairDerivative(world.bots[i], dim, world.bots[j]);\n                const vj = Vec3.newVec3(u[3 * j], u[3 * j + 1], u[3 * j + 2]);\n                Vec3.subEq(vj, vi);\n                const svisvj = Mat3.apply(s, vj);\n                const diff = Vec3.dot(vj, svisvj);\n                udku[i][dim] += diff;\n                udku[j][dim] -= diff;\n            });\n        }\n    }\n    const result = [...Array(world.bots.length)].map(() => Vec3.newVec3(0, 0, 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            result[i][dim] =\n                -udku[i][dim] + 2 * ((-uBefore[3 * i + dim] + 2 * u[3 * i + dim] - uAfter[3 * i + dim]) / dt ** 2);\n        }\n    }\n    const overlapPenalty = 1000;\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].pos[1] > 0.5) continue;\n        const l = world.bots[i].pos[1] + 0.5;\n        result[i][1] += 2 * overlapPenalty * (2 * (l - 2));\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        neigh[i].forEach(j => {\n            let d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const l = Vec3.length(d);\n            if (l > 1) return;\n            d = Vec3.multiplyScalar(d, overlapPenalty * ((2 * (l - 2)) / l));\n            Vec3.subEq(result[i], d);\n            Vec3.addEq(result[j], d);\n        });\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        const dest = Bot.interpolate(\n            world.bots[i],\n            t,\n            dt,\n            beforeBefore.bots[i].pos,\n            before.bots[i].pos,\n            after.bots[i].pos,\n            afterAfter.bots[i].pos\n        );\n        const d = Vec3.sub(dest, world.bots[i].pos);\n        Vec3.addEq(result[i], Vec3.multiplyScalar(d, -0.1));\n    }\n    return result;\n};\n\nconst rng = new Prando(123);\n\nconst rand = () => Vec3.multiplyScalar(Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5), 0.1);\n\nexport const connections = (world: World): number[][] => delaunay(world.bots.map(bot => Vec3.add(bot.pos, rand())));\n","import * as Vec3 from \"./Vec3\";\nimport * as Bot from \"./Bot\";\nimport * as World from \"./World\";\n\nconst avgWeight = (a: Bot.Bot, b: Bot.Bot, w: number): Bot.Bot => {\n    const pos = Vec3.add(Vec3.multiplyScalar(a.pos, 1 - w), Vec3.multiplyScalar(b.pos, w));\n    return { ...a, pos: pos };\n};\n\nconst averageWeight = (start: World.World, end: World.World, w: number): World.World => {\n    const result = World.newWorld();\n    result.bots = start.bots.map((b, i) => avgWeight(b, end.bots[i], w));\n    result.time = (start.time + end.time) / 2;\n    return result;\n};\n\nconst average = (start: World.World, end: World.World): World.World => averageWeight(start, end, 0.5);\n\nconst gradient = (\n    animation: World.World[],\n    dt: number,\n    connections: number[][][],\n    neighbors: number[][][]\n): Vec3.Vec3[][] => {\n    const result = [...Array(animation.length)].map(() =>\n        [...Array(animation[0].bots.length)].map(() => Vec3.newVec3(0, 0, 0))\n    );\n    const displacements = animation.map(() => [...Array(3 * animation[0].bots.length)].map(() => 0));\n    for (let i = 0; i < animation.length; ++i) {\n        const before = animation[Math.max(i - 1, 0)];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        displacements[i] = World.displacement(before, after, dt, animation[i], connections[i], neighbors[i]);\n    }\n    for (let i = 1; i < animation.length; ++i) {\n        const beforeBefore = animation[Math.max(i - 2, 0)];\n        const before = animation[i - 1];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        const afterAfter = animation[Math.min(i + 2, animation.length - 1)];\n        result[i] = World.gradient(\n            displacements[i - 1],\n            displacements[i],\n            displacements[Math.min(i + 1, animation.length - 1)],\n            beforeBefore,\n            before,\n            after,\n            afterAfter,\n            dt,\n            animation[i],\n            neighbors[i],\n            i / (animation.length - 1)\n        );\n    }\n    return result;\n};\n\nconst optimize = (animation: World.World[], dt: number): void => {\n    const n = 200;\n    const maxIter = Math.floor(n / animation.length);\n    if (maxIter === 0) return;\n    const acc = 0.2 / animation.length;\n    const vel = animation.map(world => world.bots.map(() => Vec3.newVec3(0, 0, 0)));\n    const connections = animation.map(world => World.connections(world));\n    const neighbors = animation.map((world, i) => world.bots.map((_, j) => World.neighbors(world, connections[i], j)));\n    for (let iter = 0; iter < maxIter; ++iter) {\n        World.setOffset(1.5);\n        let g = gradient(animation, dt, connections, neighbors);\n        g = g.map(world => world.map(v => Vec3.multiplyScalar(v, -acc / (1e-4 + Vec3.length(v)))));\n        animation.map((world, i) => {\n            if (i <= 1 || i >= animation.length - 2) return;\n            world.bots.map((bot, j) => {\n                vel[i][j] = Vec3.add(vel[i][j], g[i][j]);\n                vel[i][j] = Vec3.multiplyScalar(vel[i][j], 0.9);\n                bot.pos = Vec3.add(bot.pos, vel[i][j]);\n            });\n        });\n    }\n};\n\nconst dist = (a: Bot.Bot, b: Bot.Bot): number => Vec3.length(Vec3.sub(b.pos, a.pos));\n\nconst isValidConnection = (\n    world: World.World,\n    connections: number[][],\n    neighbors: number[][],\n    i: number,\n    j: number\n): boolean => {\n    for (let k = 0; k < world.bots.length; ++k) {\n        if (k === i) continue;\n        if (k === j) continue;\n        if (\n            dist(world.bots[i], world.bots[j]) > world.bots[i].pos[1] + 0.5 &&\n            dist(world.bots[i], world.bots[j]) > world.bots[j].pos[1] + 0.5\n        )\n            return false;\n        if (\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[i], world.bots[k]) &&\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[k], world.bots[j])\n        )\n            return false;\n        if (\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[j], world.bots[k]) &&\n            dist(world.bots[i], world.bots[j]) > dist(world.bots[i], world.bots[k])\n        )\n            return false;\n    }\n    return true;\n};\n\nconst resolveOverlap = (world: World.World): void => {\n    const connections = World.connections(world);\n    for (let iter = 0; iter < 10; ++iter) {\n        world.bots.forEach(bot => {\n            bot.pos[1] = Math.max(bot.pos[1], 0.5);\n        });\n        connections.forEach((list, i) => {\n            list.forEach(j => {\n                if (i >= j) return;\n                const d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n                const dLength = Vec3.length(d);\n                if (dLength > 1) return;\n                const n = Vec3.multiplyScalar(d, (1 - dLength) / dLength / 2);\n                Vec3.subEq(world.bots[i].pos, n);\n                Vec3.addEq(world.bots[j].pos, n);\n            });\n        });\n    }\n};\n\nconst contract = (world: World.World): void => {\n    const frac = 0.2;\n    for (let iter = 0; iter < 10; ++iter) {\n        world.bots.forEach((a, i) => {\n            if (\n                world.bots.some((b, j) => {\n                    if (i === j) return false;\n                    const d = Vec3.sub(a.pos, b.pos);\n                    const hD = Vec3.newVec3(d[0], 0, d[2]);\n                    const hDistSqr = Vec3.dot(hD, hD);\n                    const vDist = d[1];\n                    if (a.pos[1] + 0.5 > b.pos[1] + 0.5 && 10 * vDist > hDistSqr) return true;\n                    return false;\n                })\n            )\n                return;\n            a.pos[1] += frac * (0.5 - a.pos[1]);\n        });\n        const connections = World.connections(world);\n        const neighbors = world.bots.map((_, i) => World.neighbors(world, connections, i));\n        const validConnections: [number, number][] = [];\n        connections.forEach((list, i) => {\n            list.forEach(j => {\n                if (i >= j) return;\n                if (!isValidConnection(world, connections, neighbors, i, j)) return;\n                validConnections.push([i, j]);\n            });\n        });\n        validConnections.forEach(([i, j]) => {\n            const d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const dLength = Vec3.length(d);\n            if (dLength < 1) return;\n            const n = Vec3.multiplyScalar(d, frac * ((1 - dLength) / dLength / 2));\n            Vec3.subEq(world.bots[i].pos, n);\n            Vec3.addEq(world.bots[j].pos, n);\n        });\n    }\n};\n\nconst minimizeAcceleration = (animation: World.World[], dt: number): void => {\n    const frac = 0.5;\n    for (let iter = 0; iter < 40; ++iter) {\n        for (let i = 2; i < animation.length - 2; ++i) {\n            animation[i].bots.forEach((bot, j) => {\n                const p = Bot.interpolate(\n                    bot,\n                    (i - 1) / (animation.length - 3),\n                    dt,\n                    animation[i - 2].bots[j].pos,\n                    animation[i - 1].bots[j].pos,\n                    animation[i + 1].bots[j].pos,\n                    animation[i + 2].bots[j].pos\n                );\n                bot.pos = Vec3.add(Vec3.multiplyScalar(bot.pos, frac), Vec3.multiplyScalar(p, 1 - frac));\n            });\n        }\n    }\n};\n\nconst maxAcc = (prev: World.World, now: World.World, next: World.World, dt: number): number => {\n    let result = 0;\n    for (let i = 0; i < now.bots.length; ++i) {\n        const v1 = Vec3.multiplyScalar(Vec3.sub(now.bots[i].pos, prev.bots[i].pos), 1 / dt);\n        const v2 = Vec3.multiplyScalar(Vec3.sub(next.bots[i].pos, now.bots[i].pos), 1 / dt);\n        const a = Vec3.multiplyScalar(Vec3.sub(v2, v1), 1 / dt);\n        result = Math.max(result, Vec3.length(a));\n    }\n    return result;\n};\n\nexport const createAnimation = (\n    beforeBefore: World.World,\n    before: World.World,\n    after: World.World,\n    afterAfter: World.World\n): World.World[] => {\n    let result = [beforeBefore, before, after, afterAfter];\n    const dt = 1;\n    const maxAccLimit = 0.2;\n    for (let iter = 0; iter < 10; ++iter) {\n        const tooFast = result.map((world, i) => {\n            if (i <= 1 || i >= result.length - 1) return false;\n            return maxAcc(result[i - 1], world, result[i + 1], dt) > maxAccLimit;\n        });\n        if (!tooFast.some(x => x)) break;\n        const resultPrev = [...result];\n        result = [result[0]];\n        tooFast.forEach((tf, i) => {\n            if (i === 0) return;\n            if (tf) result.push(average(result[result.length - 1], resultPrev[i]));\n            result.push(resultPrev[i]);\n        });\n        console.log(iter, result.length);\n        for (let i = 2; i < result.length - 2; ++i) contract(result[i]);\n        optimize(result, dt);\n        minimizeAcceleration(result, dt);\n        result.map(world => resolveOverlap(world));\n    }\n    console.log(\"done\");\n    return result.slice(1, result.length - 1);\n};\n","import { Vec3, Bot, World } from \"../core\";\n\nconst n = 20;\n\nconst arc = [Vec3.newVec3(0, 0, 0)];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push(Vec3.newVec3(arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0));\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push(Vec3.newVec3(-arc[i][0], arc[i][1], 0));\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nconst start = [\n    ...[...Array(n + 1)].map((_, i) => Vec3.newVec3(i + 15, 0.5, 0)),\n    ...[...Array(n)].map((_, i) => Vec3.newVec3(-i - 1 - 15, 0.5, 0))\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: arc[i],\n                weight: 1\n            })\n    ),\n    time: 0\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Big arc\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst start = [...Array(8)].map((_, i) => [...Array(8)].map((_, j) => Vec3.newVec3(i - 3.5, 0.5, j - 3.5))).flat();\nconst end = [...Array(4)]\n    .map((_, i) => [...Array(4)].map((_, j) => [...Array(4)].map((_, k) => Vec3.newVec3(i - 1.5, k + 0.5, j - 1.5))))\n    .flat()\n    .flat();\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: end[i],\n                weight: 1\n            })\n    ),\n    time: 0\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Big cube\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst start: Vec3.Vec3[] = [\n    [1, 0.5, 0],\n    [0, 0.5, 0],\n    [-1, 0.5, 0],\n    [0, 1.5, 0],\n    [0, 2.5, 0],\n    [0, 3.5, 0],\n    [1, 3.5, 0],\n    [2, 3.5, 0],\n    [3, 3.5, 0],\n    [3, 0.5, 0]\n];\nconst end: Vec3.Vec3[] = [\n    [1, 0.5, 0],\n    [0, 0.5, 0],\n    [-1, 0.5, 0],\n    [0, 1.5, 0],\n    [0, 2.5, 0],\n    [0, 3.5, 0],\n    [1, 3.5, 0],\n    [2, 3.5, 0],\n    [3, 3.5, 0],\n    [3, 2.5, 0]\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: end[i],\n                weight: 1\n            })\n    ),\n    time: 0\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Crane\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst start: Vec3.Vec3[] = [\n    [-1.5, 0.5, -1.5],\n    [-0.5, 0.5, -1.5],\n    [0.5, 0.5, -1.5],\n    [1.5, 0.5, -1.5],\n    [-1.5, 0.5, -0.5],\n    [-0.5, 0.5, -0.5],\n    [0.5, 0.5, -0.5],\n    [1.5, 0.5, -0.5],\n    [-1.5, 0.5, 0.5],\n    [-0.5, 0.5, 0.5],\n    [0.5, 0.5, 0.5],\n    [1.5, 0.5, 0.5],\n    [-1.5, 0.5, 1.5],\n    [-0.5, 0.5, 1.5],\n    [0.5, 0.5, 1.5],\n    [1.5, 0.5, 1.5]\n];\n\nconst end: Vec3.Vec3[] = [\n    [-0.5, 0.5, -0.5],\n    [0.5, 0.5, -0.5],\n    [0.5, 0.5, 0.5],\n    [-0.5, 0.5, 0.5],\n    [-0.5, 1.5, -0.5],\n    [0.5, 1.5, -0.5],\n    [0.5, 1.5, 0.5],\n    [-0.5, 1.5, 0.5],\n    [-0.5, 2.5, -0.5],\n    [0.5, 2.5, -0.5],\n    [0.5, 2.5, 0.5],\n    [-0.5, 2.5, 0.5],\n    [-0.5, 3.5, -0.5],\n    [0.5, 3.5, -0.5],\n    [0.5, 3.5, 0.5],\n    [-0.5, 3.5, 0.5]\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: end[i],\n                weight: 1\n            })\n    ),\n    time: 0\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Cube\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst r = 6;\nconst h = 3;\nconst w = 2;\n\nconst floor = () =>\n    [...Array(2 * r + 1)]\n        .map((_, i) => [...Array(2 * r + 1)].map((_, j): [number, number, number] => [i - r, 0.5, j - r]))\n        .flat()\n        .filter(p => Math.abs(p[0] + p[2]) < w);\n\nconst start: Vec3.Vec3[] = [\n    ...floor(),\n    ...[...Array(h)].map((_, i): [number, number, number] => [-r, i + 1.5, r]),\n    ...[...Array(h)].map((_, i): [number, number, number] => [r, i + 1.5, -r]),\n    [-r, h + 1.5, r]\n];\n\nconst end: Vec3.Vec3[] = [\n    ...floor(),\n    ...[...Array(h)].map((_, i): [number, number, number] => [-r, i + 1.5, r]),\n    ...[...Array(h)].map((_, i): [number, number, number] => [r, i + 1.5, -r]),\n    [r, h + 1.5, -r]\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: end[i],\n                weight: 1\n            })\n    ),\n    time: 0\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Floor transport\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst r = 1;\nconst d = 5;\n\nconst frame = (pos: Vec3.Vec3) =>\n    [...Array(2 * r + 1)]\n        .map((_, i) =>\n            [...Array(2 * r + 1)].map((_, j) =>\n                [...Array(2 * r + 1)].map((_, k): [number, number, number] => [i - r, j - r, k - r])\n            )\n        )\n        .flat()\n        .flat()\n        .filter(\n            p => (Math.abs(p[0]) === r ? 1 : 0) + (Math.abs(p[1]) === r ? 1 : 0) + (Math.abs(p[2]) === r ? 1 : 0) >= 2\n        )\n        .map(p => Vec3.newVec3(p[0], p[1] + 0.5 + r, p[2]))\n        .map(p => Vec3.add(p, pos));\n\nconst start: Vec3.Vec3[] = [\n    ...frame([0, 0, d]),\n    ...frame([0, 2 * r + 1, d]),\n    ...frame([-d, 0, d]),\n    ...frame([d, 0, -d]),\n    ...frame([-d, 2 * r + 1, d])\n];\n\nconst end: Vec3.Vec3[] = [\n    ...frame([0, 0, d]),\n    ...frame([0, 2 * r + 1, d]),\n    ...frame([-d, 0, -d]),\n    ...frame([d, 0, d]),\n    ...frame([d, 2 * r + 1, d])\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: end[i],\n                weight: 1\n            })\n    ),\n    time: 0\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Frame transport\",\n    world: world\n};\n\nexport default example;\n","import { Bot, World } from \"../core\";\n\nconst world: World.World = {\n    bots: [\n        ...[...Array(5)].map(\n            (_, i): Bot.Bot =>\n                Bot.newBot({\n                    pos: [i, 0.5, 0],\n                    target: [0, 0.5 + i, 0],\n                    weight: 10\n                })\n        )\n    ],\n    time: 0\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Stack\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst start: Vec3.Vec3[] = [\n    [2, 0.5, 0],\n    [2, 1.5, 0],\n    [2, 2.5, 0],\n    [2, 3.5, 0],\n    [2, 4.5, 0],\n    [-2, 0.5, 0],\n    [-2, 1.5, 0],\n    [-2, 2.5, 0],\n    [-2, 3.5, 0],\n    [-2, 4.5, 0],\n    [2, 5.5, 0]\n];\nconst end: Vec3.Vec3[] = [\n    [2, 0.5, 0],\n    [2, 1.5, 0],\n    [2, 2.5, 0],\n    [2, 3.5, 0],\n    [2, 4.5, 0],\n    [-2, 0.5, 0],\n    [-2, 1.5, 0],\n    [-2, 2.5, 0],\n    [-2, 3.5, 0],\n    [-2, 4.5, 0],\n    [-2, 5.5, 0]\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: end[i],\n                weight: 1\n            })\n    ),\n    time: 0\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Towers\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst start: Vec3.Vec3[] = [\n    [0, 0.5, 1],\n    [0, 0.5, -1],\n\n    [0, 1.5, 1],\n    [0, 1.5, 0],\n    [0, 1.5, -1],\n\n    [1, 1.5, 1],\n    [1, 1.5, 0],\n    [1, 1.5, -1],\n\n    [2, 1.5, 1],\n    [2, 1.5, 0],\n    [2, 1.5, -1],\n\n    [3, 1.5, 1],\n    [3, 1.5, 0],\n    [3, 1.5, -1],\n\n    [3, 0.5, 1],\n    [3, 0.5, -1]\n];\nconst end: Vec3.Vec3[] = [\n    [0, 0.5, 1],\n    [0, 0.5, -1],\n\n    [0, 1.5, 0.8],\n    [0, 3.5, 0],\n    [0, 1.5, -0.8],\n\n    [0, 2.5, 0.6],\n    [0, 4.5, 0],\n    [0, 2.5, -0.6],\n\n    [0, 5.5, 1],\n    [0, 5.5, 0],\n    [0, 5.5, -1],\n\n    [0, 4.7, 1.6],\n    [0, 6.5, 0],\n    [0, 4.7, -1.6],\n\n    [0, 3.7, 2],\n    [0, 3.7, -2]\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: end[i],\n                weight: 1\n            })\n    ),\n    time: 0\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Transformer\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst pillar = (pos: Vec3.Vec3) => {\n    const list: Vec3.Vec3[] = [\n        [0, 0, 0],\n        [1, 0, 0],\n        [-1, 0, 0],\n        [0, 0, 1],\n        [0, 0, -1],\n        [0, 1, 0],\n        [0, 2, 0],\n        [0, 3, 0]\n    ];\n    return list.map((p: Vec3.Vec3) => Vec3.add(p, pos));\n};\n\nconst space = 3;\n\nconst start: Vec3.Vec3[] = [\n    ...pillar([space * 2, 0.5, -space * 2]),\n    ...pillar([space, 0.5, -space]),\n    ...pillar([0, 0.5, 0]),\n    ...pillar([-space, 0.5, space]),\n    ...pillar([-space * 2, 0.5, space * 2]),\n    [-space * 2, 4.5, space * 2]\n];\n\nconst end: Vec3.Vec3[] = [\n    ...pillar([space * 2, 0.5, -space * 2]),\n    ...pillar([space, 0.5, -space]),\n    ...pillar([0, 0.5, 0]),\n    ...pillar([-space, 0.5, space]),\n    ...pillar([-space * 2, 0.5, space * 2]),\n    [space * 2, 4.5, -space * 2]\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: end[i],\n                weight: 1\n            })\n    ),\n    time: 0\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Transport\",\n    world: world\n};\n\nexport default example;\n","import { Vec3, Bot, World } from \"../core\";\n\nconst start: Vec3.Vec3[] = [\n    [-3, 0.5, 0],\n    [-3, 1.5, 0],\n    [-3, 2.5, 0],\n    [-2, 2.5, 0],\n    [-1, 2.5, 0],\n    [-3, 3.5, 0],\n    [-3, 4.5, 0],\n    [-3, 5.5, 0],\n    [-3, 6.5, 0],\n    [-2, 6.5, 0],\n    [-1, 6.5, 0],\n    [-3, 7.5, 0],\n    [-3, 8.5, 0],\n    [-3, 9.5, 0],\n    [-3, 10.5, 0],\n    [-2, 10.5, 0],\n    [-1, 10.5, 0],\n\n    [3, 0.5, 0],\n    [3, 1.5, 0],\n    [3, 2.5, 0],\n    [3, 3.5, 0],\n    [3, 4.5, 0],\n    [2, 4.5, 0],\n    [1, 4.5, 0],\n    [3, 5.5, 0],\n    [3, 6.5, 0],\n    [3, 7.5, 0],\n    [3, 8.5, 0],\n    [2, 8.5, 0],\n    [1, 8.5, 0],\n    [3, 9.5, 0],\n    [3, 10.5, 0],\n    [3, 11.5, 0],\n    [3, 12.5, 0],\n    [3, 13.5, 0],\n    [2, 13.5, 0],\n    [1, 13.5, 0],\n    [0, 13.5, 0],\n    [-1, 13.5, 0],\n    [-2, 13.5, 0],\n    [-3, 13.5, 0],\n    [-3, 12.5, 0],\n    [-3, 11.5, 0],\n\n    [0, 0.5, 0]\n];\n\nconst end: Vec3.Vec3[] = [\n    [-3, 0.5, 0],\n    [-3, 1.5, 0],\n    [-3, 2.5, 0],\n    [-2, 2.5, 0],\n    [-1, 2.5, 0],\n    [-3, 3.5, 0],\n    [-3, 4.5, 0],\n    [-3, 5.5, 0],\n    [-3, 6.5, 0],\n    [-2, 6.5, 0],\n    [-1, 6.5, 0],\n    [-3, 7.5, 0],\n    [-3, 8.5, 0],\n    [-3, 9.5, 0],\n    [-3, 10.5, 0],\n    [-2, 10.5, 0],\n    [-1, 10.5, 0],\n\n    [3, 0.5, 0],\n    [3, 1.5, 0],\n    [3, 2.5, 0],\n    [3, 3.5, 0],\n    [3, 4.5, 0],\n    [2, 4.5, 0],\n    [1, 4.5, 0],\n    [3, 5.5, 0],\n    [3, 6.5, 0],\n    [3, 7.5, 0],\n    [3, 8.5, 0],\n    [2, 8.5, 0],\n    [1, 8.5, 0],\n    [3, 9.5, 0],\n    [3, 10.5, 0],\n    [3, 11.5, 0],\n    [3, 12.5, 0],\n    [3, 13.5, 0],\n    [2, 13.5, 0],\n    [1, 13.5, 0],\n    [0, 13.5, 0],\n    [-1, 13.5, 0],\n    [-2, 13.5, 0],\n    [-3, 13.5, 0],\n    [-3, 12.5, 0],\n    [-3, 11.5, 0],\n\n    [0, 12.5, 0]\n];\n\nconst world: World.World = {\n    bots: start.map(\n        (pos, i): Bot.Bot =>\n            Bot.newBot({\n                pos: pos,\n                target: end[i],\n                weight: 1\n            })\n    ),\n    time: 0\n};\n\nconst example: { title: string; world: World.World } = {\n    title: \"Vertical transport\",\n    world: world\n};\n\nexport default example;\n","import { Bot, World } from \"../core\";\nimport arc from \"./arc\";\nimport bigArc from \"./bigArc\";\nimport bigCube from \"./bigCube\";\nimport crane from \"./crane\";\nimport cube from \"./cube\";\nimport floorTransport from \"./floorTransport\";\nimport frameTransport from \"./frameTransport\";\nimport stack from \"./stack\";\nimport towers from \"./towers\";\nimport transformer from \"./transformer\";\nimport transport from \"./transport\";\nimport verticalTransport from \"./verticalTransport\";\n\nexport const examples = [\n    arc,\n    bigArc,\n    bigCube,\n    crane,\n    cube,\n    floorTransport,\n    frameTransport,\n    stack,\n    towers,\n    transformer,\n    transport,\n    verticalTransport\n].sort((a, b) => {\n    const d = a.world.bots.length - b.world.bots.length;\n    if (d === 0) return a.title > b.title ? 1 : -1;\n    return d;\n});\n\nexport default (index: number): [World.World, World.World] => [\n    examples[index].world,\n    World.setBots(\n        examples[index].world.bots.map((bot: Bot.Bot) => {\n            return {\n                pos: bot.target || bot.pos,\n                vel: bot.vel,\n                target: bot.target,\n                weight: bot.weight\n            };\n        })\n    )(World.newWorld())\n];\n","import React, { FC, useState } from \"react\";\nimport { Button } from \"@material-ui/core\";\nimport { Vec3, World } from \"../core\";\nimport Prando from \"prando\";\nimport loadExample, { examples } from \"../examples\";\n\ntype Props = { onSelect: (worldStart: World.World, worldEnd: World.World) => void };\n\nconst SelectExample: FC<Props> = props => {\n    const [selectedExample, setSelectedExample] = useState<number | undefined>(undefined);\n\n    return (\n        <>\n            <b>Select an example</b>\n            <br />\n            <br />\n            {examples.map((example, i) => (\n                <Button\n                    key={i}\n                    variant=\"contained\"\n                    color={selectedExample === i ? \"primary\" : \"default\"}\n                    onClick={() => {\n                        const rng = new Prando(123);\n                        const [ws, we] = loadExample(i);\n                        console.log(ws, we);\n                        const rand = () =>\n                            Vec3.multiplyScalar(\n                                Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5),\n                                0.1\n                            );\n                        ws.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                        we.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                        props.onSelect(ws, we);\n                        setSelectedExample(i);\n                    }}>\n                    {example.title} ({example.world.bots.length} bots)\n                </Button>\n            ))}\n        </>\n    );\n};\n\nexport default SelectExample;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { List, ListItem, Button } from \"@material-ui/core\";\nimport { World, Animation } from \"../core\";\n\ntype Props = {\n    worldStart: World.World | undefined;\n    worldEnd: World.World | undefined;\n    setWorld: (world: World.World) => void;\n};\n\nconst Static: FC<Props> = props => {\n    const [time, setTime] = useState(0);\n    const [pause, setPause] = useState(true);\n    const [animation, setAnimation] = useState<World.World[]>([]);\n\n    useEffect(() => {\n        if (animation.length === 0) return;\n        const pauseFrac = 0.1;\n        const pauseFrames = Math.round(pauseFrac * animation.length);\n        let t = time % (2 * (animation.length + pauseFrames));\n        if (t < pauseFrames) {\n            props.setWorld(animation[0]);\n            return;\n        }\n        t -= pauseFrames;\n        if (t < animation.length) {\n            props.setWorld(animation[t]);\n            return;\n        }\n        t -= animation.length;\n        if (t < pauseFrames) {\n            props.setWorld(animation[animation.length - 1]);\n            return;\n        }\n        t -= pauseFrames;\n        props.setWorld(animation[animation.length - 1 - t]);\n    }, [animation, time]);\n\n    useEffect(() => {\n        if (pause) return;\n        const i = setInterval(() => setTime(time => time + 1), 1000 / 30);\n        return () => clearInterval(i);\n    }, [pause]);\n\n    return (\n        <List>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        if (props.worldStart === undefined || props.worldEnd === undefined) return;\n                        const t = Date.now();\n                        setAnimation(\n                            Animation.createAnimation(\n                                props.worldStart,\n                                props.worldStart,\n                                props.worldEnd,\n                                props.worldEnd\n                            )\n                        );\n                        console.log((Date.now() - t) / 1000);\n                        setPause(false);\n                    }}>\n                    Generate animation\n                </Button>\n            </ListItem>\n            <ListItem>\n                <Button variant=\"contained\" onClick={() => setPause(!pause)}>\n                    paused: {pause ? \"yes\" : \"no\"}\n                </Button>\n                {pause && (\n                    <Button variant=\"contained\" onClick={() => setTime(time + 1)}>\n                        Step\n                    </Button>\n                )}\n            </ListItem>\n        </List>\n    );\n};\n\nexport default Static;\n","import React, { FC, useEffect, useState } from \"react\";\nimport { List, ListItem, Button } from \"@material-ui/core\";\nimport update from \"immutability-helper\";\nimport Prando from \"prando\";\nimport { Vec3, World, Animation } from \"../core\";\n\nconst rng = new Prando(123);\n\nconst rand = () => Vec3.multiplyScalar(Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5), 2);\n\ntype Props = {\n    world: World.World | undefined;\n    worldPrev: World.World | undefined;\n    setWorld: (world: World.World) => void;\n    setWorldPrev: (world: World.World) => void;\n    worldEnd: World.World | undefined;\n};\n\nconst Dynamic: FC<Props> = props => {\n    const [pause, setPause] = useState(true);\n    const [path, setPath] = useState<World.World[]>([]);\n\n    const step = () => {\n        if (props.world === undefined || props.worldPrev === undefined || props.worldEnd === undefined) return;\n        if (\n            path.length === 0 ||\n            props.world.bots\n                .map((bot, i) => Vec3.sub(bot.pos, path[0].bots[i].pos))\n                .map(v => Vec3.dot(v, v))\n                .reduce((sum, value) => sum + value, 0) > 0.00001\n        ) {\n            setPath(Animation.createAnimation(props.worldPrev, props.world, props.worldEnd, props.worldEnd));\n            return;\n        }\n        let p = path;\n        if (p.length > 1) p = p.slice(1);\n        props.setWorldPrev(props.world);\n        props.setWorld(p[0]);\n        setPath(p);\n    };\n\n    useEffect(() => {\n        if (pause) return;\n        const i = setInterval(step, 1000 / 30);\n        return () => clearInterval(i);\n    }, [props, pause, path]);\n\n    return (\n        <List>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        setPause(!pause);\n                    }}>\n                    paused: {pause ? \"yes\" : \"no\"}\n                </Button>\n            </ListItem>\n            <ListItem>\n                <Button\n                    variant=\"contained\"\n                    onClick={() => {\n                        if (props.world === undefined) return;\n                        props.setWorld(\n                            update(props.world, {\n                                bots: {\n                                    $set: props.world.bots.map(bot =>\n                                        update(bot, { pos: { $set: Vec3.add(bot.pos, rand()) } })\n                                    )\n                                }\n                            })\n                        );\n                    }}>\n                    Disturb\n                </Button>\n            </ListItem>\n        </List>\n    );\n};\n\nexport default Dynamic;\n","import React, { FC, useState } from \"react\";\nimport { Grid, makeStyles, List, ListItem, Button, FormControlLabel, Switch } from \"@material-ui/core\";\nimport { World } from \"./core\";\nimport { SelectExample, Scene, Static, Dynamic } from \"./gui\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst saveImage = () => {\n    const canvas = document.getElementsByTagName(\"canvas\")[0];\n    const image = canvas.toDataURL(\"image/png\");\n    const a = document.createElement(\"a\");\n    a.href = image.replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n    a.download = \"image.png\";\n    a.click();\n};\n\nconst App: FC = () => {\n    const classes = useStyles();\n    const [worldStart, setWorldStart] = useState<World.World | undefined>(undefined);\n    const [worldEnd, setWorldEnd] = useState<World.World | undefined>(undefined);\n    const [world, setWorld] = useState<World.World | undefined>(undefined);\n    const [worldPrev, setWorldPrev] = useState<World.World | undefined>(undefined);\n    const [dynamic, setDynamic] = useState(false);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <b style={{ fontSize: 20 }}>Microbots</b>\n                        <Grid item className={classes.gridItem}>\n                            <SelectExample\n                                onSelect={(ws: World.World, we: World.World) => {\n                                    setWorldStart(ws);\n                                    setWorldEnd(we);\n                                    setWorld(ws);\n                                    setWorldPrev(ws);\n                                }}\n                            />\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <b>Animation</b>\n                            <br />\n                            <FormControlLabel\n                                control={<Switch checked={dynamic} onChange={e => setDynamic(e.target.checked)} />}\n                                label=\"Dynamic\"\n                            />\n                            {dynamic ? (\n                                <Dynamic\n                                    worldEnd={worldEnd}\n                                    world={world}\n                                    worldPrev={worldPrev}\n                                    setWorld={setWorld}\n                                    setWorldPrev={setWorldPrev}\n                                />\n                            ) : (\n                                <Static worldStart={worldStart} worldEnd={worldEnd} setWorld={setWorld} />\n                            )}\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <b>Extra options</b>\n                            <List>\n                                <ListItem>\n                                    <Button variant=\"contained\" onClick={() => saveImage()}>\n                                        Save screenshot\n                                    </Button>\n                                </ListItem>\n                            </List>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <Scene world={world} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}