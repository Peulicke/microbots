{"version":3,"sources":["examples/arc.ts","core/Vec3.ts","core/Mat3.ts","core/Bot.ts","core/utils.ts","core/conjugateGradientSparse.ts","core/World.ts","core/Animation.ts","draw.ts","examples/bigArc.ts","examples/index.ts","examples/towers.ts","examples/stack.ts","examples/cube.ts","examples/bigCube.ts","App.tsx","index.tsx"],"names":["newVec3","x","y","z","clone","a","add","b","addEq","sub","subEq","multiplyScalar","s","dot","length","Math","sqrt","normalize","i","j","apply","result","newBot","pos","Vec3","weight","fixed","setPos","bot","setWeight","setFixed","average","outerProduct","addVecMultNum","c","matMultVec","A","v","conditionVector","sum","floor","ldiv","bCopy","Array","fill","preconditioner","conditionMatrix","r","Ap","p","pOld","rsold","alpha","rsnew","cg","newWorld","bots","setBots","world","offset","slack","setSlack","edgeStrength","d","edgeStrengthGround","stiffness","l","stiffnessGround","Mat3","stiffnessDerivative","dim","epsilon","val","dPlus","dMinus","plus","stiffnessPair","stiffnessPairDerivative","displacement","before","after","dt","f","map","forEach","v1","acc","forceMatrix","k","sx","sy","sz","push","stiffnessMatrix","gradient","uBefore","u","uAfter","beforeBefore","afterAfter","udku","vi","vj","svisvj","diff","p1","p2","p3","p4","p5","start","end","World","Bot","optimize","animation","vel","iter","g","displacements","max","min","subdivide","createAnimation","n","newScene","scene","Scene","AmbientLight","light","DirectionalLight","position","set","updateCylinder","from","to","radius","cylinder","orientation","Matrix4","lookAt","Vector3","Object3D","up","multiply","setRotationFromMatrix","scale","newCylinder","color","edgeGeometry","CylinderGeometry","Mesh","MeshPhongMaterial","arc","angle","PI","cos","sin","m","_","title","data","examples","flat","bigArc","sort","toWorld","index","time","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","App","useWindowSize","windowWidth","windowHeight","width","height","classes","mount","useRef","useState","controls","setControls","camera","setCamera","renderer","setRenderer","frame","setFrame","setTime","animate","setAnimate","setScene","botMeshes","setBotMeshes","groundEdgeMeshes","setGroundEdgeMeshes","edgeMeshes","setEdgeMeshes","setAnimation","worldStart","setWorldStart","worldEnd","setWorldEnd","undefined","selectedExample","setSelectedExample","updateWorld","remove","strength","useEffect","geom","SphereGeometry","computeVertexNormals","faces","face","vertexColors","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","geometry","newSphere","Color","scn","row","mc","current","cam","PerspectiveCamera","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","t","window","setInterval","clearInterval","removeChild","update","render","pauseFrames","round","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","direction","className","Paper","List","ListItem","example","Button","variant","onClick","rng","Prando","ws","we","rand","next","Animation","image","document","getElementsByTagName","toDataURL","createElement","href","replace","download","click","saveImage","ref","ReactDOM","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.14b22b74.chunk.js","sourcesContent":["const n = 10;\n\nconst arc = [[0, 0, 0]];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push([arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0]);\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push([-arc[i][0], arc[i][1], 0]);\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nexport default {\n    title: \"Arc\",\n    data: [[...[...Array(n + 1)].map((_, i) => [i, 0.5, 0]), ...[...Array(n)].map((_, i) => [-i - 1, 0.5, 0])], arc]\n};\n","export type Vec3 = [number, number, number];\n\nexport const newVec3 = (x: number, y: number, z: number): Vec3 => [x, y, z];\n\nexport const clone = (a: Vec3): Vec3 => [a[0], a[1], a[2]];\n\nexport const add = (a: Vec3, b: Vec3): Vec3 => [a[0] + b[0], a[1] + b[1], a[2] + b[2]];\n\nexport const addEq = (a: Vec3, b: Vec3): void => {\n    a[0] += b[0];\n    a[1] += b[1];\n    a[2] += b[2];\n};\n\nexport const sub = (a: Vec3, b: Vec3): Vec3 => [a[0] - b[0], a[1] - b[1], a[2] - b[2]];\n\nexport const subEq = (a: Vec3, b: Vec3): void => {\n    a[0] -= b[0];\n    a[1] -= b[1];\n    a[2] -= b[2];\n};\n\nexport const multiplyScalar = (a: Vec3, s: number): Vec3 => [a[0] * s, a[1] * s, a[2] * s];\n\nexport const dot = (a: Vec3, b: Vec3): number => a[0] * b[0] + a[1] * b[1] + a[2] * b[2];\n\nexport const length = (a: Vec3): number => Math.sqrt(dot(a, a));\n\nexport const normalize = (a: Vec3): Vec3 => multiplyScalar(a, 1 / length(a));\n","import * as Vec3 from \"./Vec3\";\n\nexport type Mat3 = [Vec3.Vec3, Vec3.Vec3, Vec3.Vec3];\n\nexport const newMat3 = (x: Vec3.Vec3, y: Vec3.Vec3, z: Vec3.Vec3): Mat3 => [x, y, z];\n\nexport const add = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] += b[i][j];\n        }\n    }\n};\n\nexport const sub = (a: Mat3, b: Mat3): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] -= b[i][j];\n        }\n    }\n};\n\nexport const multiplyScalar = (a: Mat3, s: number): void => {\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            a[i][j] *= s;\n        }\n    }\n};\n\nexport const apply = (a: Mat3, b: Vec3.Vec3): Vec3.Vec3 => {\n    const result: Vec3.Vec3 = [0, 0, 0];\n    for (let i = 0; i < 3; ++i) {\n        for (let j = 0; j < 3; ++j) {\n            result[i] += a[i][j] * b[j];\n        }\n    }\n    return result;\n};\n","import * as Vec3 from \"./Vec3\";\n\nexport type Bot = {\n    pos: Vec3.Vec3;\n    weight: number;\n    fixed: boolean;\n};\n\nexport const newBot = (): Bot => ({\n    pos: Vec3.newVec3(0, 0, 0),\n    weight: 1,\n    fixed: false\n});\n\nexport const setPos = (pos: Vec3.Vec3) => (bot: Bot): Bot => {\n    bot.pos = pos;\n    return bot;\n};\n\nexport const setWeight = (weight: number) => (bot: Bot): Bot => {\n    bot.weight = weight;\n    return bot;\n};\n\nexport const setFixed = (fixed: boolean) => (bot: Bot): Bot => {\n    bot.fixed = fixed;\n    return bot;\n};\n\nexport const average = (a: Bot, b: Bot): Bot => {\n    const result = newBot();\n    result.pos = Vec3.multiplyScalar(Vec3.add(a.pos, b.pos), 1 / 2);\n    result.weight = (a.weight + b.weight) / 2;\n    result.fixed = a.fixed || b.fixed;\n    return result;\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\n\nconst throwError = () => {\n    throw new Error(\"Vectors need to be the same length\");\n};\n\nexport const dot = (a: number[], b: number[]): number => {\n    if (a.length !== b.length) throwError();\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) result += a[i] * b[i];\n    return result;\n};\n\nexport const outerProduct = (a: Vec3.Vec3, b: Vec3.Vec3): Mat3.Mat3 =>\n    Mat3.newMat3(\n        Vec3.newVec3(a[0] * b[0], a[0] * b[1], a[0] * b[2]),\n        Vec3.newVec3(a[1] * b[0], a[1] * b[1], a[1] * b[2]),\n        Vec3.newVec3(a[2] * b[0], a[2] * b[1], a[2] * b[2])\n    );\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n","export type SparseSymmetric = [number, number][][];\n\nconst clone = (a: number[], result: number[]): void => {\n    for (let i = 0; i < a.length; ++i) result[i] = a[i];\n};\n\nconst dot = (a: number[], b: number[]): number => {\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) {\n        result += a[i] * b[i];\n    }\n    return result;\n};\n\nconst addVecMultNum = (a: number[], b: number[], c: number): void => {\n    for (let i = 0; i < a.length; ++i) a[i] += b[i] * c;\n};\n\nconst matMultVec = (A: SparseSymmetric, b: number[], result: number[]): void => {\n    for (let i = 0; i < result.length; ++i) result[i] = 0;\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            const v = A[i][c][1];\n            result[i] += v * b[j];\n            if (i === j) continue;\n            result[j] += v * b[i];\n        }\n    }\n};\n\nconst cg = (A: SparseSymmetric, b: number[]): number[] => {\n    const x = Array(b.length).fill(0);\n    const r = Array(b.length);\n    clone(b, r);\n    const Ap = Array(b.length);\n    matMultVec(A, x, Ap);\n    addVecMultNum(r, Ap, -1);\n    const p = Array(r.length);\n    const pOld = Array(p.length);\n    clone(r, p);\n    let rsold = dot(r, r);\n    for (let i = 0; i < 20; ++i) {\n        matMultVec(A, p, Ap);\n        const alpha = rsold / dot(p, Ap);\n        addVecMultNum(x, p, alpha);\n        addVecMultNum(r, Ap, -alpha);\n        const rsnew = dot(r, r);\n        clone(p, pOld);\n        clone(r, p);\n        addVecMultNum(p, pOld, rsnew / rsold);\n        rsold = rsnew;\n    }\n    return x;\n};\n\nconst preconditioner = (A: SparseSymmetric, b: number[]): number[] => {\n    const sum = Array(b.length / 3).fill(0);\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const [j, v] = A[i][c];\n            if (Math.floor(i / 3) !== Math.floor(j / 3)) continue;\n            sum[Math.floor(i / 3)] += v;\n            if (i === j) continue;\n            sum[Math.floor(j / 3)] += v;\n        }\n    }\n    for (let i = 0; i < sum.length; ++i) sum[i] = Math.sqrt(Math.sqrt(3 / sum[i]));\n    return sum;\n};\n\nconst conditionMatrix = (sum: number[], A: SparseSymmetric): void => {\n    for (let i = 0; i < A.length; ++i) {\n        for (let c = 0; c < A[i].length; ++c) {\n            const j = A[i][c][0];\n            A[i][c][1] *= sum[Math.floor(i / 3)];\n            A[i][c][1] *= sum[Math.floor(j / 3)];\n        }\n    }\n};\n\nconst conditionVector = (sum: number[], b: number[]): void => {\n    for (let i = 0; i < b.length; ++i) {\n        b[i] *= sum[Math.floor(i / 3)];\n    }\n};\n\nexport const ldiv = (A: SparseSymmetric, b: number[]): number[] => {\n    const bCopy = Array(b.length);\n    clone(b, bCopy);\n    const sum = preconditioner(A, bCopy);\n    conditionMatrix(sum, A);\n    conditionVector(sum, bCopy);\n    const x = cg(A, bCopy);\n    conditionVector(sum, x);\n    return x;\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Mat3 from \"./Mat3\";\nimport { outerProduct } from \"./utils\";\nimport { SparseSymmetric, ldiv } from \"./conjugateGradientSparse\";\nimport * as Bot from \"./Bot\";\n\nexport type World = { bots: Bot.Bot[] };\n\nexport const newWorld = (): World => ({ bots: [] });\n\nexport const setBots = (bots: Bot.Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nconst offset = 1.5;\nlet slack = 2;\nexport const setSlack = (s: number): void => {\n    slack = s;\n};\nconst friction = 0.1;\n\nexport const edgeStrength = (d: number): number => {\n    if (d < offset - slack / 2) return 1;\n    if (d > offset + slack / 2) return 0;\n    return (2 * (d + slack - offset) * (offset + slack / 2 - d) ** 2) / slack ** 3;\n};\n\nexport const edgeStrengthGround = (d: number): number => edgeStrength(d) + 1e-4;\n\nconst stiffness = (d: Vec3.Vec3): Mat3.Mat3 => {\n    const l = Vec3.length(d);\n    d = Vec3.multiplyScalar(d, Math.sqrt(edgeStrength(l)) / l);\n    return outerProduct(d, d);\n};\n\nconst stiffnessGround = (d: Vec3.Vec3): Mat3.Mat3 => {\n    const result = outerProduct(d, d);\n    Mat3.multiplyScalar(result, edgeStrengthGround(Vec3.length(d)) / Vec3.dot(d, d));\n    return result;\n};\n\nconst stiffnessDerivative = (dim: number, d: Vec3.Vec3): Mat3.Mat3 => {\n    const epsilon = 0.00001;\n    const val = d[dim];\n    const dPlus = Vec3.clone(d);\n    dPlus[dim] = val + epsilon;\n    const dMinus = Vec3.clone(d);\n    dMinus[dim] = val - epsilon;\n    const plus = stiffness(dPlus);\n    const minus = stiffness(dMinus);\n    Mat3.sub(plus, minus);\n    Mat3.multiplyScalar(plus, 1 / (2 * epsilon));\n    return plus;\n};\n\nconst stiffnessPair = (a: Bot.Bot, b: Bot.Bot): Mat3.Mat3 => {\n    const d = Vec3.sub(b.pos, a.pos);\n    return stiffness(d);\n};\n\nconst stiffnessPairDerivative = (a: Bot.Bot, dim: number, b: Bot.Bot): Mat3.Mat3 =>\n    stiffnessDerivative(dim, Vec3.sub(a.pos, b.pos));\n\nconst stiffnessMatrix = (world: World): SparseSymmetric => {\n    const result: SparseSymmetric = [...Array(world.bots.length * 3)].map(() => []);\n    for (let i = 0; i < world.bots.length; ++i) {\n        const sx = stiffnessGround(Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n        const sy = stiffnessGround(Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n        const sz = stiffnessGround(Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n        for (let k = 0; k < 3; ++k) {\n            for (let l = k; l < 3; ++l) {\n                result[3 * i + k].push([3 * i + l, (sx[k][l] + sz[k][l]) * friction + sy[k][l]]);\n            }\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (Vec3.length(Vec3.sub(world.bots[i].pos, world.bots[j].pos)) > offset + slack / 2) continue;\n            const s = stiffnessPair(world.bots[i], world.bots[j]);\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k].push([3 * j + l, -s[k][l]]);\n                    if (k > l) continue;\n                    result[3 * i + k][l - k][1] += s[k][l];\n                    result[3 * j + k][l - k][1] += s[k][l];\n                }\n            }\n        }\n    }\n    return result;\n};\n\nconst forceMatrix = (before: World, after: World, dt: number, world: World): number[] => {\n    const result = [...Array(world.bots.length * 3)].map(() => 0);\n    world.bots.forEach((bot, i) => {\n        for (let j = 0; j < 3; ++j) {\n            const v1 = (world.bots[i].pos[j] - before.bots[i].pos[j]) / dt;\n            const v2 = (after.bots[i].pos[j] - world.bots[i].pos[j]) / dt;\n            const acc = (v2 - v1) / dt;\n            result[3 * i + j] = ((j === 1 ? -1 : 0) - acc) * bot.weight;\n        }\n    });\n    return result;\n};\n\nexport const displacement = (before: World, after: World, dt: number, world: World): number[] => {\n    const f = forceMatrix(before, after, dt, world);\n    const k = stiffnessMatrix(world);\n    return ldiv(k, f);\n};\n\nexport const gradient = (\n    uBefore: number[],\n    u: number[],\n    uAfter: number[],\n    beforeBefore: World,\n    before: World,\n    after: World,\n    afterAfter: World,\n    dt: number,\n    world: World\n): Vec3.Vec3[] => {\n    const udku = [...Array(world.bots.length)].map(() => [0, 1, 2].map(() => 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            const sx = stiffnessDerivative(dim, Vec3.newVec3(world.bots[i].pos[1] + 0.5, 0, 0));\n            Mat3.multiplyScalar(sx, friction);\n            const sy = stiffnessDerivative(dim, Vec3.newVec3(0, world.bots[i].pos[1] + 0.5, 0));\n            const sz = stiffnessDerivative(dim, Vec3.newVec3(0, 0, world.bots[i].pos[1] + 0.5));\n            Mat3.multiplyScalar(sz, friction);\n            const vi = Vec3.newVec3(u[3 * i], u[3 * i + 1], u[3 * i + 2]);\n            Mat3.add(sx, sy);\n            Mat3.add(sx, sz);\n            const d = Vec3.dot(vi, Mat3.apply(sx, vi));\n            udku[i][dim] += d;\n            for (let j = i + 1; j < world.bots.length; ++j) {\n                if (Vec3.length(Vec3.sub(world.bots[j].pos, world.bots[i].pos)) > offset + slack / 2) continue;\n                const s = stiffnessPairDerivative(world.bots[i], dim, world.bots[j]);\n                const vj = Vec3.newVec3(u[3 * j], u[3 * j + 1], u[3 * j + 2]);\n                Vec3.subEq(vj, vi);\n                const svisvj = Mat3.apply(s, vj);\n                const diff = Vec3.dot(vj, svisvj);\n                udku[i][dim] += diff;\n                udku[j][dim] -= diff;\n            }\n        }\n    }\n    const result = [...Array(world.bots.length)].map(() => Vec3.newVec3(0, 0, 0));\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let dim = 0; dim < 3; ++dim) {\n            result[i][dim] =\n                -udku[i][dim] + 2 * ((-uBefore[3 * i + dim] + 2 * u[3 * i + dim] - uAfter[3 * i + dim]) / dt ** 2);\n        }\n    }\n    const overlapPenalty = 1000;\n    for (let i = 0; i < world.bots.length; ++i) {\n        if (world.bots[i].pos[1] > 0.5) continue;\n        const l = world.bots[i].pos[1] + 0.5;\n        result[i][1] += 2 * overlapPenalty * (2 * (l - 2));\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            let d = Vec3.sub(world.bots[j].pos, world.bots[i].pos);\n            const l = Vec3.length(d);\n            if (l > 1) continue;\n            d = Vec3.multiplyScalar(d, overlapPenalty * ((2 * (l - 2)) / l));\n            Vec3.subEq(result[i], d);\n            Vec3.addEq(result[j], d);\n        }\n    }\n    for (let i = 0; i < world.bots.length; ++i) {\n        const p1 = Vec3.multiplyScalar(beforeBefore.bots[i].pos, 2);\n        const p2 = Vec3.multiplyScalar(before.bots[i].pos, -8);\n        const p3 = Vec3.multiplyScalar(world.bots[i].pos, 12);\n        const p4 = Vec3.multiplyScalar(after.bots[i].pos, -8);\n        const p5 = Vec3.multiplyScalar(afterAfter.bots[i].pos, 2);\n        Vec3.addEq(p1, p2);\n        Vec3.addEq(p1, p3);\n        Vec3.addEq(p1, p4);\n        Vec3.addEq(p1, p5);\n        Vec3.addEq(result[i], Vec3.multiplyScalar(p1, 100000 / dt ** 4));\n    }\n    return result;\n};\n","import * as Vec3 from \"./Vec3\";\nimport * as Bot from \"./Bot\";\nimport * as World from \"./World\";\n\nconst average = (start: World.World, end: World.World): World.World => {\n    const result = World.newWorld();\n    result.bots = start.bots.map((b, i) => Bot.average(b, end.bots[i]));\n    return result;\n};\n\nconst gradient = (animation: World.World[], dt: number): Vec3.Vec3[][] => {\n    const result = [...Array(animation.length)].map(() =>\n        [...Array(animation[0].bots.length)].map(() => Vec3.newVec3(0, 0, 0))\n    );\n    const displacements = [...Array(animation.length)].map(() => [...Array(3 * animation[0].bots.length)].map(() => 0));\n    for (let i = 0; i < animation.length; ++i) {\n        const before = animation[Math.max(i - 1, 0)];\n        const after = animation[Math.min(i + 1, animation.length - 1)];\n        displacements[i] = World.displacement(before, after, dt, animation[i]);\n    }\n    for (let i = 1; i < animation.length - 1; ++i) {\n        const beforeBefore = animation[Math.max(i - 2, 0)];\n        const before = animation[i - 1];\n        const after = animation[i + 1];\n        const afterAfter = animation[Math.min(i + 2, animation.length - 1)];\n        result[i] = World.gradient(\n            displacements[i - 1],\n            displacements[i],\n            displacements[i + 1],\n            beforeBefore,\n            before,\n            after,\n            afterAfter,\n            dt,\n            animation[i]\n        );\n    }\n    return result;\n};\n\nconst optimize = (animation: World.World[], dt: number): void => {\n    const n = 500;\n    const acc = 0.02;\n    const vel = animation.map(world => world.bots.map(() => Vec3.newVec3(0, 0, 0)));\n    for (let iter = 0; iter < n / animation.length; ++iter) {\n        const y = (iter * animation.length) / n;\n        const x = ((1 + y) * animation.length) / 10;\n        World.setSlack(2 / x);\n        let g = gradient(animation, dt);\n        g = g.map(world => world.map(v => Vec3.multiplyScalar(v, -acc / (1e-4 + Vec3.length(v)))));\n        animation.map((world, i) =>\n            world.bots.map((bot, j) => {\n                if (bot.fixed) return;\n                vel[i][j] = Vec3.add(vel[i][j], g[i][j]);\n                vel[i][j] = Vec3.multiplyScalar(vel[i][j], 0.9);\n                bot.pos = Vec3.add(bot.pos, vel[i][j]);\n            })\n        );\n    }\n};\n\nconst subdivide = (animation: World.World[]): World.World[] => {\n    const result = [...Array(animation.length * 2 - 1)];\n    for (let i = 0; i < animation.length; ++i) result[2 * i] = animation[i];\n    for (let i = 1; i < result.length - 1; i += 2) result[i] = average(result[i - 1], result[i + 1]);\n    return result;\n};\n\nexport const createAnimation = (before: World.World, after: World.World, n: number): World.World[] => {\n    let result = [before, after];\n    let dt = 100;\n    for (let i = 0; i < n; ++i) {\n        dt /= 2;\n        result = subdivide(result);\n        optimize(result, dt);\n    }\n    return result;\n};\n","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D\n} from \"three\";\nimport * as Vec3 from \"./core/Vec3\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const newSphere = (pos: Vec3.Vec3, color: Color): Mesh => {\n    const geom = new SphereGeometry(1, 16, 16);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.position.set(...pos);\n    mesh.scale.set(0.5, 0.5, 0.5);\n    return mesh;\n};\n\nexport const updateCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number) => (cylinder: Mesh): Mesh => {\n    const orientation = new Matrix4();\n    orientation.lookAt(new Vector3(...from), new Vector3(...to), new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    cylinder.setRotationFromMatrix(orientation);\n    cylinder.scale.set(radius, Vec3.length(Vec3.sub(to, from)), radius);\n    const pos = Vec3.multiplyScalar(Vec3.add(from, to), 1 / 2);\n    cylinder.position.set(pos[0], pos[1], pos[2]);\n    return cylinder;\n};\n\nexport const newCylinder = (from: Vec3.Vec3, to: Vec3.Vec3, radius: number, color: Color): Mesh => {\n    const edgeGeometry = new CylinderGeometry(1, 1, 1, 8, 1);\n    const cylinder = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    return updateCylinder(from, to, radius)(cylinder);\n};\n","const n = 20;\n\nconst arc = [[0, 0, 0]];\n\nfor (let i = 0; i < n; ++i) {\n    const angle = (Math.PI / 2) * (i / n);\n    arc.push([arc[i][0] + Math.cos(angle), arc[i][1] - Math.sin(angle), 0]);\n}\n\nfor (let i = 1; i < n + 1; ++i) {\n    arc.push([-arc[i][0], arc[i][1], 0]);\n}\n\nconst m = Math.min(...arc.map(p => p[1]));\n\narc.forEach((_, i) => (arc[i][1] = arc[i][1] - m + 0.5));\n\nexport default {\n    title: \"Big arc\",\n    data: [[...[...Array(n + 1)].map((_, i) => [i, 0.5, 0]), ...[...Array(n)].map((_, i) => [-i - 1, 0.5, 0])], arc]\n};\n","import { Vec3, Bot, World } from \"../core\";\nimport arc from \"./arc\";\nimport bigArc from \"./bigArc\";\nimport bigCube from \"./bigCube\";\nimport cube from \"./cube\";\nimport stack from \"./stack\";\nimport towers from \"./towers\";\n\nexport const examples = [towers, stack, cube, bigCube, arc, bigArc].sort((a, b) => {\n    const d = a.data[0].length - b.data[0].length;\n    if (d === 0) return a.title > b.title ? 1 : -1;\n    return d;\n});\n\nconst toWorld = (index: number, time: number): World.World =>\n    World.setBots(examples[index].data[time].map(p => Bot.setPos(Vec3.newVec3(p[0], p[1], p[2]))(Bot.newBot())))(\n        World.newWorld()\n    );\n\nexport default (index: number): [World.World, World.World] => [toWorld(index, 0), toWorld(index, 1)];\n","export default {\n    title: \"Towers\",\n    data: [\n        [\n            [2, 0.5, 0],\n            [2, 1.5, 0],\n            [2, 2.5, 0],\n            [2, 3.5, 0],\n            [2, 4.5, 0],\n            [-2, 0.5, 0],\n            [-2, 1.5, 0],\n            [-2, 2.5, 0],\n            [-2, 3.5, 0],\n            [-2, 4.5, 0],\n            [2, 5.5, 0]\n        ],\n        [\n            [2, 0.5, 0],\n            [2, 1.5, 0],\n            [2, 2.5, 0],\n            [2, 3.5, 0],\n            [2, 4.5, 0],\n            [-2, 0.5, 0],\n            [-2, 1.5, 0],\n            [-2, 2.5, 0],\n            [-2, 3.5, 0],\n            [-2, 4.5, 0],\n            [-2, 5.5, 0]\n        ]\n    ]\n};\n","export default {\n    title: \"Stack\",\n    data: [\n        [\n            [0, 0.5, 0],\n            [0, 1.5, 0],\n            [0, 2.5, 0],\n            [0, 3.5, 0],\n            [0, 4.5, 0]\n        ],\n        [\n            [0, 0.5, 0],\n            [1, 0.5, 0],\n            [2, 0.5, 0],\n            [3, 0.5, 0],\n            [4, 0.5, 0]\n        ]\n    ]\n};\n","export default {\n    title: \"Cube\",\n    data: [\n        [\n            [-0.5, 0.5, -0.5],\n            [0.5, 0.5, -0.5],\n            [0.5, 0.5, 0.5],\n            [-0.5, 0.5, 0.5],\n            [-0.5, 1.5, -0.5],\n            [0.5, 1.5, -0.5],\n            [0.5, 1.5, 0.5],\n            [-0.5, 1.5, 0.5],\n            [-0.5, 2.5, -0.5],\n            [0.5, 2.5, -0.5],\n            [0.5, 2.5, 0.5],\n            [-0.5, 2.5, 0.5],\n            [-0.5, 3.5, -0.5],\n            [0.5, 3.5, -0.5],\n            [0.5, 3.5, 0.5],\n            [-0.5, 3.5, 0.5]\n        ],\n        [\n            [-1.5, 0.5, -1.5],\n            [-0.5, 0.5, -1.5],\n            [0.5, 0.5, -1.5],\n            [1.5, 0.5, -1.5],\n            [-1.5, 0.5, -0.5],\n            [-0.5, 0.5, -0.5],\n            [0.5, 0.5, -0.5],\n            [1.5, 0.5, -0.5],\n            [-1.5, 0.5, 0.5],\n            [-0.5, 0.5, 0.5],\n            [0.5, 0.5, 0.5],\n            [1.5, 0.5, 0.5],\n            [-1.5, 0.5, 1.5],\n            [-0.5, 0.5, 1.5],\n            [0.5, 0.5, 1.5],\n            [1.5, 0.5, 1.5]\n        ]\n    ]\n};\n","export default {\n    title: \"Big cube\",\n    data: [\n        [...Array(8)].map((_, i) => [...Array(8)].map((_, j) => [i - 3.5, 0.5, j - 3.5])).flat(),\n        [...Array(4)]\n            .map((_, i) => [...Array(4)].map((_, j) => [...Array(4)].map((_, k) => [i - 1.5, k + 0.5, j - 1.5])))\n            .flat()\n            .flat()\n    ]\n};\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { PerspectiveCamera, WebGLRenderer, Color, Mesh } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem, Button } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { Vec3, World, Animation } from \"./core\";\nimport { newScene, newSphere, newCylinder, updateCylinder } from \"./draw\";\nimport Prando from \"prando\";\nimport loadExample, { examples } from \"./examples\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst saveImage = () => {\n    const canvas = document.getElementsByTagName(\"canvas\")[0];\n    const image = canvas.toDataURL(\"image/png\");\n    const a = document.createElement(\"a\");\n    a.href = image.replace(/^data:image\\/[^;]/, \"data:application/octet-stream\");\n    a.download = \"image.png\";\n    a.click();\n};\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n    const [time, setTime] = useState(0);\n    const [animate, setAnimate] = useState(false);\n    const [scene, setScene] = useState(newScene());\n    const [botMeshes, setBotMeshes] = useState<Mesh[]>([]);\n    const [groundEdgeMeshes, setGroundEdgeMeshes] = useState<Mesh[]>([]);\n    const [edgeMeshes, setEdgeMeshes] = useState<Mesh[][]>([]);\n    const [animation, setAnimation] = useState<World.World[]>([]);\n    const [worldStart, setWorldStart] = useState<World.World>(World.newWorld());\n    const [worldEnd, setWorldEnd] = useState<World.World>(World.newWorld());\n    const [selectedExample, setSelectedExample] = useState<number | undefined>(undefined);\n\n    const updateWorld = (time: number) => {\n        animation[time].bots.map((bot, i) => {\n            botMeshes[i].position.set(...bot.pos);\n        });\n        animation[time].bots.map((bot, i) => {\n            scene.remove(groundEdgeMeshes[i]);\n            const strength = World.edgeStrength(bot.pos[1] + 0.5);\n            if (strength < 0.01) return;\n            scene.add(groundEdgeMeshes[i]);\n            updateCylinder(\n                bot.pos,\n                Vec3.newVec3(bot.pos[0], 0, bot.pos[2]),\n                Math.sqrt(strength) * 0.3\n            )(groundEdgeMeshes[i]);\n        });\n        animation[time].bots.map((from, i) =>\n            animation[time].bots.map((to, j) => {\n                if (i >= j) return;\n                scene.remove(edgeMeshes[i][j]);\n                const strength = World.edgeStrength(Vec3.length(Vec3.sub(to.pos, from.pos)));\n                if (strength < 0.01) return;\n                scene.add(edgeMeshes[i][j]);\n                updateCylinder(from.pos, to.pos, Math.sqrt(strength) * 0.3)(edgeMeshes[i][j]);\n            })\n        );\n    };\n\n    useEffect(() => {\n        if (animation.length === 0) return;\n        setBotMeshes(\n            animation[0].bots.map(bot => newSphere(bot.pos, bot.fixed ? new Color(0, 0, 1) : new Color(0, 1, 0)))\n        );\n        setGroundEdgeMeshes(\n            animation[0].bots.map(bot =>\n                newCylinder(bot.pos, Vec3.newVec3(bot.pos[0], 0, bot.pos[2]), 1, new Color(1, 0, 0))\n            )\n        );\n        setEdgeMeshes(\n            animation[0].bots.map(a => animation[0].bots.map(b => newCylinder(a.pos, b.pos, 1, new Color(1, 0, 0))))\n        );\n    }, [animation]);\n\n    useEffect(() => {\n        const scn = newScene();\n        botMeshes.map(mesh => scn.add(mesh));\n        groundEdgeMeshes.map(mesh => scn.add(mesh));\n        edgeMeshes.map((row, i) =>\n            row.map((mesh, j) => {\n                if (i >= j) return;\n                scn.add(mesh);\n            })\n        );\n        setScene(scn);\n    }, [botMeshes, groundEdgeMeshes, edgeMeshes]);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && camera && scene) renderer.render(scene, camera);\n    }, [controls, renderer, camera, frame, scene]);\n\n    useEffect(() => {\n        if (botMeshes.length === 0) return;\n        const pauseFrac = 0.1;\n        const pauseFrames = Math.round(pauseFrac * animation.length);\n        let t = time % (2 * (animation.length + pauseFrames));\n        if (t < pauseFrames) {\n            updateWorld(0);\n            return;\n        }\n        t -= pauseFrames;\n        if (t < animation.length) {\n            updateWorld(t);\n            return;\n        }\n        t -= animation.length;\n        if (t < pauseFrames) {\n            updateWorld(animation.length - 1);\n            return;\n        }\n        t -= pauseFrames;\n        updateWorld(animation.length - 1 - t);\n    }, [time, scene]);\n\n    useEffect(() => {\n        if (!animate) return;\n        const t = setInterval(() => setTime(time => time + 1), 10);\n        return () => clearInterval(t);\n    }, [animate]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <b>Microbots</b>\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Select an example</b>\n                                    </ListItem>\n                                </List>\n                                {examples.map((example, i) => (\n                                    <Button\n                                        key={i}\n                                        variant=\"contained\"\n                                        color={selectedExample === i ? \"primary\" : \"default\"}\n                                        onClick={() => {\n                                            const rng = new Prando(123);\n                                            const [ws, we] = loadExample(i);\n                                            const rand = () =>\n                                                Vec3.multiplyScalar(\n                                                    Vec3.newVec3(rng.next() - 0.5, rng.next() - 0.5, rng.next() - 0.5),\n                                                    0.0001\n                                                );\n                                            ws.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                                            we.bots.map(bot => (bot.pos = Vec3.add(bot.pos, rand())));\n                                            setWorldStart(ws);\n                                            setWorldEnd(we);\n                                            setAnimation([ws, we]);\n                                            setAnimate(false);\n                                            setSelectedExample(i);\n                                        }}>\n                                        {example.title} ({example.data[0].length} bots)\n                                    </Button>\n                                ))}\n                                <br />\n                                <br />\n                            </Paper>\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Compute the animation</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button\n                                            variant=\"contained\"\n                                            onClick={() => {\n                                                setAnimation(Animation.createAnimation(worldStart, worldEnd, 8));\n                                                setAnimate(true);\n                                            }}>\n                                            Generate animation\n                                        </Button>\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Extra options</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button variant=\"contained\" onClick={() => setTime(time + 1)}>\n                                            Time: {time}\n                                        </Button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button variant=\"contained\" onClick={() => setAnimate(!animate)}>\n                                            Animate: {animate ? \"true\" : \"false\"}\n                                        </Button>\n                                    </ListItem>\n                                    <ListItem>\n                                        <Button variant=\"contained\" onClick={() => saveImage()}>\n                                            Save screenshot\n                                        </Button>\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}