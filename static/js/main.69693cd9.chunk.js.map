{"version":3,"sources":["core/Bot.ts","core/utils.ts","core/World.ts","core/matrix.ts","App.tsx","draw.ts","index.tsx"],"names":["newBot","pos","Vector3","weight","fixed","setPos","bot","setWeight","setFixed","dot","a","b","result","i","length","subMatrix3","Matrix3","elements","map","e","zeros","height","width","Array","numberArrayFromVector3Array","vec","k","getComponent","numberArrayFromMatrix3Array","mat","row","element","j","l","newWorld","bots","edges","setBots","world","initEdges","list","array","_","edgeStrength","d","Math","exp","stiffness","set","x","y","z","multiplyScalar","stiffnessDerivative","edgeStrengthFun","dim","epsilon","setComponent","plus","clone","add","minus","sub","stiffnessPair","edge","stiffnessPairDerivative","derivative","removeFixedFromVector","vector","filter","removeFixedFromMatrix","assembleMatrix","fun","forEach","s","addMatrix3","stiffnessMatrix","stiffnessMatrixDerivative","forceMatrix","displacement","A","f","linear","compliance","u","objective","resolveCollisionStep","oneFixed","dist","n","resolveCollision","updateEdges","optimizeStepNumericalBotDim","stepSize","val","move","abs","sign","optimizeStepNumericalBot","gradient","fromArray","dk","optimizeStepNumerical","g","v","rng","Prando","useStyles","makeStyles","theme","gridItem","padding","spacing","textAlign","randomBot","Bot","next","pipe","World","App","useWindowSize","windowWidth","windowHeight","classes","mount","useRef","useState","controls","setControls","scene","setScene","camera","setCamera","renderer","setRenderer","frame","setFrame","iterations","setIterations","useEffect","mc","current","cam","PerspectiveCamera","position","lookAt","ren","WebGLRenderer","antialias","setClearColor","setSize","appendChild","domElement","ctrls","OrbitControls","enableDamping","dampingFactor","t","window","setInterval","clearInterval","removeChild","update","render","setTimeout","scn","color","Color","Matrix4","setPosition","scale","geom","SphereGeometry","applyMatrix4","computeVertexNormals","faces","face","vertexColors","fill","bg","BufferGeometry","fromGeometry","attributes","uv","mesh","Mesh","MeshPhongMaterial","geometry","matrixAutoUpdate","matrix","updateMatrix","reduce","fn","Scene","AmbientLight","light","DirectionalLight","newScene","from","to","radius","direction","subVectors","orientation","Object3D","up","multiply","edgeGeometry","CylinderGeometry","addCylinder","sqrt","clearTimeout","Grid","container","item","xs","style","innerHeight","overflowX","overflowY","className","Paper","List","ListItem","ref","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.69693cd9.chunk.js","sourcesContent":["import { Vector3 } from \"three\";\n\nexport type Bot = {\n    pos: Vector3;\n    weight: number;\n    fixed: boolean;\n};\n\nexport const newBot = (): Bot => ({\n    pos: new Vector3(0, 0, 0),\n    weight: 1,\n    fixed: false\n});\n\nexport const setPos = (pos: Vector3) => (bot: Bot): Bot => {\n    bot.pos = pos;\n    return bot;\n};\n\nexport const setWeight = (weight: number) => (bot: Bot): Bot => {\n    bot.weight = weight;\n    return bot;\n};\n\nexport const setFixed = (fixed: boolean) => (bot: Bot): Bot => {\n    bot.fixed = fixed;\n    return bot;\n};\n","import { Vector3, Matrix3 } from \"three\";\n\nexport const dot = (a: number[], b: number[]): number => {\n    let result = 0;\n    for (let i = 0; i < a.length; ++i) result += a[i] * b[i];\n    return result;\n};\n\nexport const applyMatrix = (A: number[][], b: number[]): number[] => [...Array(A.length)].map((_, i) => dot(A[i], b));\n\nexport const outerProduct = (a: Vector3, b: Vector3): Matrix3 =>\n    new Matrix3().set(\n        a.x * b.x,\n        a.x * b.y,\n        a.x * b.z,\n        a.y * b.x,\n        a.y * b.y,\n        a.y * b.z,\n        a.z * b.x,\n        a.z * b.y,\n        a.z * b.z\n    );\n\nexport const addMatrix3 = (a: Matrix3, b: Matrix3): Matrix3 => {\n    const result = new Matrix3();\n    result.elements = a.elements.map((e, i) => e + b.elements[i]);\n    return result;\n};\n\nexport const subMatrix3 = (a: Matrix3, b: Matrix3): Matrix3 => {\n    const result = new Matrix3();\n    result.elements = a.elements.map((e, i) => e - b.elements[i]);\n    return result;\n};\n\nexport const zeros = (height: number, width: number): number[][] =>\n    [...Array(height)].map(() => [...Array(width)].map(() => 0));\n\nexport const numberArrayFromVector3Array = (vec: Vector3[]): number[] => {\n    const result = [...Array(3 * vec.length)].map(() => 0);\n    vec.map((e, i) => {\n        for (let k = 0; k < 3; ++k) {\n            result[3 * i + k] = e.getComponent(k);\n        }\n    });\n    return result;\n};\n\nexport const numberArrayToVector3Array = (vec: number[]): Vector3[] =>\n    [...Array(vec.length / 3)]\n        .map(() => new Vector3())\n        .map((e, i) => {\n            for (let k = 0; k < 3; ++k) {\n                e.setComponent(k, vec[3 * i + k]);\n            }\n            return e;\n        });\n\nexport const numberArrayFromMatrix3Array = (mat: Matrix3[][]): number[][] => {\n    const result = zeros(3 * mat.length, 3 * mat[0]?.length || 0);\n    mat.map((row, i) =>\n        row.map((element, j) => {\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    result[3 * i + k][3 * j + l] = mat[i][j].elements[k + 3 * l];\n                }\n            }\n        })\n    );\n    return result;\n};\n\nexport const numberArrayToMatrix3Array = (mat: number[][]): Matrix3[][] =>\n    zeros(mat.length / 3, (mat[0]?.length || 0) / 3).map((row, i) =>\n        row.map((element, j) => {\n            const res = new Matrix3();\n            for (let k = 0; k < 3; ++k) {\n                for (let l = 0; l < 3; ++l) {\n                    res.elements[k + 3 * l] = mat[3 * i + k][3 * j + l];\n                }\n            }\n            return res;\n        })\n    );\n","import { Vector3, Matrix3 } from \"three\";\nimport {\n    dot,\n    applyMatrix,\n    outerProduct,\n    addMatrix3,\n    subMatrix3,\n    numberArrayFromVector3Array,\n    numberArrayFromMatrix3Array\n} from \"./utils\";\nimport { ldiv } from \"./matrix\";\nimport { Bot } from \"./Bot\";\n\nexport type World = { bots: Bot[]; edges: number[][] };\n\nexport const newWorld = (): World => ({ bots: [], edges: [] });\n\nexport const setBots = (bots: Bot[]) => (world: World): World => {\n    world.bots = bots;\n    return world;\n};\n\nexport const initEdges = (world: World): World => {\n    const list = [...Array(world.bots.length)].map(() => 1);\n    const array = list.map((_, i) => list.map((_, j) => (i === j ? 0 : 1)));\n    world.edges = array;\n    return world;\n};\n\nconst slack = 1.5;\n\nconst edgeStrength = (d: number): number => 1 / (1 + Math.exp(4 * (d - slack)));\n\nexport const stiffness = (d: Vector3): Matrix3 => outerProduct(d, d).multiplyScalar(-1 / d.dot(d));\n\nexport const stiffnessDerivative = (edgeStrengthFun: (d: number) => number) => (dim: number) => (\n    d: Vector3\n): Matrix3 => {\n    const epsilon = 0.00001;\n    const e = new Vector3();\n    e.setComponent(dim, epsilon);\n    const plus = stiffness(d.clone().add(e)).multiplyScalar(edgeStrengthFun(d.clone().add(e).length()));\n    const minus = stiffness(d.clone().sub(e)).multiplyScalar(edgeStrengthFun(d.clone().sub(e).length()));\n    return subMatrix3(plus, minus).multiplyScalar(1 / (2 * epsilon));\n};\n\nexport const stiffnessPair = (a: Bot, b: Bot, edge: number): Matrix3 =>\n    stiffness(b.pos.clone().sub(a.pos)).multiplyScalar(edge);\n\nexport const stiffnessPairDerivative = (edgeStrengthFun: (d: number) => number) => (bot: Bot) => (dim: number) => (\n    a: Bot,\n    b: Bot,\n    edge: number\n): Matrix3 => {\n    if (a !== bot && b !== bot) return new Matrix3().set(0, 0, 0, 0, 0, 0, 0, 0, 0);\n    const derivative = stiffnessDerivative(edgeStrengthFun)(dim)(b.pos.clone().sub(a.pos));\n    if (a === bot) return derivative.multiplyScalar(-1);\n    return derivative;\n};\n\nexport const removeFixedFromVector = (world: World) => (vector: Vector3[]): Vector3[] =>\n    vector.filter((_, i) => !world.bots[i].fixed);\n\nexport const removeFixedFromMatrix = (world: World) => (mat: Matrix3[][]): Matrix3[][] =>\n    mat.filter((_, i) => !world.bots[i].fixed).map(vector => vector.filter((_, j) => !world.bots[j].fixed));\n\nexport const assembleMatrix = (world: World, fun: (a: Bot, b: Bot, edge: number) => Matrix3): Matrix3[][] => {\n    const result = world.edges.map(() => world.edges.map(() => new Matrix3().multiplyScalar(0)));\n    result.forEach((row, i) => {\n        row.forEach((edge, j) => {\n            if (i === j) return;\n            const s = fun(world.bots[i], world.bots[j], world.edges[i][j]);\n            result[i][i] = subMatrix3(result[i][i], s);\n            result[i][j] = addMatrix3(result[i][j], s);\n        });\n    });\n    return removeFixedFromMatrix(world)(result);\n};\n\nexport const stiffnessMatrix = (world: World): Matrix3[][] => assembleMatrix(world, stiffnessPair);\n\nexport const stiffnessMatrixDerivative = (edgeStrengthFun: (d: number) => number) => (bot: Bot) => (dim: number) => (\n    world: World\n): Matrix3[][] => assembleMatrix(world, stiffnessPairDerivative(edgeStrengthFun)(bot)(dim));\n\nexport const forceMatrix = (world: World): Vector3[] =>\n    removeFixedFromVector(world)(world.bots.map(bot => new Vector3(0, -bot.weight, 0)));\n\nexport const displacement = (world: World): number[] => {\n    const f = numberArrayFromVector3Array(forceMatrix(world));\n    const k = numberArrayFromMatrix3Array(stiffnessMatrix(world));\n    return ldiv(k, f);\n};\n\nexport const compliance = (world: World): number => {\n    const f = numberArrayFromVector3Array(forceMatrix(world));\n    const u = displacement(world);\n    return dot(f, u);\n};\n\nexport const objective = (world: World): number => compliance(world);\n\nexport const resolveCollisionStep = (world: World): World => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = i + 1; j < world.bots.length; ++j) {\n            if (world.bots[i].fixed && world.bots[j].fixed) continue;\n            const oneFixed = world.bots[i].fixed || world.bots[j].fixed;\n            const d = world.bots[j].pos.clone().sub(world.bots[i].pos);\n            const dist = d.length();\n            if (dist > 1) continue;\n            const n = d.multiplyScalar((1 - dist) / (oneFixed ? 1 : 2) / dist);\n            if (!world.bots[i].fixed) world.bots[i].pos = world.bots[i].pos.clone().sub(n);\n            if (!world.bots[j].fixed) world.bots[j].pos = world.bots[j].pos.clone().add(n);\n        }\n    }\n    return world;\n};\n\nexport const resolveCollision = (world: World): World => {\n    let result = world;\n    for (let i = 0; i < 10; ++i) result = resolveCollisionStep(result);\n    return result;\n};\n\nconst updateEdges = (world: World) => {\n    for (let i = 0; i < world.bots.length; ++i) {\n        for (let j = 0; j < world.bots.length; ++j) {\n            if (i === j) continue;\n            const d = world.bots[j].pos.clone().sub(world.bots[i].pos).length();\n            world.edges[i][j] = edgeStrength(d);\n        }\n    }\n};\n\nexport const optimizeStepNumericalBotDim = (stepSize: number) => (world: World) => (bot: Bot) => (\n    dim: number\n): World => {\n    const epsilon = 0.001;\n    const val = bot.pos.getComponent(dim);\n    bot.pos.setComponent(dim, val + epsilon);\n    updateEdges(world);\n    const plus = compliance(world);\n    bot.pos.setComponent(dim, val - epsilon);\n    updateEdges(world);\n    const minus = compliance(world);\n    bot.pos.setComponent(dim, val);\n    let move = -(plus - minus) * stepSize;\n    const maxMove = 0.5;\n    if (Math.abs(move) > maxMove) move = maxMove * Math.sign(move);\n    bot.pos.setComponent(dim, val + move);\n    updateEdges(world);\n    return world;\n};\n\nexport const optimizeStepNumericalBot = (stepSize: number) => (world: World) => (bot: Bot): World => {\n    if (bot.fixed) return world;\n    const fun = optimizeStepNumericalBotDim(stepSize)(world)(bot);\n    [0, 1, 2].map(dim => fun(dim));\n    return world;\n};\n\nexport const gradient = (edgeStrengthFun: (d: number) => number) => (world: World): Vector3[] => {\n    const u = displacement(world);\n    return world.bots.map(bot =>\n        new Vector3().fromArray(\n            [0, 1, 2].map(dim => {\n                const dk = numberArrayFromMatrix3Array(stiffnessMatrixDerivative(edgeStrengthFun)(bot)(dim)(world));\n                return -dot(u, applyMatrix(dk, u));\n            })\n        )\n    );\n};\n\nexport const optimizeStepNumerical = (stepSize: number) => (world: World): World => {\n    updateEdges(world);\n    const g = gradient(edgeStrength)(world).map(v => v.multiplyScalar(-stepSize / (1 + v.length())));\n    world.bots.map((bot, i) => {\n        if (bot.fixed) return;\n        bot.pos.add(g[i]);\n    });\n    return resolveCollision(world);\n};\n","import * as linear from \"linear-solve\";\n\nexport const ldiv = (A: number[][], b: number[]): number[] => linear.solve(A, b);\n","import React, { FC, useEffect, useRef, useState } from \"react\";\nimport { Vector3, PerspectiveCamera, WebGLRenderer, Scene, Color } from \"three\";\nimport { OrbitControls } from \"three/examples/jsm/controls/OrbitControls\";\nimport { Grid, Paper, makeStyles, List, ListItem } from \"@material-ui/core\";\nimport { useWindowSize } from \"@react-hook/window-size\";\nimport { pipe } from \"ts-pipe-compose\";\nimport Prando from \"prando\";\nconst rng = new Prando(123);\nimport { Bot, World } from \"./core\";\nimport { newScene, addSphere, addCylinder } from \"./draw\";\n\nconst useStyles = makeStyles(theme => ({\n    gridItem: {\n        padding: theme.spacing(2),\n        textAlign: \"center\"\n    }\n}));\n\nconst randomBot = () => Bot.setPos(new Vector3(...[rng.next(), rng.next(), rng.next()].map(x => x * 10)))(Bot.newBot());\n\nconst bot1 = Bot.setFixed(true)(Bot.newBot());\nconst bot2 = Bot.setFixed(true)(Bot.setPos(new Vector3(3, 0, 0))(Bot.newBot()));\nconst bot3 = Bot.setFixed(true)(Bot.setPos(new Vector3(0, 0, 2))(Bot.newBot()));\nconst bots = [\n    bot1,\n    bot2,\n    bot3,\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot(),\n    randomBot()\n];\nlet world = pipe(World.newWorld(), World.setBots(bots), World.initEdges);\n\nconst App: FC = () => {\n    const [windowWidth, windowHeight] = useWindowSize();\n    const width = windowWidth * 0.55;\n    const height = windowHeight * 0.9;\n    const fov = 75;\n    const classes = useStyles();\n    const mount = useRef<HTMLDivElement>(null);\n    const [controls, setControls] = useState<OrbitControls>();\n    const [scene, setScene] = useState<Scene>();\n    const [camera, setCamera] = useState<PerspectiveCamera>();\n    const [renderer, setRenderer] = useState<WebGLRenderer>();\n    const [frame, setFrame] = useState(0);\n    const [iterations, setIterations] = useState(0);\n\n    useEffect(() => {\n        const mc = mount.current;\n        if (!mc) return;\n        // Camera\n        const cam = new PerspectiveCamera(fov, width / height, 0.1, 1000);\n        cam.position.set(10, 10, 10);\n        cam.lookAt(0, 0, 0);\n        setCamera(cam);\n        // Renderer\n        const ren = new WebGLRenderer({ antialias: true });\n        ren.setClearColor(\"#000000\");\n        ren.setSize(width, height);\n        mc.appendChild(ren.domElement);\n        setRenderer(ren);\n        // Controls\n        const ctrls = new OrbitControls(cam, ren.domElement);\n        ctrls.enableDamping = true;\n        ctrls.dampingFactor = 0.5;\n        setControls(ctrls);\n        // Animate\n        const t = window.setInterval(() => setFrame(frame => frame + 1), 1000 / 30);\n        return () => {\n            window.clearInterval(t);\n            mc.removeChild(ren.domElement);\n        };\n    }, [mount, width, height]);\n\n    useEffect(() => {\n        if (controls) controls.update();\n        if (renderer && scene && camera) renderer.render(scene, camera);\n    }, [controls, renderer, scene, camera, frame]);\n\n    useEffect(() => {\n        if (iterations >= 50) return;\n        const t = setTimeout(() => {\n            setIterations(iterations + 1);\n            let scn = world.bots\n                .map(bot => addSphere(bot.pos, bot.fixed ? new Color(0, 0, 1) : new Color(0, 1, 0)))\n                .reduce((x, fn) => fn(x), newScene());\n            world.bots.map((from, i) =>\n                world.bots.map((to, j) => {\n                    if (i >= j) return;\n                    scn = addCylinder(from.pos, to.pos, Math.sqrt(world.edges[i][j]) * 0.3, new Color(1, 0, 0))(scn);\n                })\n            );\n            setScene(scn);\n            world = World.optimizeStepNumerical(0.5)(world);\n        }, 10);\n        return () => clearTimeout(t);\n    }, [controls, renderer, scene, camera, iterations]);\n\n    return (\n        <>\n            <Grid container item xs={11}>\n                <Grid\n                    item\n                    xs={4}\n                    style={{ height: window.innerHeight * 0.9, overflowX: \"hidden\", overflowY: \"scroll\" }}>\n                    <Grid container direction=\"column\">\n                        <Grid item className={classes.gridItem}>\n                            <Paper>\n                                <List>\n                                    <ListItem>\n                                        <b>Microbots</b>\n                                    </ListItem>\n                                    <ListItem>\n                                        <b>iterations: </b>\n                                        {iterations}\n                                    </ListItem>\n                                </List>\n                            </Paper>\n                        </Grid>\n                    </Grid>\n                </Grid>\n                <Grid item xs={5}>\n                    <div ref={mount} />\n                </Grid>\n            </Grid>\n        </>\n    );\n};\n\nexport default App;\n","import {\n    Vector3,\n    Scene,\n    AmbientLight,\n    DirectionalLight,\n    Matrix4,\n    SphereGeometry,\n    Color,\n    BufferGeometry,\n    Mesh,\n    MeshPhongMaterial,\n    CylinderGeometry,\n    Object3D\n} from \"three\";\n\nexport const newScene = (): Scene => {\n    const scene = new Scene();\n    scene.add(new AmbientLight(0xffffff, 0.4));\n    const light = new DirectionalLight(0xffffff, 0.4);\n    light.position.set(0, 1, 0);\n    scene.add(light);\n    return scene;\n};\n\nexport const addSphere = (pos: Vector3, color: Color) => (scene: Scene): Scene => {\n    const mat = new Matrix4().setPosition(pos).scale(new Vector3(0.5, 0.5, 0.5));\n    const geom = new SphereGeometry(1, 16, 16).applyMatrix4(mat);\n    geom.computeVertexNormals();\n    geom.faces.forEach(face => (face.vertexColors = new Array(3).fill(true).map(() => color)));\n    const bg = new BufferGeometry().fromGeometry(geom);\n    delete bg.attributes.uv;\n    const mesh = new Mesh(bg, new MeshPhongMaterial({ color: color }));\n    mesh.geometry = bg;\n    mesh.matrixAutoUpdate = false;\n    mesh.matrix = mat;\n    mesh.updateMatrix();\n    scene.add(mesh);\n    return scene;\n};\n\nexport const addCylinder = (from: Vector3, to: Vector3, radius: number, color: Color) => (scene: Scene): Scene => {\n    const direction = new Vector3().subVectors(to, from);\n    const orientation = new Matrix4();\n    orientation.lookAt(from, to, new Object3D().up);\n    orientation.multiply(new Matrix4().set(1, 0, 0, 0, 0, 0, 1, 0, 0, -1, 0, 0, 0, 0, 0, 1));\n    const edgeGeometry = new CylinderGeometry(radius, radius, direction.length(), 8, 1);\n    const edge = new Mesh(edgeGeometry, new MeshPhongMaterial({ color: color }));\n    edge.applyMatrix4(orientation);\n    edge.position.x = (to.x + from.x) / 2;\n    edge.position.y = (to.y + from.y) / 2;\n    edge.position.z = (to.z + from.z) / 2;\n    scene.add(edge);\n    return scene;\n};\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById(\"root\")\n);\n"],"sourceRoot":""}